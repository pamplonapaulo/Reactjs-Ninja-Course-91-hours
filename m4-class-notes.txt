"React.js Ninja" by Fernando Daciuk

* Module 4 * React Router

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04

Part 1

class #001 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Presentation and Module requirements

class #002 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

React Router
http://reacttraining.com/react-router

- Web (React.js)   <-- 
- Native (React Native)

https://reacttraining.com/react-router/web/guides/quick-start

Terminal:
yarn add react-router-dom

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/01-hello-react-router/01


In case you face problems such as upath@^1.1.1 in our yarn.lock, you may want to run yarn install with:

        --ignore-engines

class #003 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Browser Router

-> Creation of Single Page Applications (SPA)

        import { BrowserRouter } from 'react-router-dom'

        const App = () => (
          <BrowserRouter>
            <div>
              <h1>Hello</h1>
            </div>
          </BrowserRouter>
        )

Component <Link>:

        import { Link } from 'react-router-dom'

        <Link to='/about' children='About' />

        Or

        <Link to='/about'>About</Link>


    Different than an html <a> tag, this React <Link> component doesn't reload the entire page. It's kind of like <Link> comes with a preventDefault() by itself.

    Props:

      1. path=<strin>
      2. path=<ReactComponent>



Component <Route>:

        import { Route } from 'react-router-dom'

        <Route path='/about' component={About} />

        const About = () => (
          <h1>About</h1>
        )

        Behind the scenes, <Route> does something more or less like a short circuit:

          {this.state.route === '/about' && <About />}


class #004 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Rendering more than one route
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/01-hello-react-router/02

'exact' & Home trick render:

  <Route path='/' component={Home} />

  path='/'
  Will get rendered any time another route with '/' is rendered, such as:
  path='/about' or path='/contact'

  If you want {Home} to get render only at it's exact route, you must include the exact property:

      <Route path='/' exact component={Home} />

class #005 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Webpack: fixing issue
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/01-hello-react-router/03

Issue it's about relative paths X absolute paths

webpack/dev.congif.js: 

  output -> publicPath

  PublicPath is the path where webpack generates memory assets. What Daciuk did in the class was just the add of a forward slash: '/'

  Before:

          output: Object.assign({}, common.output, {
            filename: '[name].js',
            publicPath: ''
          }),

  After:

          output: Object.assign({}, common.output, {
            filename: '[name].js',
            publicPath: '/'
          }),

  But! My webpack/dev.config didn't have neigther '' nor '/'. It didn't have any publicPath at all. And it worked. Probably Daciuk also updated this boilerplate (here used by me) later, before I started the course.

          output: Object.assign({}, common.output, {
            filename: '[name].js'
          }),

  Ok, end of the mistery: Daciuk actually moved it to webpack/common.js:

          output: {
            path: paths.dist,
            filename: '[name]-[chunkhash].js',
 -->        publicPath: '/'
          },

class #006 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Dynamic Routes
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/01-hello-react-router/04

BrowserRouter can't have many children. It should have just one child:

        <BrowserRouter>
          <div>

          </div>
        </BrowserRouter>

Routes' props:
history: {…}, location: {…}, match: {…}



console.log(props.match)

        isExact: true
        params: {}
        path: "/blog/post-2"
        url: "/blog/post-2"

So insted of:

    <Route path='/blog/post-1' component={Post} />
    <Route path='/blog/post-2' component={Post} />

Dynamicaly we could write:

    <Route path='/blog/:post' component={Post} />

That way, the Route has params filled:

    params:
    post: "post-2"

    or

    params:
    post: "post-1"



After all, the blog area would look like this:

        const Blog = () => (

        <div>
          <h1>Blog</h1>
          <ul>
            <li><Link to='/blog/Jesus'>Post about Jesus's life</Link></li>
            <li><Link to='/blog/Sidarta'>Post about Sidarta's life</Link></li>
          </ul>

          <Route path='/blog/:post' component={Post} />
          <Route exact path='/blog' component={NoPost} />
        </div>
      )

      const Post = ({ match }) => (
        <div>
          <h2>Post: {match.params.post}</h2>
        </div>
      )

      const NoPost = () => (
        <div>
          <p>Select a post</p>
        </div>
      )

class #007 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
SPA Concepts | Route request
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/02-spa-concepts/01

- Route request behind the scenes

Set up a static server:

    mkdir m4-01-server
    cd m4-01-server
    echo "{}" >> package.json
    npm i --save-dev http-server

Now edit package.json to include a script:

    before:
    {
      "devDependencies": {
        "http-server": "^0.12.3"
      }
    }

    then add:
    {
      "scripts": {
        "start": "http-server"
      },
      "devDependencies": {
        "http-server": "^0.12.3"
      }
    }

Run the server:

    yarn start

Then:

yarn run v1.21.1
warning package.json: No license field
$ http-server
Starting up http-server, serving ./
Available on:
  http://127.0.0.1:8080
  http://192.168.0.199:8080
Hit CTRL-C to stop the server


We did this cuz professor wanted to show that an index.html file opened from this URL (generated by the server) actually loads the file in a request type 'get'. If you just open the index.html file directly by opening the file in the browser, then there is nothing actually being loadded. We can check this difference by dev tools in "network" tab, where file size shows some value (421 bites) in a request and shows zero if opened directly by the browser as a local file.

Static server provides routes in a totally different way. Paths using '/' in the URL mean real/physic folders in it's hard disk. Dynamic servers can handle it in dynamic ways, which is what we are doing by React Routes.


class #008 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
History API (browser history, a HTML5 feature)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/02-spa-concepts/02

Navigation in a front-end application

history API is stored inside window object:

      window.history

method: PUSH STATE

        history.pushState()
        It includes in the history a given URL.

        function handleClick (e) {
          e.preventDefault()
          var state = {}
          var title = ''
          var url = e.target.getAttribute('href')
          history.pushState(state, title, url)
          $h1.textContent = url
        }

Full code:
https://github.com/da2k/curso-reactjs-ninja/blob/master/examples/m04/02-spa-concepts/02/main.js

By this approach, navigation occurs without load the entire page.

that's it. Just a demonstrarion.

class #009 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
History API
method: ON POP STATE
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/02-spa-concepts/03


      window.onpopstate = function (e) {
        console.log('state:', e.state)
        navigation({ url: e.state.url })
      }

      Method onpopstate happens when user clicks in the backwards or forwards buttons in the browser.

      e.state.url gives you the path in the browser, the URL.

Full code:
https://github.com/da2k/curso-reactjs-ninja/blob/master/examples/m04/02-spa-concepts/03/main.js


class #010 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
History API:
method: REPLACE STATE

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/02-spa-concepts/04

Last class, by navigating back and forth in the browser, we get state null when we get back to the starting page/home, because the first state of the application was not defined.

We could just push a initial state when users access the page. But using method 
replaceState that works better.

history.replaceState({ url: '/' }, '', '/')


class #011 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Reload issue

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/02-spa-concepts/05

This issue have to be solved in the server side, on the back-end.

Any kind of request or route inside the domain, must get redirect to the application's initial page.

Terminal:
yarn add --dev serve

This dependency is basicaly already set to work that way.
https://www.npmjs.com/package/serve

script in package.json:

          {
            "scripts": {
              "start": "serve"
            },
            "devDependencies": {
              "http-server": "^0.12.3",
              "serve": "^11.3.2"
            }
          }


serve -s

          {
            "scripts": {
              "start": "serve -s"
            },
            "devDependencies": {
              "http-server": "^0.12.3",
              "serve": "^11.3.2"
            }
          }

What it does? Any route not found will get redirected to home.

That's it. That's the solution. Course won't dive deeper into this.


class #012 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
React Router: Switch component
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router

<Switch /> renders a single route per time.

    import { Switch } from 'react-router-dom'

    <Switch>
      <Route path='/' exact component={Home} />
      <Route path='/about' component={About} />
      <Route path='/blog' component={Blog} />
      <Route component={Error404} />
    </Switch>

const Error404 = () => (
  <h1>Page not found</h1>
)

Route without path would get loaded if not wrapped by <Switch/>

Important to have the error404 at the end, so it gets loaded only if anyone else matches the path.

Without the Switch, this code would load the error404 for all of them.


class #013 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Dynamic / Specific Routes

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/02




<Route path='/about' component={Page} />
<Route path='/contact' component={Page} />

const Page = ({ match }) => (
  <div>
    {console.log({match})}
    <h1>{Page}</h1>
  </div>
)

But the magic is, insted of:

      <Switch>
        <Route path='/' exact component={Home} />
        <Route path='/about' component={Page} />
        <Route path='/contact' component={Page} />
        <Route path='/blog' component={Blog} />
        <Route component={Error404} />
      </Switch>

How about that: path='/(about|contact)'

      <Switch>
        <Route path='/' exact component={Home} />
        <Route path='/(about|contact)' component={Page} />
        <Route path='/blog' component={Blog} />
        <Route component={Error404} />
      </Switch>


Also. With that current code:

      const Blog = () => (

        <div>
          <h1>Blog</h1>
          <ul>
            <li><Link to='/blog/Jesus'>Post about Jesus's life</Link></li>
            <li><Link to='/blog/Sidarta'>Post about Sidarta's life</Link></li>
          </ul>

          <Route path='/blog/:post' component={Post} />
          <Route exact path='/blog' component={NoPost} />
        </div>
      )

      A URL request with extra characteres would also get loaded:

      http://localhost:3000/blog/JesusDead

      Renders: Post:
      
          JesusDead

      Shit, we've better fix that!

          const Blog = () => (

            <div>
              <h1>Blog</h1>
              <ul>
                <li><Link to='/blog/Jesus'>Post about Jesus's life</Link></li>
                <li><Link to='/blog/Sidarta'>Post about Sidarta's life</Link></li>
              </ul>

              <Route path='/blog/:post(Jesus|Sidarta)' component={Post} />
              <Route exact path='/blog' component={NoPost} />
            </div>
          )

      So with this approach, any extra type in the URL request won't render anything. 

      To achieve something a little better, let's include Switch like we saw earlier:

                const Blog = () => (

                  <div>
                    <h1>Blog</h1>
                    <ul>
                      <li><Link to='/blog/Jesus'>Post about Jesus's life</Link></li>
                      <li><Link to='/blog/Sidarta'>Post about Sidarta's life</Link></li>
                    </ul>

                    <Switch>
                      <Route exact path='/blog' component={NoPost} />
                      <Route path='/blog/:post(Jesus|Sidarta)' component={Post} />
                      <Route component={Post404} />
                    </Switch>
                  </div>
                )

                const Post404 = () => (
                  <h1>This post doesn't exist</h1>
                )

      Super important to remember this is RegEx being passed in the path.
      
      Check this one and try it out at the browser:

                const Blog = () => (
                  <div>
                    <h1>Blog</h1>
                    <ul>
                      <li><Link to='/blog/post-1'>Post 1</Link></li>
                      <li><Link to='/blog/post-2'>Post 2</Link></li>
                      <li><Link to='/blog/post-3'>Post 3</Link></li>
                      <li><Link to='/blog/post-4'>Post 4</Link></li>
                    </ul>

                    <Switch>
                      <Route exact path='/blog' component={NoPost} />
                      <Route path='/blog/:post(post-[1234])' component={Post} />
                      <Route component={Post404} />
                    </Switch>
                  </div>
                )

      As you see, we could use RegEx in deep.


class #014 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
NavLink
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/03

import { NavLink } from 'react-router-dom'

Works pretty much just like <Link>, with one difference:

  - it adds a class 'active' in the clicked NavLink
  - it turns a property 'aria-current' into true if the NavLink was clicked, or false if it's not active.

NavLink checks if the 'to=' property matches the current route.
If the current route at the URL contains the route in 'to'. That means a route like home, '/', would be contained inside every other route. How to prevent this? Using the same prop we use in the Route: exact

    <li><NavLink to='/' exact children='Home' /></li>

OBS: Differently from prof's app, my App actually shows 'aria-current=page' for those selected NavLinks.

Insted of having 'active' class, if you will, we could have another value for that class. Just pass this property:

    activeClassName='active-link'

    With that, it will start to use this custom name for the active NavLink in this single item where you passed it. If you want that name in all options, pass it in all of them.

    <ul>
      <li><NavLink activeClassName='active-link' to='/blog/post-1'>Post 1</NavLink></li>
      <li><NavLink activeClassName='active-link' to='/blog/post-2'>Post 2</NavLink></li>
      <li><NavLink activeClassName='active-link' to='/blog/post-3'>Post 3</NavLink></li>
      <li><NavLink activeClassName='active-link' to='/blog/post-4'>Post 4</NavLink></li>
    </ul>

Inline Style for Active NavLink:

  activeStyle={{ color: 'red' }}

  <ul>
    <li><NavLink activeStyle={{ color: 'red' }} to='/' exact children='Home' /></li>
    <li><NavLink activeStyle={{ color: 'red' }} to='/about' children='About' /></li>
    <li><NavLink activeStyle={{ color: 'red' }} to='/contact' children='Contact' /></li>
    <li><NavLink activeStyle={{ color: 'red' }} to='/blog' children='Blog' /></li>
  </ul>


  Also, in the real world we wouldn't write like this. We would have an component for that:

          const Link = (props) => (
            <NavLink activeStyle={{ color: 'red' }} {...props} />
          )


          <ul>
            <li><Link to='/' exact>Home</Link></li>
            <li><Link to='/about'>About</Link></li>
            <li><Link to='/contact'>Contact</Link></li>
            <li><Link to='/blog'>Blog</Link></li>
          </ul>

class #015 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Prop Render
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/04

Route: path + component

If Route doesn't come with path, component will always get rendered, unless if inside a Switch.

So far, we have been using component= to render.

Why do we need prop Render?

1. If you have an prop in scope that must be passed down.

Ex:

        const NoPost = ({ numberOfPosts }) => (
          <div>
            <p>Select one of the {numberOfPosts} post</p>
          </div>
        )

        For that, we can't just have a Route like this:
        <Route exact path='/blog' component={NoPost} />

        So how can we do? This way:
        <Route exact path='/blog' render={() => <NoPost numberOfPosts={2} />} />

        Prop component= could achieve something close, but with different things going on behind the scene and different results.

              <Route exact path='/blog' component={() => <NoPost numberOfPosts={2} />} />

        That line above "works", but we don't want it. Why?

        Prop render= holds the data in cache and uses when it needs. React Router calls this function when necessary, after have read it and saved in cache.

        Prop component= expect a React component. The function passed in the component would be created every single time when the component is called. So the whole component would have mountings and unmountings not desired. So prop render= optimizes the whole thing.

        So prop render= is great every time we need to pass data to the component, when we can't pass by reference.

         Also, this prop render renders basic JSX, doesn't have to be an etire component. It could be just this:

          <Route exact path='/blog' render={() => <p>Select a post</p>} />

        Also, those props from component= prop, that we saw before, such as 'match', 'location', and 'history'; they are also available when we use render= prop. Like that:

              <Route exact path='/blog' render={(props) => <NoPost numberOfPosts={2} {...props} />} />

              const NoPost = ({ numberOfPosts, match, history, location }) => (
                <div>
                  <p>Select one of the {numberOfPosts} post</p>
                </div>
              )

class #016 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Children prop
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/05


Children as a funtion inside Route component will always get rendered, even without match with path.

Children also receives all props that other components get: match, location, history...

BUT! Those properties are available only when there is a match on the path.

  <Route path='/about'>
    {({ match }) => (
      <pre>
        {console.log('About Page', match)}
        This is About page.
      </pre>
    )}
  </Route>

In this code above, match prop is null unless path has a match.
However, the text 'This is About page.' renders all the time, no matter the path.

So based on the match, our code may take different decisions.

      <Route path='/about'>
        {({ match }) => (
          <pre>
            Is this ABOUT's page? {`${!!match}`}
          </pre>
        )}
      </Route>


Another example:

      const Link = (props) => (
        <Route path={props.to} exact={props.exact}>
          {({ match, history }) => (
            <a
              href={props.to}
              style={match ? { color: 'red' } : null}
              onClick={(e) => {
                e.preventDefault()
                history.push(props.to)
              }}
            >
              {props.children}
            </a>
          )}
        </Route>
      )

      OBS: This is kind of how NavLink works behind the scenes.

class #017 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Pattern "Render Props"

Earlier, we saw the pattern Container Components (Parent) & Presentational Components (Children).

So what is Pattern Render Props?

It's how the Route component works, the way we started to talk about those last few classes.

Route -> prop Children, used as a function

  <Route path={props.to} exact={props.exact}>

                    {({ match, history }) => (
                      <a
                        href={props.to}
                        style={match ? { color: 'red' } : null}
                        onClick={(e) => {
                          e.preventDefault()
                          history.push(props.to)
                        }}
                      >
                        {props.children}
                      </a>
                    )}

  </Route>

  It was known as "children as a function'. Nowadays, it got named as "Render Props".

  It's ok to mix those patterns, you don't have to chose just one.

class #018 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Route props: match
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/06

3 ways to render a component:

  
  - using component
  <Route component={} />
  
  - using render
  <Route render={} />
  
  - using children
  <Route>{() => (<a>{props.children}</a>)}</Route>

Important to mention that we cannot use all at once. Pick one!


match.params:

  <Route path='/(about|contact)' component={Page} />  

        http://localhost:3000/about
          console.log(match.params):
            params: {0: "about"}

  <Route path='/(about|contact)/(1|2)?' component={Page} />

        http://localhost:3000/about
          console.log(match.params):
            params: {0: "about", 1: undefined}
  
        http://localhost:3000/about/1
          console.log(match.params):
            params: {0: "about", 1: "1"}

        http://localhost:3000/about/2
          console.log(match.params):
            params: {0: "about", 1: "2"}


  As shown abovem, using a question mark '?' at the end of your params, you set those as optionals.

    path='/(about|contact)/(1|2)?'

        Above, (about|contact) is not an option
        But (1|2) is an option

    path='/(about|contact)?/(1|2)?'

        Both params are options.

    path='/(about|contact)/:id?'

        http://localhost:3000/about/2
        params: {0: "about", id: "2"}

        http://localhost:3000/about/
        params: {0: "about", id: undefined}

    path='/(about|contact)/:id'

        http://localhost:3000/about/
        Page not found

    Sub routes: Blog

    When a component doesn't have a path, such as:

          <Route component={Post404} />
    
    properties (or the 'match' object if you will) passed throw it actually are the same reference from it's parent, which in 'Post404' case, is 'Blog':

          <Route path='/blog' component={Blog} />


class #019 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Route Props: location (pathname & key)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/07

  {
    hash: ""
    key: "ozfnyj"
    pathname: "/about"
    search: ""
    state: undefined
  }

  --> location's data (above) is based on the current route. 

  --> match's data (last class) is based on the current match (route and component).

    hash:
    key:
    pathname:
    search:
    state:

    pathname: which route got the match

      If URL is like: http://localhost:3000/blog/post-1

        Both Blog component and Post component show the same pathname:
        
              pathname: "/blog/post-1"


    key: identifies each route of navigation, like an Id

      Also, if URL is like: http://localhost:3000/blog/post-1

        Both Blog component and Post component show the same key (which is ramdom and changes every time):
          
              key: "ai4qty"

        Key prop is available only when navigation itself starts. Before that, location's object won't show it to you. So home pages mostly won't have a key. It helps to know if user is in the first page of history.

        Every navigation will keep the key. Keys have different value when another routes get trigged. visiting those routes again will show you the previous value of that related key.


class #020 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Route Props: location (hash)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/08


Identifies if URL contains any hash (#)

Helps scroll navigation in the same page, jumping to another part of the page.

      <li><a href='#site-info'>Site information</a></li>

      <div id='site-info' style={{ margin: '1000px 0' }}>
        <h2>Site information</h2>
      </div>

{hash: "#site-info"}

class #021 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Route Props: location (search)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/09

home -> { search: ""}

It apsses data via query string, in URLs

How to use?

Just include your data after a question mark

http://localhost:3000/about?data=my-data

  {
    pathname: "/about",
    search: "?data=my-data",
    hash: "",
    state: undefined
  }

http://localhost:3000/about?name=paulo&age=41

  { search: "?name=paulo&age=41" }


http://localhost:3000/?name=paulo&age=41&city=London&field=frontend

      const Home = ({ match, location }) => (
        <div>
          {console.log('HOME location:', location)}
          {console.log(
            'Location Search:',
            location.search
              .replace('?', '')
              .split('&')
          )}
          <h1>Home</h1>
        </div>
      )

      console:

        ["name=paulo", "age=41", "city=London", "field=frontend"]

      From array to object:

        {console.log(
          'Location Search:',
          location.search
            .replace('?', '')
            .split('&')
            .reduce((acc, item) => {
              const [key, value] = item.split('=')
              acc[key] = value
              return acc
            }, {})
        )}

        console:
          {
            name: "paulo",
            age: "41",
            city: "London",
            field: "frontend"
          }

How about duplicated keys?

http://localhost:3000/?name=paulo&age=41&city=London&field=frontend&arr=0&arr=1

To avoid overriding an existent key, let's change the reduce's content in the code above:

        .reduce((acc, item) => {
          const [key, value] = item.split('=')
          if (acc[key]) {
            acc[key] = [acc[key]].concat(value)
          } else {
            acc[key] = value
          }
          return acc
        }, {})

        It returns:

          {
            age: "41"
            arr: ["0", "1"]
            city: "London"
            field: "frontend"
            name: "paulo"
          }

Some complex manipulation might get too tricky, so there is a lib to help us on that.

https://www.npmjs.com/package/query-string


class #022 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Route Props: location (state)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/10

  {
    pathname: "/about",
    search: "?data=my-data",
    hash: "",
    state: undefined
  }

So far, all our pages show state undefined.

Reminder: location's object is created based on the current route.

The property 'to=' can handle all location properties:

    pathname
    search
    hash
    state

      <li><Link to={{
        pathname: '/',
        hash: '#site-info',
        state: { id: 'home' },
        search: '?name=daciuk'
      }} exact>Home</Link></li>


All of them could also be passed via URL, except the state!

http://localhost:3000/?name=paulo&age=41&city=London&field=frontend&arr=0&arr=1#site-info

Browser keeps the 'state' in it's memory. Since the URl itself doesn't bring states, it work only when user clicks the Link or NavLink

class #023 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Route Props: history.length
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/11


      const Home = ({ match, location, history }) => (
        <div>
          {console.log('HOME location:', location)}
          {console.log('HOME history:', history)}
          <h1>Home</h1>
        </div>
      )

  prop location X history.location

  They are the same thing. But history is mutable, it gets updates evey new navigation. But reference is the same. If you have to check a route change, check by prop location. That way you make sure you are checking the most updated data.

  history.length:

    how many pages you have in your navigation history. but it doesn't count repeated pages, counts for each new page on the navigation.


class #024 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Route Props: history.push
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/12


Pushes new data to history. Just like <Link> or <NavLink> do.

    const Link = (props) => (
      <Route path={props.to} exact={props.exact}>
        {({ match, history }) => (
          <a href={props.to} onClick={(e) => {
              e.preventDefault()
              history.push(props.to)
            }}
          >{props.children}</a>
        )}
      </Route>
    )

also:

  <li><Link to={{ pathname: '/', state: { link: 'home' } }} exact>Home</Link></li>

also second optional argument: state

  history.push(props.to, { link: 'Link' })

Most used when a navigation must get done but for some reason we can't use Link or NavLink.

class #025 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Route Props: history.replace
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/13


Despite pushing extra data to history, it replaces the current page with the data you are passing.

It's very useful when we want to make sure the user won't navigate back, the navigation by our components will be working without include extra pages in the history, but always overriding the same previous page, the existent history.


class #026 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Route Props: history.action
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/14

Actions: it's the action of what is happening in the navidation

  "POP" (First page load or nav by browser's button 'back' and 'forward')
  "PUSH" (Adds a new data in the history)
  "REPLACE" (Replaces the current route in history)

So we can know how user is doing the navigation.

class #027 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Route Props: history.goBack()
Route Props: history.goForward()
Route Props: history.go()
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/15


OBS:
  - It considers the order in the history.
  - The action is "POP"

          <ul>
            <li>
              <Route>
                {({ history }) => (
                  <button onClick={(e) => history.goBack()}>{'<-'} Voltar</button>
                )}
              </Route>
            </li>

            <li>
              <Route>
                {({ history }) => (
                  <button onClick={(e) => history.goForward()}>Próxima página {'->'}</button>
                )}
              </Route>
            </li>

          </ul>

history.go()

history.go(-1), same as history.goBack()
history.go(1), same as history.goForward()

But it could be:
history.go(-2), same as history.goBack() * 2

And so on.

class #028 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
<Redirect />
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/16

import { Redirect } from 'react-router-dom'

OBS:
  - The action is "REPLACE"

When is useful?

  1 - We need to create a restrict area in the application (user logged);

  <li><Link to='/voltar-para-home'>Voltar para home</Link></li>
  
  <Route path='/voltar-para-home' render={() => <Redirect to='/' />} />

  Force in history:
  
    push={true} (or just push)

    It uses action PUSH, not REPLACE. That means it will include in history.

    <Redirect true to='/' />

    Obs: But not so often you may want to use push here.


When is useful?

  2 - Using inside directly in <Switch>. Good when we change URLs in our application.

      <Switch>
        <Route path='/' exact component={Home} />
        <Redirect from='/voltar-para-home' to='/' />
        <Route path='/(about|contact)/(1|2)?' component={Page} />
        <Route path='/blog' component={Blog} />
        <Route component={Error404} />
      </Switch>


class #029 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Component <Prompt />
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/17

It blocks user's navigation, the PopUp window with a prompt (like in javascript).

<Route path='/cadastro' component={Register} />

const Register = () => (
  <Prompt when={true} message='Navegação bloqueada!' />
)

More used while user are filling a form and try to navigate out of the form without finish the form, asking if user really want to cancel the process.

if when={false}, user can keep his/her action without get blocked.

class #030 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Higher Order Component (HOC): withRouter()
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/18

import { withRouter } from 'react-router-dom'

Does more or less what Route does without a component, it passes the props history, location, and match.

Given this code:

    const ButtonBack = ({ history }) => (
      <button onClick={(e) => history.goBack()}>{'<-'} Voltar</button>
    )

    const ButtonForward = ({ history }) => (
      <button onClick={(e) => history.goForward()}>Próxima página {'->'}</button>
    )

    <li><Route component={ButtonBack} /></li>
    <li><Route component={ButtonForward} /></li>

It could be that way:

    const ButtonBack_ = ({ history }) => (
      <button onClick={(e) => history.goBack()}>{'<-'} Voltar</button>
    )
    const ButtonBack = withRouter(ButtonBack_)

    const ButtonForward_ = ({ history }) => (
      <button onClick={(e) => history.goForward()}>Próxima página {'->'}</button>
    )
    const ButtonForward = withRouter(ButtonForward_)

    <li><ButtonBack /></li>
    <li><ButtonForward /></li>

Usually those comps will be in diferent files, being exported like:

    const ButtonForward = ({ history }) => (
      <button onClick={(e) => history.goForward()}>Próxima página {'->'}</button>
    )

    export default withRouter(ButtonForward)

and in case you want to also use the pure component:

    export const ButtonForward = ({ history }) => (
      <button onClick={(e) => history.goForward()}>Próxima página {'->'}</button>
    )

    export default withRouter(ButtonForward)

also another option if you get the not pure component, this way bellow you can use it witout the withRoute, like being actually pure:

    ButtonForward.WrappedComponent

Resume:
Use it when we have to pass react-router-dom props to a comp that actually is not using Router - not rendered by Route - and when you have to inject it, use withRouter.


class #031 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Provider: <HashRouter />
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/19

It replaces the BrowserRouter. And includes a HASH in the URL.

import { HashRouter } from 'react-router-dom'

const App = () => (
  <HashRouter>
    <div>
      <ul>
        <li><ButtonBack /></li>
        <li><ButtonForward /></li>
      </ul>

      <ul>
      </ul>

      <Switch>
      </Switch>

    </div>
  </HashRouter>
)

Nowadays this is not so useful because most browsers now have support to history API, so now it's better to use BrowserRouter.

Back to the previous issue with Static Servers, where navigating throw the pages and the server does'nt redirect the routes to index.html:

When you try to reload the page, browser will try to find that specific static route in the server, and if it doesn't exist we get a 404 page. So we need a server that redirects all route calls to the index.html, then it loads our javascript, which loeads browser router, then we load all components we need.

At one time, you may have a client that have to use a specific server that, unfortunately, doesn't allow us to redirect everything to the index.html. That's when we use HashRouter. But it has some things to be aware:

Hashes used as scroll anchors - not extra pages - will also push data to history object. You may don't want this.

So use BrowserRouter. If server has this redirect issue, then use HashRouter. But mostly you won't need to use it. React Router has also other providers available.

http://localhost:3000/#/blog


class #032 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Solving problem - router not rendering
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/20

URL changes, but component doesn't render.

in case we have:

src/app.js:
                const App = () => (
                  <BrowserRouter>
                    <MainApp />
                  </BrowserRouter>
                )

src/main-app.js:
                class MainApp extends PureComponent {
                  render () {
                    return (
                      <div>
                              ...blablabla
                      </div>
                    )
                  }
                }


It won't render the comps!

    { PureComponent } only renders again when props passed to it have any new changes or new states values. So this PureComponent won't render by default.

How to fix it?

    1. Use { Component }

                class MainApp extends Component {
                  render () {
                    return (
                      <div>
                              ...blablabla
                      </div>
                    )
                  }
                }

      We know Component renders again any time and that's the reason why we avoid it. We should use { Component } only when we have our own shouldComponentUpdate() implementation. Whitout it, we prefer to use PureComponent. So this might be a issue, it's a side effect/ colateral. So actually this #1 is not a solution.

      How to fix it keeping the { PureComponent } ?

      - Force any prop change

        Pick props that will change when a Route changes.

      2. Pass it inside Route

        { Route } always pass history, location, match; 

        Prop location always change when Route changes.

        So...

        src/app.js:
                const App = () => (
                  <BrowserRouter>
                    <Route component={MainApp} />
                  </BrowserRouter>
                )

        That way we are passing history, location and match to <MainApp/>


        3. Another way: { WithRouter }

        src/main-app.js:
                class MainApp extends PureComponent {
                  render () {
                    return (
                      <div>
                              ...blablabla
                      </div>
                    )
                  }
                }

                export default withRouter(MainApp)

        4. If inside a Route, pass prop location to the child pure component:

        src/app.js:

                const App = () => (
                  <BrowserRouter>
                    <Route render={({ history, location, match }) => (
                      <MainApp location={location} />
                    )} />
                  </BrowserRouter>
                )


        Conclusion:
        We may face those issues when we start to break our application in isolated components, so keep that in mind to remember how to fix it.


class #033 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
App: Pizza Store
CRUD: Create, Read, Update, Delete

Material Design
https://material-ui.com/

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/000-layout

class #034 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/001/sistema-pedidos

CRA: Create React App

Terminal install CRA:

    yarn global add create-react-app

  or

    npm i -g create-react-app


Start a project:

  create-react-app <project name>



- Should we use our boilerplate or CRA?

CRA now is safe and already comes with many good features, it's specially good for build production versions.

Are we quitting the boilerplate forever? No!
Later, Daciuk will release a new module talking about webpack updates.

Just for the records, at the time professor recorder the class, his project was started with React 16.6.3. At the time I reached these same classes, my React version were 16.13.1.

one small change at package.json:

      "scripts": {
        "start": "react-scripts start"
      }

      replaced by:

      "scripts": {
        "dev": "react-scripts start"
      }

How to avoid React to auto open a browser's tab?

      Terminal:

        touch .env

        Include:
        
          BROWSER=null


class #035 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
File .env - Environment variables

Use it to set or edit env variables

File is read at the start of the project.

It's used by:

    "react-scripts": "3.4.1"

Use those variables for data specific of the environment.

Examples:

  NODE_ENV

Terminal:

  echo $NODE_ENV
  // development

In a production environment, we would set it to 'production'. Here, if we check, it says 'deveolpment'. Actually didn't happen with me, it returned nothing.

Front-end code doesn't have access to env variables.

class #036 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
React v16 - New Features

Fragment

Is the virtual DOM element that wraps everything inside a component

import { Fragment } from 'react'

      <Fragment>

      </Fragment>

In the rendered page, the DOM actually doesn't create this extra 'div'.

Iterating a list:

      <Fragment>
        {[1, 2, 3].map((item) => {
          <div key={item}>
            <span>Name: {item.name}</span>
            <span>Number: {item.number}</span>
          </div>
        })}
      </Fragment>

The same rule. We can replace this div with Fragment:

      <Fragment>
        {[1, 2, 3].map((item) => {
          <Fragment key={item}>
            <span>Name: {item.name}</span>
            <span>Number: {item.number}</span>
          </Fragment>
        })}
      </Fragment>

New sintax: <> </>

        <>
          {[1, 2, 3].map((item) => {
            < key={item}>
              <span>Name: {item.name}</span>
              <span>Number: {item.number}</span>
            </>
          })}
        </>

Without the CRA, using manually Babel, some adjustments must be done to have this new feature.

https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html


class #037 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

New Features: Lazy Method & Suspense Component
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/001/sistema-pedidos

Used for dynamic import

1 - CRA also has it's own chunks.
2 - import()

-> Every time we use function import() with webpack, it separates this in different chunks. Dynamic loading.

So despite static import:

      import Img from './img'
      import P from './p'
      import A from './a'

... we do it dynamicaly:

      const Img = import('./img')
      const P = import('./p')
      const A = import('./a')

Then:

Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.

Why?

Because function import() returns a promisse, and react can't render a promisse.

That's when React.lazy comes:

    const Img = React.lazy(() => import('./img'))
    const P = React.lazy(() => import('./p'))
    const A = React.lazy(() => import('./a'))

So with 'Lazy' it will wait each promisse before move on.

Still with the error, but another message:

    Error: A React component suspended while rendering, but no fallback UI was specified.

    Add a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.

PS: Lazy works only with Suspense

src/app.js:

        import React, { Component, Suspense } from 'react';
        import './App.css';

        const Img = React.lazy(() => import('./img'))
        const P = React.lazy(() => import('./p'))
        const A = React.lazy(() => import('./a'))

        class App extends Component {
          render() {
            return (
              <Suspense fallback={<h1>Loading...</h1>}>
                <div className="App">
                  <header className="App-header">
                    <Img />
                    <P />
                    <A />
                  </header>
                </div>
              </Suspense>
            )
          }
        }

        export default App;

And now, with everything working, check the chunks loaded on the Network dev tools: every single import() has it's own chunk! We got the control of it!

Now supposed one of them takes longer to load, such as an image.

It show us all things only when all of them are already loaded. Can we change that and make it to show each part already loaded?

We just have to use Suspense once more to wrap again the one who takes longer

    return (
      <Suspense fallback={<h1>Loading...</h1>}>
        <div className="App">
          <header className="App-header">
            <Suspense fallback={<h1>Loading Image...</h1>}>
              <Img />
            </Suspense>
            <P />
            <A />
          </header>
        </div>
      </Suspense>
    )

We actually don't have to wrap the entire component with <Suspense>. We must wrap just the ones which the import is dynamic. In this case, just these ones:

        const P = React.lazy(() => import('./p'))
        const A = React.lazy(() => import('./a'))
        const Img = React.lazy(() => {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              resolve(import('./img'))
            }, 10000) // emulating long load
          })
        })

This way:

    return (
      <div className="App">
        <header className="App-header">
          <Suspense fallback={<h1>Loading...</h1>}>
            <Suspense fallback={<h1>Loading Image...</h1>}>
              <Img />
            </Suspense>
            <P />
            <A />
          </Suspense>
        </header>
      </div>
    )

By doing this, all the other things, including the style, will get laoded much earlier.

React's team still working on <Suspense> (by the time of this class).


class #038 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Error Boundaries - 1

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/002/sistema-pedidos

Errors may break the entire application, we should know how to prevent this. We should have a kind of 'try / catch' to avoid the complete break of the application. To achieve that, we gonna use a static method:

getDerivedStateFromError:

  static getDerivedStateFromError () {
    return { hasError: true }
  }

  this is a built-in method that react triggers by default if any error occurr.

  https://reactjs.org/docs/error-boundaries.html

<ErrorBoundaries> protect the part of the application that didn't break. 

This component have to be above everything, wrapping everything.

src/error.js:

      import { PureComponent } from 'react'

      class ErrorBoundary extends PureComponent {
        state = { hasError: false }

        static getDerivedStateFromError () {
          return { hasError: true }
        }

        render () {
          return this.props.children(this.state.hasError)
        }
      }

      export default ErrorBoundary


src/index.js:

      import ErrorBoundary from './error'

      ReactDOM.render(
        <ErrorBoundary>
          {(hasError) => (
            <App hasError={hasError} />
          )}
        </ErrorBoundary>,
        document.getElementById('root')
      );

src/app.js:

      import React, { Component } from 'react';
      import logo from './logo.svg';
      import './App.css';

      class App extends Component {
        state = {
          products: []
        }

        handleClick = (e) => {
          e.preventDefault()

          const result = {}
          this.setState({
            products: result
          })
        }

        render() {
          const { hasError } = this.props

          return (
            <div className="App">
              <header className="App-header">
                {hasError && <h1>Deu problema :(</h1>}
                <img src={logo} className="App-logo" alt="logo" />
                <p>
                  Edit <code>src/App.js</code> and save to reload.
                </p>
                <a
                  className="App-link"
                  href="https://reactjs.org"
                  target="_blank"
                  rel="noopener noreferrer"
                  onClick={this.handleClick}
                >
                  Buscar produtos
                </a>

                {this.state.products.map((product) => (
                  <div key={product}>{product}</div>
                ))}
              </header>
            </div>
          );
        }
      }

      export default App;



      By passing the state to the children:

            return this.props.children(this.state.hasError)

      We are allowing the rest of the app to show different contents in case hasError is true or false.

      If everything well set, you will keep seeing the error in the dev environment, but in prod it won't show it.

class #039 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Error Boundaries - 2
Error Log messages

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/003/sistema-pedidos

method getDerivedStateFromError have to be PURE, nothing else inside it:

    static getDerivedStateFromError () {
      return { hasError: true }
    }

supposed you use logentries service (you can save error logs there).

how to send this message?

      componentDidCatch (error, info) {
        console.log('error:', error)
        console.log('info:', info.componentStack)
      }

      (use componentDidCatch after getDerivedStateFromError)


Then you get:

console.log('error:', error):

error: TypeError: this.state.products.map is not a function
    at App.render (App.js:30)
    at finishClassComponent (react-dom.development.js:17160)
    at updateClassComponent (react-dom.development.js:17110)
    at beginWork (react-dom.development.js:18620)
    at HTMLUnknownElement.callCallback (react-dom.development.js:188)
    at Object.invokeGuardedCallbackDev (react-dom.development.js:237)
    at invokeGuardedCallback (react-dom.development.js:292)
    at beginWork$1 (react-dom.development.js:23203)
    at performUnitOfWork (react-dom.development.js:22154)
    at workLoopSync (react-dom.development.js:22130)
    at performSyncWorkOnRoot (react-dom.development.js:21756)
    at react-dom.development.js:11089
    at unstable_runWithPriority (scheduler.development.js:653)
    at runWithPriority$1 (react-dom.development.js:11039)
    at flushSyncCallbackQueueImpl (react-dom.development.js:11084)
    at flushSyncCallbackQueue (react-dom.development.js:11072)
    at discreteUpdates$1 (react-dom.development.js:21893)
    at discreteUpdates (react-dom.development.js:806)
    at dispatchDiscreteEvent (react-dom.development.js:4168)



  console.log('info:', info.componentStack):

  info: 
      in App (at src/index.js:12)
      in ErrorBoundary (at src/index.js:10)


So with those error data and the componentDidCatch, you can send it to anywhere you want to store this log errors.

It's also ok to show a more detailed error to the user, it's a option:

  static getDerivedStateFromError () {
    console.log('error getDerivedStateFromError:', error.message)
    return { hasError: true }
  }

But the info.componentStack you will have to catch in the componentDidCatch.

Other optional data:

      error.name


class #040 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Exact Dependencies
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/004/sistema-pedidos

package.json:

"dependencies": {
    "@testing-library/jest-dom": "^4.2.4",
    "@testing-library/react": "^9.3.2",
    "@testing-library/user-event": "^7.1.2",
    "react": "^16.13.1",
    "react-dom": "^16.13.1",
    "react-scripts": "3.4.1"
  }

A dependenci with ^ before it's number's version means updates will get accept any time they get released. This is a risk!

semantic versioning: how to understand numbers in versions

major-version(contain breaking changes) . minor-version(add features) . patch(fix bugs)

So we want to remove this ^

  "dependencies": {
    "@testing-library/jest-dom": "4.2.4",
    "@testing-library/react": "9.3.2",
    "@testing-library/user-event": "7.1.2",
    "react": "16.13.1",
    "react-dom": "16.13.1",
    "react-scripts": "3.4.1"
  },

And while installing, installing the exact versions we want (listed in the package.json). Example:

      npm install --save-exact react react-dom

      or

      yarn add --exact react react-dom react-scripts


class #041 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Cleaning up CRA to start the Reactzzeria

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/005/sistema-pedidos

App.js renamed to app.js (no capital)

    That's Unix standard for files and folders

src:

  app.js
  error.js
  index.js
  serviceWorker.js
  setupTest.js (??????)

src/index.js

      import React from 'react';
      import ReactDOM from 'react-dom';
      import App from './app';
      import * as serviceWorker from './serviceWorker';

      import ErrorBoundary from './error'

      ReactDOM.render(
        <ErrorBoundary>
          {(hasError) => (
            <App hasError={hasError} />
          )}
        </ErrorBoundary>,
        document.getElementById('root')
      )

      serviceWorker.unregister()


src/app.js:

      import React from 'react';

      const App = () => (
        <h1>App</h1>
      )

      export default App;


class #042 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Basic Settings:
1) .editorconfig
2) linter
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/006/sistema-pedidos


1) .editorconfig

https://editorconfig.org/

.editorconfig:

      root = true

      [*]
      charset = utf-8
      end_of_line = lf
      insert_final_newline = true
      indent_style = space
      indent_size = 2
      trim_trailing_whitespace = true

      [*.md]
      trim_trailing_whitespace = false

Install extension on VS Code in order to use .editorconfig.


2) Linter:

https://github.com/standard/eslint-config-standard-react

https://eslint.org/

CRA already uses it behind the scenes, but we are about to extend it.

Terminal install:

yarn add --dev --exact babel-eslint eslint-config-standard eslint-config-standard-react eslint-plugin-standard eslint-plugin-promise eslint-plugin-import eslint-plugin-node eslint-plugin-react

now isnted of creating a file .eslintrc, because that we are actually using CRA we will just edit package.json.

package.json:

insted of:

  "eslintConfig": {
    "extends": "react-app"
  }

Replace it for:

  "eslintConfig": {
    "extends": [
      "react-app",
      "standard",
      "standard-react"
    ]
  }

class #043 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Extending settings without eject
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/007/sistema-pedidos

ReScripts
https://github.com/harrysolovay/rescripts

Allow you to change some CRA settings.

Terminal install:
yarn add --dev --exact @rescripts/cli

yarn add --dev --exact @rescripts/rescript-env

package.json:

    "scripts": {
      "dev": "rescripts start",
      "build": "rescripts build",
      "test": "rescripts test",
      "eject": "rescripts eject"
    },

Then remove the last one, eject.

Now add this: it extends the config from eslint

    "rescripts": [
      "env"
    ],  

class #044 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Fixing Lint errors
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/008/sistema-pedidos

How to fix many style 'errors' at once?


Standard

Terminal:
yarn add --dev --exact standard

package.json:

  "scripts": {
    "lint:fix": "standard --fix"
  }

Lib to show errors in a better way:

yarn add --dev --exact snazzy

Then again package.json:

  "scripts": {
    "lint:fix": "standard --fix | snazzy"
  }


Then Daciuk saw his linter annoyed with this sintax in our error.js:

  state = { hasError: false }

By the time of the class, this sintax was not included in the language specification, so standard didn't recognize it. It was in the stage 3.

Nowadays it's probably already on the stage 4, since my linter didn't see any problem at all. However, let's check the change Daciuk did to the script lint:fix. He included: --parser babel-eslint

  "scripts": {
    "lint:fix": "standard --fix --parser babel-eslint | snazzy"
  }

Babel-eslint comes with CRA, working behind the scenes. This parser command tarnslate the command to an older sintax. Well, just in case I applied it as well. Everything working fine.

One more thing:

  "standard": {
    "parser": "babel-eslint",
    "globals": [
      "fetch"
    ]
  },


class #045 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
App's archtecture
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/009/sistema-pedidos


Installing other dependencies:

    yarn add --exact react-router-dom react-dom react-scripts


Ok. So Daciuk complains that we are working with too many index.js files, which might be annoying to control in the editor. How does he fix it? In each component's folder, we create extra files with the name of the component plus .js: main.js or login.js

And one will import stuff from the other. By the end, index.js in those folders will be there but we will never edit it again, we will be editing the named ones.

main/main.js:

      import React from 'react'

      const Main = () => (
        <h1>Main</h1>
      )

      export default Main

main/index.js:

      import Main from './main'
      export default Main

Also, despite finishing with that code just above, those index.js files actually will be just this line:

      export { default as MainPage }  from './main'

Finally, the import of those components must be named, (wraped by { }) :

      import { MainPage } from './pages/main'
      import { Login } from './pages/login'


class #046 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Inside Routes at MainPage
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/010/sistema-pedidos

--> Does the order matter? YES.

main.js:
        const routes = [
          { path: '/rota1', content: 'Rota 1' },
          { path: '/rota2', content: 'Rota 2' }
        ]

        const Main = () => (
          <>
            <h1>Main</h1>

            <Switch>
              {routes.map(route => (
                <Route
                  key={route.path}
                  path={route.path}
                  render={() => <h2>{route.content}</h2>}
                />
              ))}
            </Switch>
          </>
        )

app.js:
        const App = () => (
          <BrowserRouter>
            <Switch>
              <Route path='/' component={MainPage} />
              <Route path='/login' component={Login} />
            </Switch>
          </BrowserRouter>
        )

URL: http://localhost:3000/login

With no exact in path '/', URL above never render the path '/login'. Because it first matches the presence of '/' and Switch wants just to find one. Before a match with '/login', the URL would match the '/' itself and stop there.

Since MainPage has sub routes, we can't have 'exact'. 

  http://localhost:3000/rota1
  http://localhost:3000/rota2

Those URL above won't open if 'exact' is passed in path='/' .

  <Route path='/' component={MainPage} exact />

So having '/login' before '/' and removing the exact from route MainPage, we can access everything:

    <Switch>
      <Route path='/login' component={Login} />
      <Route path='/' component={MainPage} />
    </Switch>


class #047 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CRA with alias
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/011/sistema-pedidos

import files with relative paths:

    ... from './pages/main'
    ... from './pages/login'

On Module 2, we were skipping the './':

    ... from 'pages/main'
    ... from 'pages/login'

If we try it here now, we get: "Failed to compile"

How to have it again now with our CRA?

Edit:         .env

Add:          NODE_PATH=src/

      
      NODE_PATH=src/
      It means: each import not resolved in node_modules, webpack will search it at src folder.

NOT WORKING:
"Setting NODE_PATH to resolve modules absolutely has been deprecated in favor of setting baseUrl in jsconfig.json (or tsconfig.json if you are using TypeScript) and will be removed in a future major release of create-react-app."

https://github.com/da2k/curso-reactjs-ninja/issues/497


How to fix it:

Create the jsconfig.json file in the application root folder, then:

{
  "compilerOptions": {
    "baseUrl": "src"
  },

  "include": ["src"]
}


class #048 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
UI dependencies
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/012/sistema-pedidos


https://material-ui.com/getting-started/installation/

Terminal:
yarn add --exact @material-ui/core

public/index.html:
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />


SVG Icons install:

yarn add --exact @material-ui/icons

App.js:

import { CssBaseline } from '@material-ui/core'

OBS: CssBaseline already comes with an inbuilt normalize.css

const App = () => (
  <>
    <CssBaseline />
    <BrowserRouter>
      <Switch>
        <Route path='/login' component={Login} />
        <Route path='/' component={MainPage} />
      </Switch>
    </BrowserRouter>
  </>
)

Styled Components

Terminal:
yarn add --exact styled-components


class #049 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Login Markup
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/013/sistema-pedidos

SVG import:

    import { ReactComponent } from './logo-react-zzaria.svg'
    <ReactComponent src={logo} alt='Logo' />

  But how to import more than one?

    import { ReactComponent as Logo } from './logo-react-zzaria.svg'
    <Logo src={logo} alt='Logo' />


login.js:

    import React from 'react'
    import { Button } from '@material-ui/core'
    import { ReactComponent as Logo } from './logo-react-zzaria.svg'

    const Login = () => (
      <>
        <Logo src={logo} alt='Logo' />
        <Button>Login with GitHub</Button>
      </>

    )

    export default Login


class #050 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Material UI: GRID
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/014/sistema-pedidos

import { Grid } from '@material-ui/core'


https://material-ui.com/components/grid/

It uses CSS’s Flexible Box module for high flexibility.
There are two types of layout: containers and items.
Item widths are set in percentages, so they’re always fluid and sized relative to their parent element.
Items have padding to create the spacing between individual items.
There are five grid breakpoints: xs, sm, md, lg, and xl.

  <>
    <Grid container>
      <Grid item>
        <Logo />
      </Grid>

      <Grid item>
        <Button>Login with GitHub</Button>
      </Grid>     
    </Grid>
  </>

  Spacing:

      <Grid container spacing={10}>

      Sets the space between items

      https://material-ui.com/components/grid/#spacing

  Another example:

  <>
    <Grid container spacing={10}>
      <Grid item xs={6} sm={3}>
        <Logo />
      </Grid>

      <Grid item xs={6} sm={3}>
        <Button>Login with GitHub</Button>
      </Grid>     
    </Grid>
  </>


class #051 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Grid Align 
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/015/sistema-pedidos

Interactive

https://material-ui.com/components/grid/#interactive

Direction => column

<Grid container direction='column'>

login.js:

        import React from 'react'
        import styled from 'styled-components'
        import { Button, Grid } from '@material-ui/core'
        import { ReactComponent as Logo } from './logo-react-zzaria.svg'

        const Login = () => (
          <Container>
            <Grid container direction='column' alignItems='center' spacing={10}>
              <Grid item>
                <Logo />
              </Grid>

              <Grid item>
                <Button>Login with GitHub</Button>
              </Grid>
            </Grid>
          </Container>
        )

        const Container = styled.div`
          padding: 5px;
        `

        export default Login


class #052 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Button
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/016/sistema-pedidos


https://material-ui.com/components/buttons/


Logo Adjusment:

    import { ReactComponent as MainLogo } from './logo-react-zzaria.svg'

    const Logo = styled(MainLogo)`
      width: 100%;
    `

In case we face issues to override any lib style, here is a huge tip:

    const GitHubButton = styled(Button)`
      && {
        text-transform: none;
      }
    `
Above, && means 2 classes.


class #053 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Attributes: 'attrs'

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/017/sistema-pedidos

Insted of:

  <GitHubButton variant='contained' fullWidth>Login with GitHub</GitHubButton>

Better:

  <GitHubButton>Login with GitHub</GitHubButton>

  const GitHubButton = styled(Button).attrs({
    variant: 'contained',
    fullWidth: true
  })`
    font-size: 20px;
    padding: 15px;
    text-transform: none;
  `

It cleans our code! The Markup gets cleaner.


class #054 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Styling button (cont.)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/018/sistema-pedidos

'Grid item' doesn't have display flex by default

'Grid item' also can work as a container, just add it: 'container'.

Once you add it, it gets the display flex. The we add justidy='ceneter', to center it.

  <Grid item xs={12} container justify='center'>


class #055 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Firebase Authentication


develop > authentication > set up sign-in method


"Authorized domains"

FireBase also has a hosting section that we can use to upload our application. Bu default, some default domains are already on the "Authorized domains" area:

      localhost
      pamplona-pizzas.firebaseapp.com
      pamplona-pizzas.web.app


"Sign-in providers"

      github

      OBS: We have to create an "app" on github

      https://firebase.google.com/docs/auth/web/github-auth?authuser=0

      https://github.com/settings/applications/new

          "Authorization callback URL"

          This is the URL user gets redirectes when login is succesful.
          It is given to you on Firebase, at the bottom of the box while enabling github auth. In this case:

          https://pamplona-pizzas.firebaseapp.com/__/auth/handler

          More documentation here:
          https://developer.github.com/v3/oauth/




class #056 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Setting Firebase on our app
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/019/sistema-pedidos


Get the firebaseConfig object in Firebase website:
https://console.firebase.google.com/project/pamplona-pizzas/overview

This data is ok to get visible by someone whi inspects our front-end code. The vulnerable data is the one in the authotication, given by github.

Instal Firebase via Yarn:

yarn add firebase --exact

edit login.js:

      import firebase from 'firebase'

      var config = {
        apiKey: 'xxxxxxx',
        authDomain: 'xxx-xxx.firebaseapp.com',
        databaseURL: 'https://xxx-xxx.firebaseio.com',
        projectId: 'xxx-xxx',
        storageBucket: 'pamplona-pizzas.appspot.com',
        messagingSenderId: 'xxxx',
        appId: 'xxx'
      }

      firebase.initializeApp(config)

By running the app again in the browser, we get this message:

        It looks like you're using the development build of the Firebase JS SDK.
        When deploying Firebase apps to production, it is advisable to only import
        the individual SDK components you intend to use.

        For the module builds, these are available in the following manner
        (replace <PACKAGE> with the name of a component - i.e. auth, database, etc):

        CommonJS Modules:
        const firebase = require('firebase/app');
        require('firebase/<PACKAGE>');

        ES Modules:
        import firebase from 'firebase/app';
        import 'firebase/<PACKAGE>';

        Typescript:
        import * as firebase from 'firebase/app';
        import 'firebase/<PACKAGE>';


To fiz that, just:

import firebase from 'firebase/app'



class #057 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
User's Login
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/020/sistema-pedidos


https://firebase.google.com/docs/auth/web/github-auth?authuser=0

Specify additional OAuth 2.0 scopes that you want to request from the authentication provider. To add a scope, call addScope. For example:

https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/

To sign in by redirecting to the sign-in page, call signInWithRedirect:

      firebase.auth().signInWithRedirect(provider);

Then, you can also retrieve the GitHub provider's OAuth token by calling getRedirectResult when your page loads:

      firebase.auth().getRedirectResult().then(function(result) {
        if (result.credential) {
          // This gives you a GitHub Access Token. You can use it to access the GitHub API.
          var token = result.credential.accessToken;
          // ...
        }
        // The signed-in user info.
        var user = result.user;
      }).catch(function(error) {
        // Handle Errors here.
        var errorCode = error.code;
        var errorMessage = error.message;
        // The email of the user's account used.
        var email = error.email;
        // The firebase.auth.AuthCredential type that was used.
        var credential = error.credential;
        // ...
      });

https://firebase.google.com/docs/reference/js/firebase.auth.Auth?authuser=0#getRedirectResult

login.js:

    import firebase from 'firebase/app'
    import 'firebase/auth'

    <GitHubButton onClick={() => {
      const provider = new firebase.auth.GithubAuthProvider()
      firebase.auth().signInWithRedirect(provider)
    }}
    >Login with GitHub
    </GitHubButton>

class #058 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Persist Data + User's data
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/021/sistema-pedidos

Authentication State Persistence
https://firebase.google.com/docs/auth/web/auth-state-persistence?authuser=0

1 - local: persists in the browser until user log out.
2 - session: persist just in the current tab and until it's closed.
3 - none: no persistence, looses it if you refresh the page.

local persistence is the default.

Getting user's data.

Data comes when component is loaded. How to know that?

-> componentDidMount()

ps: it means we need a { PureComponent } and a class.

        componentDidMount () {
          firebase.auth().onAuthStateChanged((user) => {
            if (user) {
              console.log('user is logged in:', user)
            } else {
              console.log('user is NOT logged in:', user)
            }
          })
        }


class #059 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Log out
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/022/sistema-pedidos

login.js:

import React, { PureComponent } from 'react'
import styled from 'styled-components'
import firebase from 'firebase/app'
import 'firebase/auth'
import { Button, Grid } from '@material-ui/core'
import { ReactComponent as MainLogo } from './logo-react-zzaria.svg'

var config = {
  apiKey: 'xxxxxxx',
  authDomain: 'xxx-xxx.firebaseapp.com',
  databaseURL: 'https://xxx-xxx.firebaseio.com',
  projectId: 'xxx-xxx',
  storageBucket: 'pamplona-pizzas.appspot.com',
  messagingSenderId: 'xxxx',
  appId: 'xxx'
}
// Initialize Firebase
firebase.initializeApp(config)

class Login extends PureComponent {
  state = {
    isUserLoggedIn: false,
    user: null
  }

  componentDidMount () {
    firebase.auth().onAuthStateChanged((user) => {
      console.log('user data:', user)
      this.setState({
        isUserLoggedIn: !!user,
        user
      })
    })
  }

  handleLogin () {
    const provider = new firebase.auth.GithubAuthProvider()
    firebase.auth().signInWithRedirect(provider)
  }

  handleLogout = () => {
    firebase.auth().signOut().then(() => {
      console.log('logged out!')
      this.setState({
        isUserLoggedIn: false,
        user: null
      })
    })
  }

  render () {
    const { isUserLoggedIn, user } = this.state

    return (
      <Container>
        <Grid container justify='center' spacing={10}>
          <Grid item>
            <Logo />
          </Grid>

          <Grid item xs={12} container justify='center'>
            {isUserLoggedIn && (
              <>
                <pre>{user.displayName}</pre>
                <Button variant='contained' onClick={this.handleLogout}>Sair</Button>
              </>
            )}
            {!isUserLoggedIn && (
              <GitHubButton onClick={this.handleLogin}>Login with GitHub</GitHubButton>
            )}
          </Grid>
        </Grid>
      </Container>
    )
  }
}

const Container = styled.div`
  padding: 5px;
`

const Logo = styled(MainLogo)`
  width: 100%;
`

const GitHubButton = styled(Button).attrs({
  variant: 'contained',
  fullWidth: true
})`
  font-size: 25px;
  max-width: 480px;
  padding: 15px;
  text-transform: none;
`

export default Login


class #060 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Hooks

New feature of React
Using state in function components, not only in classes anymore.

Created to make us avoid using of classes.

But there are no breaking changes. Everything still valid and working. It's just a new option.

It's possible to have both features in the same applications: classes with componentDidMount etc. And also have function components.

There is no expectation that classes will get removed from React.

We can't use HOOKS inside classes.



class #061 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Hooks - useState

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/05-hooks/01

Classes:

  - has an initial state = {}
  - setState({}) method used to update it

Functions:

  - has an initial useState('my state\'s value')

    const [counter, setCounter] = useState(0)

OBS: Funtion's return still have to remain pure.

import React, { useState } from 'react'

const App = () => (
  <div style={{ display: 'flex', justifyContent: 'space-around' }}>
    <CounterClass />
    <CounterFunction />
  </div>
)

class CounterClass extends React.PureComponent {
  state = {
    counter: 0
  }

  render () {
    return (
      <Counter
        counter={this.state.counter}
        increment={() => {
          this.setState({
            counter: this.state.counter + 1
          })
        }}

        decrement={() => {
          this.setState({
            counter: this.state.counter - 1
          })
        }}
      />
    )
  }
}

function CounterFunction () {
  const [counter, setCounter] = useState(0)

  return (
    <Counter
      counter={counter}
      increment={() => {
        setCounter(counter + 1)
      }}

      decrement={() => {
        setCounter(counter - 1)
      }}
    />
  )
}

const Counter = ({ counter, increment, decrement }) => (
  <div style={{ textAlign: 'center' }}>
    <h1>{counter}</h1>
    <button onClick={decrement}>-</button>
    <button onClick={increment}>+</button>
  </div>
)

export default App




class #062 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
prevState
Hooks - update based on previous state

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/05-hooks/02



if using an async action, we can't be sure that state's value is actually updated.

so create a function that returns the object, which get's the prevState.

      <Counter
        counter={this.state.counter}
        increment={() => {
          this.setState((prevState) => ({
            counter: prevState.counter + 1
          }))
        }}
      />



function CounterFunction () {
  const [counter, setCounter] = useState(0)

  return (
    <Counter
      counter={counter}
      increment={() => {
        setCounter(c => c + 1)
      }}

      decrement={() => {
        setCounter(c => c - 1)
      }}
    />
  )
}

OBS:

The same way in a Class we can't pass this.setState out of the render(), in a function we can't pass 'setCounter()' out of return(), it would create an infinite loop, since the setCounter() triggers the render again.


class #063 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Hooks: complex states
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/05-hooks/03



Insted of:

    Class

      state = {
        counter: 0,
        toggle: false
      }

Hooks:

  const [counter, setCounter] = useState(0)
  const [toggle, setToggle] = useState(false)




class #064 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Hooks:
arrays & Objects at useState()
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/05-hooks/04



function CounterFunction () {

  const [state, setState] = useState({
    counter: 0,
    toggle: false
  })

  return (
    <>
      <Counter
        counter={state.counter}
        increment={() => {
          setState(prevState => {
            return {
              ...prevState,
              counter: prevState.counter + 1
            }
          })
        }}

        decrement={() => {
          setState(prevState => {
            return {
              ...prevState,
              counter: prevState.counter - 1
            }
          })
        }}
      />

      {state.toggle && <h1>Visible!</h1>}
      <button onClick={() => {
        setState(prevState => {
          return {
            ...prevState,
            toggle: !prevState.toggle
          }
        })
      }}>Toggle</button>
    </>
  )
}


const [todos, setTodos] = useState([
  { id: 0, text: 'hey', completed: false }
])

https://medium.com/javascript-in-plain-english/how-to-add-to-an-array-in-react-state-3d08ddb2e1dc

setSearches(searches => searches.concat(query))
setSearches([...searches, query])


class #065 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Hooks: useEffect
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/05-hooks/05

Supposed, each change in the application we want to change page title in the browser.

If a Class:

  componentDidMount () {
    document.title = `Counter: ${this.state.counter}`
  }

  componentDidUpdate () {
    document.title = `Counter: ${this.state.counter}`
  }

If a function:

  useEffect(() => {
    document.title = `CounterFunction: ${counter}`
  })

useEffect runs either in the load or in the update. So we just need that.



class #066 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Hooks: useEffect conditional update
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/05-hooks/06



  useEffect(() => {
    console.log('useEffect')
    document.title = `CounterFunction: ${counter}`
  }, [counter])

if 'counter' has change in it's value, then this useEffect get's trigged.


In a Class, to prevent the update and achieve the same behavior, would be like:

  componentDidUpdate (prevProps, prevState) {
    if (prevState.counter !== this.state.counter) {
      console.log('componentDidUpdate')
      this.updateDocumentTitle ()
    }
  }





class #067 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Hooks: useEffect just once!
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/05-hooks/07

pass the array empity:



ONCE:

  useEffect(() => {
    console.log('useEffect')
    document.title = `CounterFunction: ${counter}`
  }, [])


ALWAYS:

  useEffect(() => {
    console.log('useEffect')
    document.title = `CounterFunction: ${counter}`
  })


CONDITIONAL: counter

  useEffect(() => {
    console.log('useEffect')
    document.title = `CounterFunction: ${counter}`
  }, [counter])


CURIOSITY:

  useEffect(() => {
    console.log('useEffect')
    document.title = `CounterFunction: ${counter}`

    setInterval(() => {
      this.setCounter(counter + 1)
    }, 1000)

  }, [])
  
  // Above, a closure created by useEffect - which ran just once - avoids the update of counter. 

  // To get the setInterval totally working:

    useEffect(() => {
    console.log('useEffect')
    document.title = `CounterFunction: ${counter}`

    setInterval(() => {
      this.setCounter((counter) => counter + 1)
    }, 1000)

  }, []) // But this useEffect itself still being ran just once.

In a Class, that's equivalent to this:

  componentDidUpdate (prevProps, prevState) {
    this.updateDocumentTitle ()
    setInterval(() => {
      this.setState(prevState => {
        return {
          counter: prevState.counter + 1
        }
      })
    }, 1000)   
  }


class #068 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Custom hooks
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/05-hooks/08


- Every custom hook have to start with 'use'

  Ex: useCounter

  function useCounter () {
    const [counter, setCounter] = useState(0)

    useEffect(() => {
      document.title = `CounterFunction: ${counter}`
    }, [counter])

    return [counter, setCOunter]
  }


class #069 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Hook useEffect how to do 'componentWilUnmount'
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/05-hooks/09



  useEffect(() => {
    console.log('execuetd useEffect')
    document.title = `CounterFunction: ${counter}`

    const timer = setInterval(() => {
      setCounter(c => c + 1)
    }, 1000)

    return () => {
      console.log('cleaned useEffect')
      clearInterval(timer)
    }
  }, [])

  Every time we have an event listener that we have to clean manyally, such as a timer, we can return a function inside useEffect:

          return () => {
            console.log('cleaned useEffect')
            clearInterval(timer)
          }


So in this block of code, that intern returned function won't run unless the component gets unmounted:

  useEffect(() => {
    console.log('execuetd useEffect')
    document.title = `CounterFunction: ${counter}`

    const timer = setInterval(() => {
      setCounter(c => c + 1)
    }, 1000)

    return () => {
      console.log('only when comp unmounted')
      clearInterval(timer)
    }
  }, [])

class #070 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Hooks: genreal rules

    - must always be written in the top of the function/component

    - never put inside conditional blocks or loops (if you need do the opposite)

    - never use it in Classes

    - always satart with 'use' 

https://reactjs.org/docs/hooks-intro.html

More Hooks later in this course at the next update module.

class #071 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Back to reactzzaria: repleace Classes per Hooks
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/023/sistema-pedidos

login.js:

import React, { useState, useEffect } from 'react'
import styled from 'styled-components'
import firebase from 'firebase/app'
import 'firebase/auth'
import { Button, Grid } from '@material-ui/core'
import { ReactComponent as MainLogo } from './logo-react-zzaria.svg'

const config = {
  apiKey: 'xxxxxxx',
  authDomain: 'xxx-xxx.firebaseapp.com',
  databaseURL: 'https://xxx-xxx.firebaseio.com',
  projectId: 'xxx-xxx',
  storageBucket: 'pamplona-pizzas.appspot.com',
  messagingSenderId: 'xxxx',
  appId: 'xxx'
}
// Initialize Firebase
firebase.initializeApp(config)

const handleLogin = () => {
  const provider = new firebase.auth.GithubAuthProvider()
  firebase.auth().signInWithRedirect(provider)
}

function Login () {
  const [useInfo, setUserInfo] = useState({
    isUserLoggedIn: false,
    user: null
  })

  const { isUserLoggedIn, user } = useInfo

  useEffect(() => {
    firebase.auth().onAuthStateChanged((user) => {
      console.log('user data:', user)
      setUserInfo({
        isUserLoggedIn: !!user,
        user
      })
    })
  }, [])

  const handleLogout = () => {
    firebase.auth().signOut().then(() => {
      console.log('logged out!')
      setUserInfo({
        isUserLoggedIn: false,
        user: null
      })
    })
  }

  return (
    <Container>
      <Grid container justify='center' spacing={10}>
        <Grid item>
          <Logo />
        </Grid>

        <Grid item xs={12} container justify='center'>
          {isUserLoggedIn && (
            <>
              <pre>{user.displayName}</pre>
              <Button variant='contained' onClick={handleLogout}>Sair</Button>
            </>
          )}
          {!isUserLoggedIn && (
            <GitHubButton onClick={handleLogin}>Login with GitHub</GitHubButton>
          )}
        </Grid>
      </Grid>
    </Container>
  )
}

const Container = styled.div`
  padding: 5px;
`

const Logo = styled(MainLogo)`
  width: 100%;
`

const GitHubButton = styled(Button).attrs({
  variant: 'contained',
  fullWidth: true
})`
  font-size: 25px;
  max-width: 480px;
  padding: 15px;
  text-transform: none;
`

export default Login


OBS:
Despite getting easier to have states now in the components, we won't spread them over the application, but keep our pure components pure.

class #072 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Hook useCallback
CallBacks Optimization
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/024/sistema-pedidos

login.js:

So far, Login component kept inside it the handleLogout function

  const handleLogout = () => {
    firebase.auth().signOut().then(() => {
      console.log('logged out!')
      setUserInfo({
        isUserLoggedIn: false,
        user: null
      })
    })
  }

It's still there because our component holds the userInfo state, which is necessary inside this function. If out of the component, it wouldn't reach the state.

But it's not good that our component keeps reading again the handleLogout every time that gets re-rendered. It actually needs for real just once.

the useCallback hooks helps us on that:

import { useCallback } from 'react'

    const handleLogout = useCallback(() => {
      firebase.auth().signOut().then(() => {
        console.log('logged out!')
        setUserInfo({
          isUserLoggedIn: false,
          user: null
        })
      })
    }, [])

So now, even being inside the component, this function won't be read again when components gets re-rendered. It saves it in the memory. It doesn't have to be created over and over.

Every time we need a callback function, we should do this.

It's second argument is an array with states that this function is dependent. And in this case, there is nothing. The function just needs the setUserInfo, which doesn't change, is just a function. So we pass an empity array.

React creates a closure and saves this reference out of the component Login and when it gets rerendered it reuses the same reference already saved in memory.

With this feature, we've better do the same with the other function handleLogin, it should be as close as possible to the component, so let's include it inside.

  const handleLogin = useCallback(() => {
    const provider = new firebase.auth.GithubAuthProvider()
    firebase.auth().signInWithRedirect(provider)
  }, [])


class #073 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import pages with lazy and suspense
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/025/sistema-pedidos

app.js:

static import:

  import { MainPage } from 'pages/main'
  import { Login } from 'pages/login'

It puts them together in the final bundle of the application.

We use Lazy and Suspense to separate them. User will never access them at once so doesn't make sense to load it at once. Right?

  import React, { lazy, Suspense } from 'react'

  const MainPage = lazy(() => import('pages/main'))
  const Login = lazy(() => import('pages/login'))

Warning:
lazy: Expected the result of a dynamic import() call. Instead received: [object Module]

lazy works only with 'export default', so we must fix this here bellow. Insted of:

pages/login/index.js:

      export { default as Login } from './login'

      replace by:

      export { default } from './login'

pages/main/index.js:

      export { default as MainPage } from './main'

      replace by:

      export { default } from './main'


Boom! We got our separeted bundles! :)


Styling our 'loading...' message with material-ui:

https://material-ui.com/components/progress/#progress

  import LinearProgress from '@material-ui/core/LinearProgress';

  <Suspense fallback={<LinearProgress />}>


class #074 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Firebase: settings isolation from Login component
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/026/sistema-pedidos

new folder:

    src/services

    new file:

        firebase.js

    import firebase from 'firebase/app'
    import 'firebase/auth'

    const config = {
      apiKey: 'xxxxxxx',
      authDomain: 'xxx-xxx.firebaseapp.com',
      databaseURL: 'https://xxx-xxx.firebaseio.com',
      projectId: 'xxx-xxx',
      storageBucket: 'pamplona-pizzas.appspot.com',
      messagingSenderId: 'xxxx',
      appId: 'xxx'
    }
    // Initialize Firebase
    firebase.initializeApp(config)

    export default firebase

login.js:

import firebase from 'services/firebase'


class #075 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
How to persist user's data?
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/027/sistema-pedidos

1. state -> prop

  but depending on how deep down components are, it may be an issue.


2. redux

    good but has a big boilerplate.


3. context

    The new context api from React v16 is nice. Let's check this out.

app.js:

      import { createContext } from 'react'

      export const ColorContext = createContext()

      const App = () => (
        <>
          <ColorContext.Provider value='black'>
            <CssBaseline />
            <BrowserRouter>
              <Suspense fallback={<LinearProgress />}>
                <Switch>
                  <Route path='/login' component={Login} />
                  <Route path='/' component={MainPage} />
                </Switch>
              </Suspense>
            </BrowserRouter>
          </ColorContext.Provider>
        </>
      )


useContext

  It is allowing us to get rid of the use of Consumer. At login.js, insted of:

  login.js:
  
      import { ColorContext } from 'app'

      {!isUserLoggedIn && (
        <ColorContext.Consumer>
          {({ color, setColor }) => (
            <>
              <GitHubButton onClick={handleLogin}>Login with GitHub ({color})
              </GitHubButton>
              <button onClick={() => setColor('blue')}>Blue Color</button>
            </>
          )}
        </ColorContext.Consumer>
      )}

  How about that:

      import { useContext } from 'react'

      import { ColorContext } from 'app'

      const { color, setColor } = useContext(ColorContext)

      {!isUserLoggedIn && (
        <>
          <GitHubButton onClick={handleLogin}>Login with GitHub ({color})
          </GitHubButton>
          <button onClick={() => setColor('blue')}>Blue Color</button>
        </>
      )}

      Using Context Recap:

          1. import { createContext }

          2. create an object/const that will have 2 components: Provider + Consumer

          3. Provider have to wrap the entire application

          4. Provider have 'value' property

          Consuming:

          1. imports the created context (from your 'app' file)

          2. import { useContext }

          3. passes the created context as parameter of useContext(), which returns the values passed on 'Provider' in the other file





backup:

          import React, { useState, useContext, useEffect, useCallback } from 'react'
          import styled from 'styled-components'
          import { Button, Grid } from '@material-ui/core'
          import firebase from 'services/firebase'
          import { ReactComponent as MainLogo } from './logo-react-zzaria.svg'

          import { ColorContext } from 'app'

          function Login () {
            const [useInfo, setUserInfo] = useState({
              isUserLoggedIn: false,
              user: null
            })

            const { isUserLoggedIn, user } = useInfo

            const { color, setColor } = useContext(ColorContext)

            useEffect(() => {
              firebase.auth().onAuthStateChanged((user) => {
                console.log('user data:', user)
                setUserInfo({
                  isUserLoggedIn: !!user,
                  user
                })
              })
            }, [])

            const handleLogin = useCallback(() => {
              const provider = new firebase.auth.GithubAuthProvider()
              firebase.auth().signInWithRedirect(provider)
            }, [])

            const handleLogout = useCallback(() => {
              firebase.auth().signOut().then(() => {
                console.log('logged out!')
                setUserInfo({
                  isUserLoggedIn: false,
                  user: null
                })
              })
            }, [])

            return (
              <Container>
                <Grid container justify='center' spacing={10}>
                  <Grid item>
                    <Logo />
                  </Grid>

                  <Grid item xs={12} container justify='center'>
                    {isUserLoggedIn && (
                      <>
                        <pre>{user.displayName}</pre>
                        <Button variant='contained' onClick={handleLogout}>Sair</Button>
                      </>
                    )}
                    {!isUserLoggedIn && (
                      <>
                        <GitHubButton onClick={handleLogin}>Login with GitHub ({color})
                        </GitHubButton>
                        <button onClick={() => setColor('blue')}>Blue Color</button>
                      </>
                    )}
                  </Grid>
                </Grid>
              </Container>
            )
          }

          const Container = styled.div`
            padding: 5px;
          `

          const Logo = styled(MainLogo)`
            width: 100%;
          `

          const GitHubButton = styled(Button).attrs({
            variant: 'contained',
            fullWidth: true
          })`
            font-size: 25px;
            max-width: 480px;
            padding: 15px;
            text-transform: none;
          `

          export default Login



app.js:

          import React, { createContext, lazy, useState, Suspense } from 'react'
          import { BrowserRouter, Route, Switch } from 'react-router-dom'
          import { CssBaseline, LinearProgress } from '@material-ui/core'

          const MainPage = lazy(() => import('pages/main'))
          const Login = lazy(() => import('pages/login'))

          export const ColorContext = createContext()

          function App () {
            const [color, setColor] = useState('black')

            return (
              <>
                <ColorContext.Provider value={{ color, setColor }}>
                  <CssBaseline />
                  <BrowserRouter>
                    <Suspense fallback={<LinearProgress />}>
                      <Switch>
                        <Route path='/login' component={Login} />
                        <Route path='/' component={MainPage} />
                      </Switch>
                    </Suspense>
                  </BrowserRouter>
                </ColorContext.Provider>
              </>
            )
          }

          export default App


class #076 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Passing User's data into Context
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/028/sistema-pedidos


mkdir src/contexts

        auth.js:

          import { createContext } from 'react'

          export const AuthContext = createContext()

          function Auth () {
            return (
              <AuthContext.Provider value={{}}>
                {children}
              </AuthContext.Provider>
            )
          }

          export default Auth


Then in app.js os where we will verify the authentication, but since routes must be considered, we are wrapping everything with the BroserRouter.

The App verifies if tue user is logged in or out.  So App component have to be loaded inside the BrowserRouter. If the user is not logged in, we will redirect him to the login page. To understand those routes, App have to be inside BrowserRouter, not the opposite. How to make this change?

    1. created new file: src/root.js
    2. moved all code from app.js to root.js
    3. src/index.js, changed the import app.js to import root.js
    4. root.js render the BrowserRouter and inside it has the <App />.
    5. app.js contains the Routes wrapped by the <Switch /> + <Suspense />

Check for errors, everything still running nicely.

Include the context:

    1. Then imported AuthProvider at root.js:

        import AuthProvider from 'contexts/auth'

    2. In root.js wrapp everything inside <AuthProvider/>

    3. State rules will be placed in app.js


class #077 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
User's data at Context API, then Login
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/029/sistema-pedidos

src/index.js:

              import React from 'react'
              import ReactDOM from 'react-dom'
              import Root from './root'
              import * as serviceWorker from './serviceWorker'

              import ErrorBoundary from './error'

              ReactDOM.render(
                <ErrorBoundary>
                  {(hasError) => (
                    <Root hasError={hasError} />
                  )}
                </ErrorBoundary>,
                document.getElementById('root')
              )

              serviceWorker.unregister()


src/root.js:

              import React from 'react'
              import { BrowserRouter, Route } from 'react-router-dom'
              import { CssBaseline } from '@material-ui/core'
              import AuthProvider from 'contexts/auth'
              import App from './app'

              function Root () {
                return (
                  <AuthProvider>
                    <CssBaseline />

                    <BrowserRouter>
                      <Route component={App} />
                    </BrowserRouter>
                  </AuthProvider>
                )
              }

              export default Root


src/app.js:

              import React, { lazy, Suspense } from 'react'
              import { Route, Switch } from 'react-router-dom'
              import { LinearProgress } from '@material-ui/core'

              const MainPage = lazy(() => import('pages/main'))
              const Login = lazy(() => import('pages/login'))

              function App () {
                return (
                  <>
                    <Suspense fallback={<LinearProgress />}>
                      <Switch>
                        <Route path='/login' component={Login} />
                        <Route path='/' component={MainPage} />
                      </Switch>
                    </Suspense>
                  </>
                )
              }

              export default App


src/contexts/auth.js:

              import React, { createContext, useCallback } from 'react'
              import t from 'prop-types'
              import firebase from 'services/firebase'

              export const AuthContext = createContext()

              function Auth ({ children }) {
                const handleLogin = useCallback(() => {
                  const provider = new firebase.auth.GithubAuthProvider()
                  firebase.auth().signInWithRedirect(provider)
                }, [])

                return (
                  <AuthContext.Provider value={{ handleLogin }}>
                    {children}
                  </AuthContext.Provider>
                )
              }

              Auth.propTypes = {
                children: t.node.isRequired
              }

              export default Auth



src/pages/login/login.js:

              import React, { useState, useEffect, useCallback, useContext } from 'react'
              import styled from 'styled-components'
              import { Button, Grid } from '@material-ui/core'
              import firebase from 'services/firebase'
              import { AuthContext } from 'contexts/auth'
              import { ReactComponent as MainLogo } from './logo-react-zzaria.svg'

              function Login () {
                const { handleLogin } = useContext(AuthContext)

                const [useInfo, setUserInfo] = useState({
                  isUserLoggedIn: false,
                  user: null
                })

                const { isUserLoggedIn, user } = useInfo

                useEffect(() => {
                  firebase.auth().onAuthStateChanged((user) => {
                    console.log('user data:', user)
                    setUserInfo({
                      isUserLoggedIn: !!user,
                      user
                    })
                  })
                }, [])

                const handleLogout = useCallback(() => {
                  firebase.auth().signOut().then(() => {
                    console.log('logged out!')
                    setUserInfo({
                      isUserLoggedIn: false,
                      user: null
                    })
                  })
                }, [])

                return (
                  <Container>
                    <Grid container justify='center' spacing={10}>
                      <Grid item>
                        <Logo />
                      </Grid>

                      <Grid item xs={12} container justify='center'>
                        {isUserLoggedIn && (
                          <>
                            <pre>{user.displayName}</pre>
                            <Button variant='contained' onClick={handleLogout}>Sair</Button>
                          </>
                        )}
                        {!isUserLoggedIn && (
                          <GitHubButton onClick={handleLogin}>
                            Login with GitHub
                          </GitHubButton>
                        )}
                      </Grid>
                    </Grid>
                  </Container>
                )
              }

              const Container = styled.div`
                padding: 5px;
              `

              const Logo = styled(MainLogo)`
                width: 100%;
              `

              const GitHubButton = styled(Button).attrs({
                variant: 'contained',
                fullWidth: true
              })`
                font-size: 25px;
                max-width: 480px;
                padding: 15px;
                text-transform: none;
              `

              export default Login



class #078 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/030/sistema-pedidos

app.js:
          import React, { lazy, Suspense, useContext, useEffect } from 'react'
          import { Route, Switch } from 'react-router-dom'
          import { LinearProgress } from '@material-ui/core'
          import firebase from 'services/firebase'
          import { AuthContext } from 'contexts/auth'

          const MainPage = lazy(() => import('pages/main'))
          const Login = lazy(() => import('pages/login'))

          function App () {
            const { setUserInfo } = useContext(AuthContext)

            useEffect(() => {
              firebase.auth().onAuthStateChanged((user) => {
                console.log('user data:', user)
                setUserInfo({
                  isUserLoggedIn: !!user,
                  user
                })
              })
            }, [setUserInfo])

            return (
              <>
                <Suspense fallback={<LinearProgress />}>
                  <Switch>
                    <Route path='/login' component={Login} />
                    <Route path='/' component={MainPage} />
                  </Switch>
                </Suspense>
              </>
            )
          }

          export default App






auth.js:
          import React, { createContext, useCallback, useState } from 'react'
          import t from 'prop-types'
          import firebase from 'services/firebase'

          export const AuthContext = createContext()

          function Auth ({ children }) {
            const [userInfo, setUserInfo] = useState({
              isUserLoggedIn: false,
              user: null
            })

            const handleLogin = useCallback(() => {
              const provider = new firebase.auth.GithubAuthProvider()
              firebase.auth().signInWithRedirect(provider)
            }, [])

            const handleLogout = useCallback(() => {
              firebase.auth().signOut().then(() => {
                console.log('logged out!')
                setUserInfo({
                  isUserLoggedIn: false,
                  user: null
                })
              })
            }, [])

            return (
              <AuthContext.Provider value={{ handleLogin, handleLogout, userInfo, setUserInfo }}>
                {children}
              </AuthContext.Provider>
            )
          }

          Auth.propTypes = {
            children: t.node.isRequired
          }

          export default Auth

login.js:


          import React, { useContext } from 'react'
          import styled from 'styled-components'
          import { Button, Grid } from '@material-ui/core'
          import { AuthContext } from 'contexts/auth'
          import { ReactComponent as MainLogo } from './logo-react-zzaria.svg'

          function Login () {
            const { handleLogin } = useContext(AuthContext)

            return (
              <Container>
                <Grid container justify='center' spacing={10}>
                  <Grid item>
                    <Logo />
                  </Grid>

                  <Grid item xs={12} container justify='center'>
                    <GitHubButton onClick={handleLogin}>
                      Login with GitHub
                    </GitHubButton>
                  </Grid>
                </Grid>
              </Container>
            )
          }

          const Container = styled.div`
            padding: 5px;
          `

          const Logo = styled(MainLogo)`
            width: 100%;
          `

          const GitHubButton = styled(Button).attrs({
            variant: 'contained',
            fullWidth: true
          })`
            font-size: 25px;
            max-width: 480px;
            padding: 15px;
            text-transform: none;
          `

          export default Login

class #079 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Redirect pre and post auth
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/031/sistema-pedidos


Route: history, location, match

-> location

Basic logic, simple and poor, just a kick of

app.js:

            import React, { lazy, Suspense, useContext, useEffect } from 'react'
            import t from 'prop-types'
            import { Redirect, Route, Switch } from 'react-router-dom'
            import { LinearProgress } from '@material-ui/core'
            import firebase from 'services/firebase'
            import { AuthContext } from 'contexts/auth'

            const MainPage = lazy(() => import('pages/main'))
            const Login = lazy(() => import('pages/login'))

            function App ({ location }) {
              const { userInfo, setUserInfo } = useContext(AuthContext)

              const { isUserLoggedIn } = userInfo

              useEffect(() => {
                firebase.auth().onAuthStateChanged((user) => {
                  console.log('user data:', user)
                  setUserInfo({
                    isUserLoggedIn: !!user,
                    user
                  })
                })
              }, [])

              if (isUserLoggedIn) {
                console.log('user is logged in')
                if (location.pathname === '/login') {
                  console.log('user is logged and is in login\'s page. So moving user to home...')
                  return <Redirect to='/' />
                } else {
                  console.log('user is logged but not at loggin\'s page')
                }
              } else {
                console.log('user is not logged in')
                if (location.pathname !== '/login') {
                  console.log('user is not logged and is not at login\'s page')
                  return <Redirect to='/login' />
                } else {
                  console.log('user is not logged in and is at login\'s page')
                }
              }

              return (
                <>
                  <Suspense fallback={<LinearProgress />}>
                    <Switch>
                      <Route path='/login' component={Login} />
                      <Route path='/' component={MainPage} />
                    </Switch>
                  </Suspense>
                </>
              )
            }

            App.propTypes = {
              location: t.object.isRequired
            }

            export default App

class #080 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Avoiding unecessary redirects

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/032/sistema-pedidos

app.js:

          import React, { lazy, Suspense, useContext, useState, useEffect } from 'react'
          import t from 'prop-types'
          import { Redirect, Route, Switch } from 'react-router-dom'
          import { LinearProgress } from '@material-ui/core'
          import firebase from 'services/firebase'
          import { AuthContext } from 'contexts/auth'

          const MainPage = lazy(() => import('pages/main'))
          const Login = lazy(() => import('pages/login'))

          function App ({ location }) {
            const { userInfo, setUserInfo, handleLogout } = useContext(AuthContext)
            const [didCheckUserIn, setDidCheckUserIn] = useState(false)

            const { isUserLoggedIn } = userInfo

            useEffect(() => {
              firebase.auth().onAuthStateChanged((user) => {
                console.log('user data:', user)
                setUserInfo({
                  isUserLoggedIn: !!user,
                  user
                })
                setDidCheckUserIn(true)
              })

              window.handleLogout = handleLogout
            }, [])

            if (!didCheckUserIn) {
              console.log('ainda não checou se user is logged or not')
              return <h1>Loading...</h1>
            }

            console.log('already checked if user is logged or not')

            if (isUserLoggedIn) {
              console.log('user is logged in')
              if (location.pathname === '/login') {
                console.log('user is logged and is in login\'s page. So moving user to home...')
                return <Redirect to='/' />
              } else {
                console.log('user is logged but not at loggin\'s page')
              }
            } else {
              console.log('user is not logged in')
              if (location.pathname !== '/login') {
                console.log('user is not logged and is not at login\'s page')
                return <Redirect to='/login' />
              } else {
                console.log('user is not logged in and is at login\'s page')
              }
            }

            return (
              <>
                <Suspense fallback={<LinearProgress />}>
                  <Switch>
                    <Route path='/login' component={Login} />
                    <Route path='/' component={MainPage} />
                  </Switch>
                </Suspense>
              </>
            )
          }

          App.propTypes = {
            location: t.object.isRequired
          }

          export default App



Suggestion: How to test all conditions?

    cypress.io
    Tests end-to-end



class #081 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Refactoring
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/033/sistema-pedidos


app.js:

        if (!didCheckUserIn) {
          return <LinearProgress />
        }

        if (isUserLoggedIn && location.pathname === '/login') {
          return <Redirect to='/' />
        }

        if (!isUserLoggedIn && location.pathname !== '/login') {
          return <Redirect to='/login' />
        }


class #082 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Header
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/034/sistema-pedidos


https://material-ui.com/components/app-bar/#app-bar-with-menu

https://material-ui.com/api/toolbar/#demos

https://material-ui.com/api/icon-button/#iconbutton-api

src/pages/main.js:

        import React from 'react'
        import {
          AppBar,
          Toolbar,
          IconButton
        } from '@material-ui/core'
        import { AccountCircle } from '@material-ui/icons'
        import { ReactComponent as MainLogo } from 'pages/login/logo-react-zzaria.svg'

        const Main = () => (
          <AppBar>
            <Toolbar>
              <MainLogo />
              <IconButton color='inherit'>
                <AccountCircle />
              </IconButton>
            </Toolbar>
          </AppBar>
        )

        export default Main

class #083 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Initial Page - Header (cont.)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/035/sistema-pedidos

main.js:

          import React from 'react'
          import {
            AppBar,
            Toolbar,
            IconButton,
            Typography,
            Menu,
            MenuItem
          } from '@material-ui/core'
          import { AccountCircle } from '@material-ui/icons'
          import { ReactComponent as MainLogo } from 'pages/login/logo-react-zzaria.svg'

          const Main = () => (
            <AppBar>
              <Toolbar>
                <MainLogo />

                <Typography color='inherit'>
                  Hi, Paulo
                </Typography>

                <IconButton color='inherit'>
                  <AccountCircle />
                </IconButton>

                <Menu open>
                  <MenuItem>
                    Logout
                  </MenuItem>
                </Menu>
              </Toolbar>
            </AppBar>
          )

          export default Main

class #084 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Styling the Header
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/036/sistema-pedidos

main.js:

          import React from 'react'
          import styled from 'styled-components'
          import {
            AppBar,
            Toolbar,
            IconButton,
            Typography,
            Menu,
            MenuItem
          } from '@material-ui/core'
          import { AccountCircle } from '@material-ui/icons'
          import { ReactComponent as MainLogo } from 'pages/login/logo-react-zzaria.svg'

          const Main = () => (
            <AppBar>
              <Toolbar>
                <LogoContainer>
                  <Logo />
                </LogoContainer>

                <Typography color='inherit'>
                  Hi, Paulo
                </Typography>

                <IconButton color='inherit'>
                  <AccountCircle />
                </IconButton>

                <Menu open={false}>
                  <MenuItem>
                    Logout
                  </MenuItem>
                </Menu>
              </Toolbar>
            </AppBar>
          )

          const LogoContainer = styled.div`
            flex-grow: 1;
          `

          const Logo = styled(MainLogo)`
            height: 50px;
            width: 200px;

            & path {
              fill: #fff;
            }

            & line {
              stroke: #fff;
            }
          `

          export default Main

class #085 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Header Logic Rules
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/036/sistema-pedidos

open/close login/ logout etc.

main.js:

            import React, { useState, useContext } from 'react'
            import styled from 'styled-components'
            import {
              AppBar,
              Toolbar as MaterialToolbar,
              IconButton,
              Typography,
              Menu,
              MenuItem
            } from '@material-ui/core'
            import { AccountCircle } from '@material-ui/icons'
            import { ReactComponent as MainLogo } from 'pages/login/logo-react-zzaria.svg'
            import { AuthContext } from 'contexts/auth'

            const Main = () => {
              const [anchorElement, setAnchorElement] = useState(null)
              const { userInfo, handleLogout } = useContext(AuthContext)

              const handleOpenMenu = (e) => {
                setAnchorElement(e.target)
              }

              const handleCloseMenu = () => {
                setAnchorElement(null)
              }

              return (
                <AppBar>
                  <Toolbar>
                    <LogoContainer>
                      <Logo />
                    </LogoContainer>

                    <Typography color='inherit'>
                      Hi, {userInfo.user.displayName.split(' ')[0]}
                    </Typography>

                    <IconButton color='inherit' onClick={handleOpenMenu}>
                      <AccountCircle />
                    </IconButton>

                    <Menu
                      open={Boolean(anchorElement)}
                      onClose={handleCloseMenu}
                      anchorEl={anchorElement}
                    >
                      <MenuItem onClick={handleLogout}>
                        Logout
                      </MenuItem>
                    </Menu>
                  </Toolbar>
                </AppBar>
              )
            }

            const Toolbar = styled(MaterialToolbar)`
              margin: 0 auto;
              max-width: 960px;
              width: 100%;
            `

            const LogoContainer = styled.div`
              flex-grow: 1;
            `

            const Logo = styled(MainLogo)`
              height: 50px;
              width: 200px;

              & path {
                fill: #fff;
              }

              & line {
                stroke: #fff;
              }
            `

            export default Main


class #086 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Re-organizing
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/037/sistema-pedidos

Moving logo to another folder.

from src/pages/login
to src/images

'images/logo-react-zzaria.svg'


class #087 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
hot-loader in CRA without inject it.
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/039/sistema-pedidos

    by default CRA doesn't have hot-reloader

    so all the time we refresh the page, the browser checks the github connection

    Terminal:
    yarn add --dev react-hot-loader --exact

    New file at the root: sisetma-pedidos/
    
            .rescriptsrc.js

                        'use strict'

                        module.exports = [
                          ['use-babel-config', {
                            plugins: ['react-hot-loader/babel']
                          }]
                        ]


      root.js:

            import { hot } from 'react-hot-loader' - (top)

            export default hot(module)(Root) - (bottom)

      entire file root.js:

            import React from 'react'
            import { hot } from 'react-hot-loader'
            import { BrowserRouter, Route } from 'react-router-dom'
            import { CssBaseline } from '@material-ui/core'
            import AuthProvider from 'contexts/auth'
            import App from './app'

            function Root () {
              return (
                <AuthProvider>
                  <CssBaseline />

                  <BrowserRouter>
                    <Route component={App} />
                  </BrowserRouter>
                </AuthProvider>
              )
            }

            export default hot(module)(Root)

Warnings:

react-hot-loader.development.js:2375 React-Hot-Loader: react-🔥-dom patch is not detected. React 16.6+ features may not work.

This is fine and should be removed on further versions.

class #088 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Content
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/040/sistema-pedidos

main.js:

import {
  AppBar,
  Grid,
  IconButton,
  Menu,
  MenuItem,
  Toolbar as MaterialToolbar,
  Typography
} from '@material-ui/core'

const userName = userInfo.user.displayName.split(' ')[0]

<Content>
  <Grid container justify='center'>
    <Grid item>
      <Typography variant='h3'>
        O que vai ser hoje, {userName}? =)
      </Typography>
    </Grid>
  </Grid>
</Content>

const Content = styled.main`
  padding: 80px 20px 20px;
`

class #089 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Themes Material-Ui + Mixins 
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/041/sistema-pedidos

root.js:

  { createMuiTheme } from '@material-ui/core'

  const theme = createMuiTheme({
    typography: {
      useNextVariant: true
    }
  })

  console.log(theme)

      breakpoints: {keys: Array(5), values: {…}, up: ƒ, down: ƒ, between: ƒ, …}
      direction: "ltr"
      mixins: {toolbar: {…}, gutters: ƒ}
      overrides: {}
      palette: {common: {…}, type: "light", primary: {…}, secondary: {…}, error: {…}, …}
      props: {}
      shadows: (25) [...]
      shape: {borderRadius: 4}
      spacing: ƒ spacing()
      transitions: {easing: {…}, duration: {…}, create: ƒ, getAutoHeightDuration: ƒ}
      typography: {htmlFontSize: 16, fontFamily: ""Roboto", "Helvetica", "Arial", sans-serif", fontSize: 14, pxToRem: ƒ, round: ƒ, …}
      zIndex: {mobileStepper: 1000, speedDial: 1050, appBar: 1100, drawer: 1200, modal: 1300, …}
      __proto__: Object


function Root () {
  return (
    <MuiThemeProvider theme={theme}>
      <AuthProvider>
        <CssBaseline />

        <BrowserRouter>
          <Route component={App} />
        </BrowserRouter>
      </AuthProvider>
    </MuiThemeProvider>
  )
}

export default hot(module)(Root)


-> How to access media queries break points from Material UI?

console.log(theme)

mixins:
  toolbar:
    @media (min-width:0px) and (orientation: landscape):
      minHeight: 48

    @media (min-width:600px):
      minHeight: 64

      minHeight: 56

https://material-ui.com/customization/default-theme/#default-theme

main.js:

Spacer component:

  <Spacer />

  { withStyles } from '@material-ui/core' 


using mixins:

based on that principle:

      const style = {
        main: {
          background: '#ccc',
          height: 100
        }
      }

we can edit material-ui's mixins this way:

      const style = (theme) => {
        return {
          main: {
            background: '#ccc',
            height: 100
          }
        }
      }

If we edit this by hand, anytime the lib changes we might have to update. This way, we are using the own lib to compensate it's own breakpoint styles. If it' theme changes, our SpacerWrapper will follow it.

A few refactorings:

from this:

  const style = (theme) => {
    return {
      main: theme.mixins.toolbar
    }
  }

to this:

  const style = (theme) => ({
    main: theme.mixins.toolbar
  })


and from this:

    import t from 'prop-types'

    const SpacerWrapper = ({ classes }) => (
      <div className={classes.main} />
    )

    SpacerWrapper.propTypes = {
      classes: t.object
    }

    const Spacer = withStyles(style)(SpacerWrapper)


to this:

    const Spacer = withStyles(style)(({ classes }) => (
      <div className={classes.main} />
    ))


class #090 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Content's Markup: mapping the array of pizza's sizes

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/042/sistema-pedidos

main.js:

          <Content>
            <Grid container direction='column' alignItems='center'>

              <Typography variant='h3'>
                O que vai ser hoje, {userName}? =)
              </Typography>

              <Typography variante='h4'>
                Choose pizza's size:
              </Typography>

            </Grid>

            <Grid container spacing={10}>
              {pizzaSizes.map((pizza) => (
                <Grid item key={pizza.id} xs={4}>
                  <Paper style={{ padding: 20 }}>
                    <div>{pizza.size} cm</div>
                    <Typography>{pizza.name}</Typography>
                    <Typography>{pizza.slices} slices, {pizza.flavours} flavours</Typography>
                  </Paper>
                </Grid>
              ))}

            </Grid>
          </Content>

          const pizzaSizes = [
            {
              id: 0,
              name: 'Small',
              size: 28,
              slices: 2,
              falvours: 1
            },
            {
              id: 1,
              name: 'Medium',
              size: 30,
              slices: 6,
              flavours: 2
            },
            {
              id: 2,
              name: 'Large',
              size: 32,
              slices: 8,
              flavours: 3
            }
          ]

class #091 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Styling initial page (with Material-UI)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/043/sistema-pedidos

1. gutterBottom (material ui)

  It adds space at component's bottom.

      <Typography variant='h3' gutterBottom>
        O que vai ser hoje, {userName}? =)
      </Typography>

      <Typography variante='h4' gutterBottom>
        Choose pizza's size:
      </Typography>

2. <Divider />

  It adds a line.

      <div>{pizza.size} cm</div>

      <Divider />

      <Typography>{pizza.name}</Typography>


3. variant

  It changes text's size.

      <Typography variant='h5'>{pizza.name}</Typography>


class #092 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
The pizza's image
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/044/sistema-pedidos

main.js:

  markup:

      <Pizza>
        <PizzaText>
          {pizza.size} cm
        </PizzaText>
      </Pizza>

  The styled rules bellow including the 4 lines, using after and before css.

      const Pizza = styled.div`
        align-items: center;
        border: 1px solid #ccc;
        border-radius: 50%;
        display: flex;
        height: 200px;
        justify-content: center;
        position: relative;
        width: 200px;

        &::before,
        &::after {
          background: #ccc;
          content: '';
          position: absolute;
          transform: rotate(45deg)
        }

        &::before {
          height: 1px;
          width: 160px;
        }

        &::after {
          height: 160px;
          width: 1px;
        }
      `

Then the text itself:

      const PizzaText = styled(Typography).attrs({
        variant: 'h5'
      })`
        align-items: center;
        background: #fff;
        border-radius: 50%;
        display: flex;
        height: 80px;
        justify-content: center;
        position: relative;
        width: 80px;
        z-index: 1;
      `


class #093 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Mobile style (sounds like mobile 'second', I know!)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/045/sistema-pedidos

main.js:

insted of:

    <Grid item key={pizza.id} xs={4}>

Just 'xs' make it responsive, it srinks the content until it's limit, which is Pizza's width of 200px. When limit is reached, it puts start to stack the items.

    <Grid item key={pizza.id} xs>


OBS: Using styled components to pass just attributes still have to include the opening and closing back ticks:

        const Title = styled(Typography).attrs({
          gutterBottom: true,
          align: 'center'
        })``



class #094 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Helper function (texts in singular or plural)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/046/sistema-pedidos

main.js:

  <Typography>
    {pizza.slices} slices, {' '}
    {pizza.flavours} {' '}
    {singularOrPlural(pizza.flavours, 'falvour', 'flavours')}
  </Typography>

  function singularOrPlural (amount, singular, plural) {
    return amount === 1 ? singular : plural
  }


class #095 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Refactoring: isolating components
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/047/sistema-pedidos

1. Header

  New file: src/pages/main/header.js

      import React, { useState, useContext } from 'react'
      import styled from 'styled-components'
      import {
        AppBar,
        IconButton,
        Menu,
        MenuItem,
        Toolbar as MaterialToolbar,
        Typography
      } from '@material-ui/core'
      import { AccountCircle } from '@material-ui/icons'
      import { ReactComponent as MainLogo } from 'images/logo-react-zzaria.svg'
      import { AuthContext } from 'contexts/auth'

      const Header = () => {
        const { userInfo, handleLogout } = useContext(AuthContext)
        const userName = userInfo.user.displayName.split(' ')[0]

        const [anchorElement, setAnchorElement] = useState(null)

        const handleOpenMenu = (e) => {
          setAnchorElement(e.target)
        }

        const handleCloseMenu = () => {
          setAnchorElement(null)
        }

        return (
          <AppBar>
            <Toolbar>
              <LogoContainer>
                <Logo />
              </LogoContainer>

              <Typography color='inherit'>
                Hi, {userName}
              </Typography>

              <IconButton color='inherit' onClick={handleOpenMenu}>
                <AccountCircle />
              </IconButton>

              <Menu
                open={Boolean(anchorElement)}
                onClose={handleCloseMenu}
                anchorEl={anchorElement}
              >
                <MenuItem onClick={handleLogout}>
                  Logout
                </MenuItem>
              </Menu>
            </Toolbar>
          </AppBar>
        )
      }

      const LogoContainer = styled.div`
        flex-grow: 1;
      `

      const Logo = styled(MainLogo)`
        height: 50px;
        width: 200px;

        & path {
          fill: #fff;
        }

        & line {
          stroke: #fff;
        }
      `

      const Toolbar = styled(MaterialToolbar)`
        margin: 0 auto;
        max-width: 960px;
        width: 100%;
      `

      export default Header


  Update main file: src/pages/main/main.js

      import React, { useContext } from 'react'
      import styled from 'styled-components'
      import {
        Divider as MaterialDivider,
        Grid,
        Paper,
        Typography,
        withStyles
      } from '@material-ui/core'
      import { AuthContext } from 'contexts/auth'
      import Header from './header'

      const Main = () => {
        const { userInfo } = useContext(AuthContext)
        const userName = userInfo.user.displayName.split(' ')[0]

        return (
          <>

            <Header />

            <Spacer />

            <Content>
              <Grid container direction='column' alignItems='center'>

                <Title variant='h3'>
                  O que vai ser hoje, {userName}? =)
                </Title>

                <Title variante='h4'>
                  Choose pizza's size:
                </Title>

              </Grid>

              <PizzasGrid>
                {pizzaSizes.map((pizza) => (
                  <Grid item key={pizza.id} xs>
                    <PaperPizza>
                      <Pizza>
                        <PizzaText>
                          {pizza.size} cm
                        </PizzaText>
                      </Pizza>

                      <Divider />

                      <Typography variant='h5'>{pizza.name}</Typography>
                      <Typography>
                        {pizza.slices} slices, {' '}
                        {pizza.flavours} {' '}
                        {singularOrPlural(pizza.flavours, 'falvour', 'flavours')}
                      </Typography>
                    </PaperPizza>
                  </Grid>
                ))}

              </PizzasGrid>
            </Content>
          </>
        )
      }

      function singularOrPlural (amount, singular, plural) {
        return amount === 1 ? singular : plural
      }

      const pizzaSizes = [
        {
          id: 0,
          name: 'Small',
          size: 28,
          slices: 2,
          flavours: 1
        },
        {
          id: 1,
          name: 'Medium',
          size: 30,
          slices: 6,
          flavours: 2
        },
        {
          id: 2,
          name: 'Large',
          size: 32,
          slices: 8,
          flavours: 3
        }
      ]

      const Divider = styled(MaterialDivider)`
        margin: 20px 0;
        width: 100%;
      `

      const Title = styled(Typography).attrs({
        gutterBottom: true,
        align: 'center'
      })``

      const PizzasGrid = styled(Grid).attrs({
        container: true,
        spacing: 10
      })`
        padding: 20px;
      `

      const PaperPizza = styled(Paper)`
        align-items: center;
        display: flex;
        flex-direction: column;
        min-width: 250px;
        padding: 20px 0;
      `

      const Pizza = styled.div`
        align-items: center;
        border: 1px solid #ccc;
        border-radius: 50%;
        display: flex;
        height: 200px;
        justify-content: center;
        position: relative;
        width: 200px;

        &::before,
        &::after {
          background: #ccc;
          content: '';
          position: absolute;
          transform: rotate(45deg)
        }

        &::before {
          height: 1px;
          width: 160px;
        }

        &::after {
          height: 160px;
          width: 1px;
        }
      `

      const PizzaText = styled(Typography).attrs({
        variant: 'h5'
      })`
        align-items: center;
        background: #fff;
        border-radius: 50%;
        display: flex;
        height: 80px;
        justify-content: center;
        position: relative;
        width: 80px;
        z-index: 1;
      `

      const Content = styled.main`
        padding: 20px;
      `
      const style = (theme) => ({
        main: theme.mixins.toolbar
      })

      const Spacer = withStyles(style)(({ classes }) => (
        <div className={classes.main} />
      ))

      export default Main


class #096 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Refactoring: Abstracting user's data
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/048/sistema-pedidos

main.js:

  const { userInfo } = useContext(AuthContext)
  const userName = userInfo.user.displayName.split(' ')[0]

Being used in 2 files:

  userInfo.user.displayName.split(' ')[0]

Don't Repeat Yoruself!

app.js:

Insted of:

  useEffect(() => {
    firebase.auth().onAuthStateChanged((user) => {
      console.log('user data:', user)
      setUserInfo({
        isUserLoggedIn: !!user,
        user
      })
      setDidCheckUserIn(true)
    })
  }, [setUserInfo])


replace setUserInfo:

      setUserInfo({
        isUserLoggedIn: !!user,
        user: {
          ...user,
          firstName: user.displayName.split(' ')[0]
        }
      })

  But in case user is not logged in, we need a rule to handle it:

  app.js:

        setUserInfo({
          isUserLoggedIn: !!user,
          user: user && {
            ...user,
            firstName: user.displayName.split(' ')[0]
          }
        })


Done. So now at main.js and header.js just reacht he data by:

    {userInfo.user.firstName}



class #097 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Refactoring: next intern pages structure
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/049/sistema-pedidos

- setting a mater page for all app's pages

main.js:

        import React, { Suspense } from 'react'
        import { Switch, Route } from 'react-router-dom'
        import styled from 'styled-components'
        import { withStyles } from '@material-ui/core'
        import Header from './header'

        const ChoosePizzaSize = React.lazy(() => import('pages/choose-pizza-size'))

        const Main = () => (
          <>
            <Header />

            <Spacer />

            <Content>
              <Suspense fallback='Loading...'>
                <Switch>
                  <Route path='/' exact component={ChoosePizzaSize} />
                </Switch>
              </Suspense>
            </Content>
          </>
        )

        const Content = styled.main`
          padding: 20px;
        `
        const style = (theme) => ({
          main: theme.mixins.toolbar
        })

        const Spacer = withStyles(style)(({ classes }) => (
          <div className={classes.main} />
        ))

        export default Main


mkdir pages/choose-pizzza-size

  new files:

        index.js
        choose-pizza-size.js

index.js:

  export { default } from './choose-pizza-size'

choose-pizza-size.js:

        import React, { useContext } from 'react'
        import styled from 'styled-components'
        import {
          Divider as MaterialDivider,
          Grid,
          Paper,
          Typography
        } from '@material-ui/core'
        import { AuthContext } from 'contexts/auth'

        const ChoosePizzaSize = () => {
          const { userInfo } = useContext(AuthContext)

          return (
            <>
              <Grid container direction='column' alignItems='center'>
                <Title variant='h3'>
                  O que vai ser hoje, {userInfo.user.firstName}? =)
                </Title>

                <Title variante='h4'>
                  Choose pizza's size:
                </Title>
              </Grid>

              <PizzasGrid>
                {pizzaSizes.map((pizza) => (
                  <Grid item key={pizza.id} xs>
                    <PaperPizza>
                      <Pizza>
                        <PizzaText>
                          {pizza.size} cm
                        </PizzaText>
                      </Pizza>

                      <Divider />

                      <Typography variant='h5'>{pizza.name}</Typography>
                      <Typography>
                        {pizza.slices} slices, {' '}
                        {pizza.flavours} {' '}
                        {singularOrPlural(pizza.flavours, 'falvour', 'flavours')}
                      </Typography>
                    </PaperPizza>
                  </Grid>
                ))}
              </PizzasGrid>
            </>
          )
        }

        function singularOrPlural (amount, singular, plural) {
          return amount === 1 ? singular : plural
        }

        const pizzaSizes = [
          {
            id: 0,
            name: 'Small',
            size: 28,
            slices: 2,
            flavours: 1
          },
          {
            id: 1,
            name: 'Medium',
            size: 30,
            slices: 6,
            flavours: 2
          },
          {
            id: 2,
            name: 'Large',
            size: 32,
            slices: 8,
            flavours: 3
          }
        ]

        const Divider = styled(MaterialDivider)`
          margin: 20px 0;
          width: 100%;
        `

        const Title = styled(Typography).attrs({
          gutterBottom: true,
          align: 'center'
        })``

        const PizzasGrid = styled(Grid).attrs({
          container: true,
          spacing: 10
        })`
          padding: 20px;
        `

        const PaperPizza = styled(Paper)`
          align-items: center;
          display: flex;
          flex-direction: column;
          min-width: 250px;
          padding: 20px 0;
        `

        const Pizza = styled.div`
          align-items: center;
          border: 1px solid #ccc;
          border-radius: 50%;
          display: flex;
          height: 200px;
          justify-content: center;
          position: relative;
          width: 200px;

          &::before,
          &::after {
            background: #ccc;
            content: '';
            position: absolute;
            transform: rotate(45deg)
          }

          &::before {
            height: 1px;
            width: 160px;
          }

          &::after {
            height: 160px;
            width: 1px;
          }
        `

        const PizzaText = styled(Typography).attrs({
          variant: 'h5'
        })`
          align-items: center;
          background: #fff;
          border-radius: 50%;
          display: flex;
          height: 80px;
          justify-content: center;
          position: relative;
          width: 80px;
          z-index: 1;
        `

        export default ChoosePizzaSize

class #098 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Refactoring: organizing fake data
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/050/sistema-pedidos

const pizzaSizes = [
  {
    id: 0,
    name: 'Small',
    size: 28,
    slices: 2,
    flavours: 1
  },
  {
    id: 1,
    name: 'Medium',
    size: 30,
    slices: 6,
    flavours: 2
  },
  {
    id: 2,
    name: 'Large',
    size: 32,
    slices: 8,
    flavours: 3
  }
]


src/fake-data/pizza-sizes.js:

        export default [
          {
            id: 0,
            name: 'Small',
            size: 28,
            slices: 2,
            flavours: 1
          },
          {
            id: 1,
            name: 'Medium',
            size: 30,
            slices: 6,
            flavours: 2
          },
          {
            id: 2,
            name: 'Large',
            size: 32,
            slices: 8,
            flavours: 3
          }
        ]

choose-pizza-sizes.js:

        import pizzaSizes from 'fake-data/pizza-sizes'


class #099 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Updating dependencies (Long class: 25 minutes video)

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/051/sistema-pedidos


package.json

- always check wich is the current version of the dependency, at it's website.
- check what changed on them.
- first, update the dependencies. later, the devDependencies.

To update them:

yarn add --exact ...

    "@material-ui/core": "4.11.0",
    "@material-ui/icons": "4.9.1",
    "@testing-library/jest-dom": "4.2.4",
    "@testing-library/react": "9.3.2",
    "@testing-library/user-event": "7.1.2",
    "firebase": "7.15.5",
    "react": "16.13.1",
    "react-dom": "16.13.1",
    "react-router-dom": "5.2.0",
    "react-scripts": "3.4.1",
    "styled-components": "5.1.1"

devDependencies:

    "@rescripts/cli": "0.0.14",
    "@rescripts/rescript-env": "0.0.12",
    "babel-eslint": "10.1.0",
    "eslint-config-standard": "14.1.1",
    "eslint-config-standard-react": "9.2.0",
    "eslint-plugin-import": "2.22.0",
    "eslint-plugin-node": "11.1.0",
    "eslint-plugin-promise": "4.2.1",
    "eslint-plugin-react": "7.20.3",
    "eslint-plugin-standard": "4.0.1",
    "react-hot-loader": "4.12.21",
    "snazzy": "8.0.0",
    "standard": "14.3.4"

To update them:

yarn add --dev --exact ...

OBS: all versions at class were older or the same them mines. So I didn't update my dependencies.

If you get a major update, big chance something in the code will break.

OBS: using crete-react-app to start a project installs these 3 dependencies at once:

    "react"
    "react-dom"
    "react-scripts"

How to update your global version of create-react-app?

Check the version:

  create-react-app --version

      Mine:             3.3.0
      Current at NPM:   3.4.1
      Daciuk, at class: 3.0.1

  To update it:

      yarn global add create-react-app


How to list everything global on your NPM:

      npm list -g --depth 0

How to list everything global on your YARN:

      yarn global list

How to know where YARN stores global packages:

      yarn global bin

      (outputs the path to that bin folder)


Some extra comments from Daciuk on direct chat:

              se vc instalou o yarn pelo pacote do sistema, não pelo NPM, ele vai ter deps do sistema mesmo, é normal.. se elas não estiverem sendo utilizadas, pode remover sem crise.. 

              sobre os globais, hoje nem precisa mais, pode remover todos, e usar tudo à partir do yarn create ou npx  :)

              Fernando Daciuk, [Jul 9, 2020 at 2:33:09 PM]:
              aí pode remover o create-react-app global, e usar sempre com yarn create react-app <seu app>, que aí vc vai usar sempre a versão mais recente do CRA :)

              todo pacote que começar com o nome create-, vc pode usar o yarn create <resto_do_comando>

              se for global

              e para os outros pacotes, pode usar o npx


create react app:
https://create-react-app.dev/
https://create-react-app.dev/docs/updating-to-new-releases/

Check the change log:
https://github.com/facebook/create-react-app/blob/master/CHANGELOG.md

reminder:

jsconfig.json:

      {
        "compilerOptions": {
          "baseUrl": "src"
        },

        "include": ["src"]
      }
Insted of using the .env file to set paths.
https://create-react-app.dev/docs/importing-a-component/#absolute-imports
https://code.visualstudio.com/docs/languages/jsconfig


Also, .env shouldn't have BROWSER=null anymore. Change it for:

      BROWSER=none

Now, Daciuk faces the issue I have been facing for a while:

Linter asks us to use something inside the array on the second parameter of useEffect:

  useEffect(() => {
    firebase.auth().onAuthStateChanged((user) => {
      console.log('user data:', user)
      setUserInfo({
        isUserLoggedIn: !!user,
        user: user && {
          ...user,
          firstName: user.displayName.split(' ')[0]
        }
      })
      setDidCheckUserIn(true)
    })
  }, [setUserInfo])



Material-UI unit change:

Ealier, 'spacing' was set with pixels.
Now it's 8x the value, in pixels.


class #100 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Next screen/page: pick up a flavour.
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/052/sistema-pedidos


choose-pizza-flavours.js:

    import {
      Card,
      CardActionArea as MaterialCardActionArea
    } from '@material-ui/core'

    <Card>
      <CardActionArea to='/choose-pizza-flavours'>
        <Pizza>
          <PizzaText>
            {pizza.size} cm
          </PizzaText>
        </Pizza>

        <Divider />

        <Typography variant='h5'>{pizza.name}</Typography>
        <Typography>
          {pizza.slices} slices, {' '}
          {pizza.flavours} {' '}
          {singularOrPlural(pizza.flavours, 'falvour', 'flavours')}
        </Typography>
      </CardActionArea>
    </Card>

    const CardActionArea = styled(MaterialCardActionArea).attrs({
      component: Link
    })`
      align-items: center;
      display: flex;
      flex-direction: column;
      min-width: 250px;
      padding: 20px 0;
    `

class #101 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
The Route to flavors
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/053/sistema-pedidos

How to share data between these pages? many possibilities. We are picking STATE.


choose-pizza-size.js:

    <CardActionArea to={{
      pathname: '/pizza-flavours',
      state: pizza
    }}>

choose-pizza-flavours.js:

      import t from 'prop-types'

      const ChoosePizzaFlavours = ({ location }) => {

        return (
        )
      }

      ChoosePizzaFlavours.propTypes = {
        location: t.object.isRequired
      }



ANother option, could be SEARCH: the URL.

If data was stored in the URL, a user could share the URL with friends and the page rendered would have the same data.

Daciuk thinks this should be local and temp. This is not the siuation that a user would share a link with a given URL containing all this data. It might not be so clear to the other user that some options already had been taken, like the size (on the previous page).

So our option will be state, inside the location object.


class #102 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Refactoring: Routes' names abstraction

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/054/sistema-pedidos

Files containing:

      path=
      to=
      pathname:

            Search on Terminal with RegEx:

                grep -E "(path|to)=|pathname" src/**/*.js

            (Doesn't work on my Terminal)

src/routes:

  export const HOME = '/'
  export const LOGIN = '/login'
  export const CHOOSE_PIZZA_FLAVOURS = '/choose-pizza-flavours'

then just replace any path=, to=, or pathname that use it. Those files were:
  
  app.js
  main.js
  choose-pizza-size.js

class #103 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Page Choose Flavours
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/055/sistema-pedidos


new folder:

src/ui:

  title.js:

          import React from 'react'
          import styled from 'styled-components'
          import { Typography } from '@material-ui/core'

          const Title = styled(Typography).attrs({
            gutterBottom: true,
            align: 'center'
          })``

          export const H3 = (props) => <Title variant='h3' {...props} />
          export const H4 = (props) => <Title variant='h4' {...props} />

          export default Title



  header-content.js:

          import React from 'react'
          import t from 'prop-types'
          import { Grid } from '@material-ui/core'

          const HeaderContent = ({ children }) => (
            <Grid container direction='column' alignItems='center'>
              {children}
            </Grid>
          )

          HeaderContent.propTypes = {
            children: t.node.isRequired
          }

          export default HeaderContent


  index.js:

          export { default as Title, H3, H4 } from './title'
          export { default as HeaderContent } from './header-content'


  So now the 2 pages this app has so far will call all the stuff 'ui' folder has to offer:

  choose-pizza-flavours.js:

          import React from 'react'
          import t from 'prop-types'
          import { H4, HeaderContent } from 'ui'

          const ChoosePizzaFlavours = ({ location }) => {
            return (
              <>
                <HeaderContent>
                  <H4>
                    Choose up to {location.state.flavours} flavours:
                  </H4>
                </HeaderContent>
              </>
            )
          }

          ChoosePizzaFlavours.propTypes = {
            location: t.object.isRequired
          }

          export default ChoosePizzaFlavours

  choose-pizza-size.js:

          <HeaderContent>
            <H3>
              O que vai ser hoje, {userInfo.user.firstName}? =)
            </H3>

            <H4>
              Choose pizza's size:
            </H4>
          </HeaderContent>


new folder:

  src/utils:

      index.js:

              export { default as singularOrPlural } from './singular-or-plural'

      singular-or-plural.js:

              function singularOrPlural (amount, singular, plural) {
                return amount === 1 ? singular : plural
              }

              export default singularOrPlural



class #104 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Data Structure: pizza flavors
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/056/sistema-pedidos

src/fake-data/pizzas-flavours.js

          export default [
            {
              id: 0,
              image: '/fake-data/images/pizza-calabresa.png',
              name: 'Calabresa',
              value: {
                '0': 20,
                '1': 30,
                '2': 40
              }
            },

            {
              id: 1,
              image: '/fake-data/images/pizza-frango-catupiry.png',
              name: 'Frango com Catupiry',
              value: {
                '0': 25,
                '1': 35,
                '2': 45
              }
            },

            {
              id: 1,
              image: '/fake-data/images/pizza-prestigio.png',
              name: 'Prestígio',
              value: {
                '0': 30,
                '1': 40,
                '2': 50
              }
            }
          ]

class #105 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Markup: flavors
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/057/sistema-pedidos





















class #106 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Listing Flavours, Align and Link
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/058/sistema-pedidos


ui/card-link.js:

      import styled from 'styled-components'
      import { Link } from 'react-router-dom'
      import { CardActionArea } from '@material-ui/core'

      const CardLink = styled(CardActionArea).attrs({
        component: Link
      })`
        align-items: center;
        display: flex;
        flex-direction: column;
        min-width: 250px;
        padding: 20px 0;
      `

      export default CardLink


The CardLink component was used either in choose-pizza-size or choose-pizza-flavours.

At choose-pizza-flavours, we used it without it's 'link' feature. How was that possible?

      We imported the CardLink, but renamed that in the JSX, as <Label>. Then using styled-components we made this:

          const Label = styled(CardLink).attrs({
            component: 'label'
          })``

      So it gets the style that comes from the CardLink component, but it's not using it as a link. Notice that in choose-pizza-size.js this component gets properties:

                    <CardLink to={{
                      pathname: CHOOSE_PIZZA_FLAVOURS,
                      state: pizza
                    }}
                    >

      But in choose-pizza-flavours.js, just a simple tag:

                    <Label>

      That decision was made because we don't want to redirect user in one click, like we did in choosing sizes. User can't pick more than one size!

      At flavors choices, user mostly will pick more than one flavours. The redirect will happen later, in a bottom bar actions area to be coded in the next classes. So we want the user to be able to select it, not move to the next page from this single click.

      So we also included a <input type='checkbox' /> beside the <Label>, meaning the selection to be done.

      Also, since <Label> wraps everything on each item, any click in this big area will select the checkbox.


class #107 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Flavours: rules of selection
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/059/sistema-pedidos

Master rule: depending on the size, user may pick a specific number of flavours.

chose-pizza-flavours.js:

  const [checkboxes, setCheckboxes] = useState(() => ({}))

useState({})
or
useState(() => ({}))
?

1) useState({})

    each time the component is re-rendered, a new object will be created.

2) useState(() => ({}))

    each time the component is re-rendered, the same reference will be used, it doesn't create a new object every time.

    Not a big deal in performance, but good!


Warning: hooks creation never should be conditional. Put them on the top, before all IFs! Linter also warnings it if you do.

Why an object? Cuz we want it dynamiclly

      JSX:

          <input
            type='checkbox'
            value=''
            checked={!!checkboxes[pizza.id]}
            onChange={handleChangeCheckbox(pizza.id)}
          />

      Function:

          const handleChangeCheckbox = (pizzaId) => (e) => {
            setCheckboxes((checkboxes) => {
              return {
                ...checkboxes,
                [pizzaId]: !checkboxes[pizzaId]
              }
            })
          }



class #108 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Flavours: limiting the number of flavours, based on the size
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/060/sistema-pedidos

Refactoring:  e.target.checked

      const handleChangeCheckbox = (pizzaId) => (e) => {
        setCheckboxes((checkboxes) => {
          return {
            ...checkboxes,
            [pizzaId]: e.target.checked
          }
        })
      }

Limit selection logic

1. How many checkboxes have true value?
2. Convert checkboxes into an array.

  Object.keys(checkboxes)

        Takes just it's keys
        ["0", "1", "2"]

  Object.values(checkboxes)

        Takes just it's values
        [true, false, true]

  Object.entries(checkboxes)

        Takes an array for each checkbox containing it's key and value
        [ ["0", true], ["1", false], ["2", true] ]


  We gonna use:
  
      Object.values(checkboxes)

  Plus: filter

      Object.values(checkboxes).filter(c => c === true)

  Which is the same as: (little refactoring)

      Object.values(checkboxes).filter(c => !!c)

  More...

      Object.values(checkboxes).filter(c => Boolean(c))

  Still too much. Make it smaller!

      Object.values(checkboxes).filter(Boolean)

  Plus: length

      Object.values(checkboxes).filter(Boolean).length


  by the end:

        function checkboxesChecked (checkboxes) {
          return Object.values(checkboxes).filter(Boolean)
        }

        const handleChangeCheckbox = (pizzaId) => (e) => {
          if (
            checkboxesChecked(checkboxes).length === flavours &&
            e.target.checked === true
          ) {
            return
          }

          setCheckboxes((checkboxes) => {
            return {
              ...checkboxes,
              [pizzaId]: e.target.checked
            }
          })
        }

https://github.com/da2k/curso-reactjs-ninja/issues/500


class #109 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Flavours: style of selection
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/061/sistema-pedidos


choose-pizza-flavours.js:

    import { Card as MaterialCard } from '@material-ui/core

  JSX:

    <Card checked={!!checkboxes[pissa.id]}>

  style:

    const Card = styled(MaterialCard)`
      border: 2px solid transparent;
      border-color: ${({ checked }) => checked ? '#000' : ''};
    `


  Hidden the checkbox itself:

  insted of:
            <input
              type='checkbox'
              value=''
              checked={!!checkboxes[pizza.id]}
              onChange={handleChangeCheckbox(pizza.id)}
            />

  This:
            <Checkbox
              value=''
              checked={!!checkboxes[pizza.id]}
              onChange={handleChangeCheckbox(pizza.id)}
            />

            const Checkbox = styled.input.attrs({
              type: 'checkbox'
            })`
              display: none;
            `

class #110 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
ThemeProvider at Styled-components
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/062/sistema-pedidos

root.js:

import { ThemeProvider } from 'styled-components'

Then insted of:

      function Root () {
        return (
          <MuiThemeProvider theme={theme}>
            <AuthProvider>
              <CssBaseline />

              <BrowserRouter>
                <Route component={App} />
              </BrowserRouter>
            </AuthProvider>
          </MuiThemeProvider>
        )
      }

This:

      function Root () {
        return (
          <MuiThemeProvider theme={theme}>
            <ThemeProvider theme={theme}>
              <AuthProvider>
                <CssBaseline />

                <BrowserRouter>
                  <Route component={App} />
                </BrowserRouter>
              </AuthProvider>
            </ThemeProvider>
          </MuiThemeProvider>
        )
      }

Now, with the inclusion of this "ThemeProvider" wrapping everything but the MuiThemeProvider, inside it our styled-components now also consumes the theme.

Now, changes that we make using styled-components will effect the same 'theme' object:

      const theme = createMuiTheme({
        typography: {
          useNextVariant: true
        }
      })

      console.log('theme:', theme)

Example:

      console.log('theme:', theme)

      theme: {
        ...theme,
        palette: {
          ...palette,
          secondary: {
            contrastText: "#fff,
            dark: "#c51162",
            light: "#ff4081",
            main: "#f50057"
          }
        }
      }

This is being apssed via props, inside the string of styled-components:

We don't have to inject it manually. It's there, thanks to the Provider in the root.js.

How it works?

Insted of:

const Card = styled(MaterialCard)`
  border: 2px solid transparent;
  border-color: ${({ checked }) => checked ? '#000' : ''};
`

Pass 'theme' as prop, like that:

const Card = styled(MaterialCard)`
  border: 2px solid transparent;
  border-color: ${({ theme, checked }) => checked ? theme.palette.secondary.light : ''};
`

class #111 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Material-ui's vars all over the app (refactoring)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/063/sistema-pedidos

Replacing style at...

  choose-pizza-size.js:

    background: ${({ theme }) => theme.palette.common.white};

    border: 1px solid ${({ theme }) => theme.palette.grey.A100};


  login.js:

    padding: ${({ theme }) => theme.spacing(3)}px; (that means 3 * 8px)
    
    font-size: ${({ theme }) => theme.typography.h5.fontSize};

    padding: ${({ theme }) => theme.spacing(2)}px}; (that means 2 * 8px)


  header.js:

    max-width: ${({ theme }) => theme.breakpoints.values.lg}px;

  main.js:

    padding: ${({ theme }) => theme.spacing(3)}px; (that means 3 * 8px)


  card-link:

    from this: padding: 20px 0;   
    to this: padding: ${({ theme }) => theme.spacing(3)}px 0;

    or: padding: ${({ theme }) => theme.spacing(3, 0)}; (don't have to pass pixels)

  divider.js:

    margin: ${({ theme }) => theme.spacing(3, 0)};

  pizzas-grid.js:

    padding: ${({ theme }) => theme.spacing(3)}px;

It's also possible to manually override the theme.anything.value itself. Check the documentation and have fun.

class #112 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
helper: currency
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/064/sistema-pedidos


toLocaleString()

  This method converts to local format. example:

    (1300.00)toLocaleString('pt-BR')
    // 1.300,00

choose-pizza-flavours.js:

    <Typography variant='h5'>
      {pizza.value[id].toLocaleString('en-IN', {
        style: 'currency',
        currency: 'GBP'
      })}
    </Typography>


    Most common currencies:

    https://www.joshmcarthur.com/til/2018/04/11/til-tolocalestring.html


  or isolating it:

  utils/to-money.js

          function toMoney (value) {
            return Number(value).toLocaleString('en-IN', {
              style: 'currency',
              currency: 'GBP'
            })
          }

          export default toMoney

another method: Intl (stands for International)

          function toMoney (value) {
            return new Intl.NumberFormat('en-IN', {
              style: 'currency',
              currency: 'GBP'
            }).format(value)
          }

class #113 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Footer
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/065/sistema-pedidos



choose-pizza-flavours.js:

        <Footer>
          <Container>
            <h2>Content</h2>
          </Container>
        </Footer>

        const Footer = styled.footer`
          box-shadow: 0 0 3px ${({ theme, checked }) => theme.palette.grey[400]};
          padding: ${({ theme }) => theme.spacing(3)}px;
          width: 100%;
        `

src/ui/content.js:

        import styled from 'styled-components'

        const Content = styled.main`
          padding: ${({ theme }) => theme.spacing(3)}px;
        `

        export default Content


class #114 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Fixing Footer in the Bottom
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/066/sistema-pedidos

So far, depending on the screen size, there is a gap between the top bottom and the footer itself.


import { createGlobalStyle } from 'styled-components'

<GlobalStyle />

const GlobalStyle = createGlobalStyle`
  #root {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }
`

class #115 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/067/sistema-pedidos

On Daciuks's video, by including createGlobalStyle from styled-component, it broke the style from Material-ui. That didn't happen with my app. So sounds like a bug that was already fixed.

Anyways, here is what Daciuk made to fix the issue.

at choose-pizza-sflavours.js:

    Insted of:

        const Card = styled(MaterialCard)`
          border: 2px solid transparent;
          border-color: ${({ theme, checked }) => checked ? theme.palette.secondary.light : ''};
        `

    Have this:

        const Card = styled(MaterialCard)`
          && {
            border: 2px solid transparent;
            border-color: ${({ theme, checked }) => checked ? theme.palette.secondary.light : ''};
          }
        `

Daciuk had to do this on each component extended from material-ui that has been styled by us.

What the '&& { }' does?

It adds 2 classes and that helps to override the material-ui style.


choose-pizza-size.js:

    const PizzaText = styled(Typography).attrs({
      variant: 'h5'
    })`
      && {
        align-items: center;
        background: ${({ theme }) => theme.palette.common.white};
        border-radius: 50%;
        display: flex;
        height: 80px;
        justify-content: center;
        position: relative;
        width: 80px;
        z-index: 1;
      }
    `

main.js:

    const Toolbar = styled(MaterialToolbar)`
      && {
        margin: 0 auto;
        max-width: ${({ theme }) => theme.breakpoints.values.lg}px;
        width: 100%;
      }
    `

ui/card-link.js:

      const CardLink = styled(CardActionArea).attrs({
        component: Link
      })`
        && {
          align-items: center;
          display: flex;
          flex-direction: column;
          min-width: 250px;
          padding: ${({ theme }) => theme.spacing(3, 0)};
        }
      `

ui/divider.js:

      const Divider = styled(MaterialDivider)`
        && {
          margin: ${({ theme }) => theme.spacing(3, 0)};
          width: 100%;
        }
      `

1 classes overrride 1 class. That's how we overcome this big.


class #116 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Footer Grid
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/068/sistema-pedidos


choose-pizza-flavours.js:

JSX:

      <Footer>
        <Container>
          <Grid container>
            <Grid item>

            </Grid>

            <Grid item>

            </Grid>
          </Grid>
        </Container>
      </Footer>

      const OrderContainer = styled(Grid).attrs({
        item: true
      })`
      && {
        flex-grow: 1;
      }
      `

class #117 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/069/sistema-pedidos

Footer's Data


import { AuthContext } from 'contexts/auth'

const { userInfo } = useContext(AuthContext)

const { flavours, id, name, slices } = location.state


    <Typography>
      <b>{userInfo.user.firstName}, seu pedido é:</b>
    </Typography>

    <Typography>
      Pizza <b>{name.toUpperCase()}</b> {'- '}
      ({slices} slices,{' '}
      {flavours} {singularOrPlural(flavours, 'flavour', 'flavours')})
    </Typography>


class #118 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Buttons' action on Footer
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/070/sistema-pedidos

1.btn change size
2.btn how many

      import {
        Button as MaterialButton,
        Grid
      } from '@material-ui/core'

      import { HOME, CHOOSE_PIZZA_AMOUNT } from 'routes'

JSX:

      <Grid item>
        <Button to={HOME}>Change size</Button>
        <Button color='primary' to={CHOOSE_PIZZA_AMOUNT}>How many?</Button>
      </Grid>

styled:

      const Button = styled(MaterialButton).attrs({
        variant: 'contained',
        component: Link
      })`
        margin-left: ${({ theme }) => theme.spacing(2)}px;
      `

class #119 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Abstracting Authentication
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/071/sistema-pedidos


So far, every time we need to reach data from the Authentication, we are using a large amount of code:

      import { useContext } from 'react'

      import { AuthContext } from 'contexts/auth'

      const { userInfo, setUserInfo } = useContext(AuthContext)


Let's abstract this by using a custom hook.

new folder:

    src/hooks

            index.js:

                    export { default as useAuth } from './auth'

            auth.js:

                    import { useContext } from 'react'
                    import { AuthContext } from 'contexts/auth'

                    function useAuth () {
                      return useContext(AuthContext)
                    }

                    export default useAuth


updated app.js:
    
    - removed { useContext } import
    - removed { AuthContext } import

    - added this:

      import { useAuth } from 'hooks'

    - replaced this:

      useContext(AuthContext)

      for:

      useAuth()

same update made at:

    choose-pizza-flavours.js
    choose-pizza-size.js
    header.js
    main.js
    login.js


Why this auth.js file is not in '/utils' folder?

  Because Hooks can be use only in:
  
    1) function components
    
    2) or inside a custom hook: it's name have to start with 'use' word.



Header > Logo > Get a link on it.

  import { HOME } from 'routes'

  <LinkLogo to={HOME}>
    <Logo />
  </LinkLogo>

  const LinkLogo = styled(Link)`
    display: inline-block;
  `



class #120 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Choose amount of Pizzas
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/072/sistema-pedidos


src/pages/choose-pizza-amount


class #121 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Amount's page Markup
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/073/sistema-pedidos


JSX:

    <Content>
      <HeaderContent>
        <H4>
          How many pizzas would you like with this flavours?
        </H4>
      </HeaderContent>

      <MainContent>
        <Input defaultValue='1' />
      </MainContent>
    </Content>

styled:

    const Input = styled(MaterialInput).attrs({
      type: 'number'
    })`
      & input {
        font-size: 80px;
        padding: 10px;
        text-align: center;
        width: 150px;
      }

      & input::-webkit-inner-spin-button {
        opacity: 1;
      }
    `

    const MainContent = styled.div`
      display: flex;
      justify-content: center;
      margin-top: ${({ theme }) => theme.spacing(2)}px
    `


class #122 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Isolating the footer
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/074/sistema-pedidos


src/ui/footer.js:

        import React from 'react'
        import t from 'prop-types'
        import { withRouter, Link } from 'react-router-dom'
        import styled from 'styled-components'
        import {
          Button as MaterialButton,
          Container,
          Grid,
          Typography
        } from '@material-ui/core'
        import { useAuth } from 'hooks'
        import { singularOrPlural } from 'utils'
        import { HOME, CHOOSE_PIZZA_AMOUNT } from 'routes'

        function Footer ({ location }) {
          const { userInfo } = useAuth()

          const { flavours, name, slices } = location.state
          return (
            <FooterContent>
              <Container>
                <Grid container>
                  <OrderContainer>
                    <Typography>
                      <b>{userInfo.user.firstName}, seu pedido é:</b>
                    </Typography>

                    <Typography>
                      Pizza <b>{name.toUpperCase()}</b> {'- '}
                      ({slices} slices,{' '}
                      {flavours} {singularOrPlural(flavours, 'flavour', 'flavours')})
                    </Typography>
                  </OrderContainer>

                  <Grid item>
                    <Button to={HOME}>Change size</Button>
                    <Button color='primary' to={CHOOSE_PIZZA_AMOUNT}>How many?</Button>
                  </Grid>
                </Grid>
              </Container>
            </FooterContent>
          )
        }

        Footer.propTypes = {
          location: t.object.isRequired
        }

        const FooterContent = styled.footer`
          box-shadow: 0 0 3px ${({ theme, checked }) => theme.palette.grey[400]};
          padding: ${({ theme }) => theme.spacing(3)}px;
          width: 100%;
        `

        const OrderContainer = styled(Grid).attrs({
          item: true
        })`
        && {
          flex-grow: 1;
        }
        `

        const Button = styled(MaterialButton).attrs({
          variant: 'contained',
          component: Link
        })`
          margin-left: ${({ theme }) => theme.spacing(2)}px;
        `

        export default withRouter(Footer)


class #123 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Footer: dynamic buttons
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/075/sistema-pedidos


Footer's buttons must have different actions depending on what page user is.


footer.js:

      insted of static:

              <Grid item>
                <Button to={HOME}>Change size</Button>
                <Button color='primary' to={CHOOSE_PIZZA_AMOUNT}>How many?</Button>
              </Grid>

      dynamic:

              <Grid item>
                {buttons.map((button) => (
                  <Button key={button.to} {...button} />
                ))}
              </Grid>



choose-pizza-flavours.js:

              <Footer
                buttons={[
                  {
                    to: HOME,
                    children: 'Change size'
                  },
                  {
                    to: CHOOSE_PIZZA_AMOUNT,
                    children: 'How many?'
                  }
                ]}
              />


class #124 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Choose Amount page: add footer
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/076/sistema-pedidos

page's buttons:

    -> change flavours
    -> finish order

JSX:

  <Footer
    buttons={[
      {
        to: CHOOSE_PIZZA_FLAVOURS,
        children: 'Change flavours'
      },

      {
        to: '/',
        children: 'Finish order',
        color: 'primary'
      }
    ]}
  />

class #125 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Footer: passing flavours data
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/077/sistema-pedidos

choose-pizza-size.js:

        <CardLink to={{
          pathname: CHOOSE_PIZZA_FLAVOURS,
          state: {
            pizzaSize: pizza
          }
        }}
        >

choose-pizza-flavours.js:

        const { flavours, id } = location.state.pizzaSize

        <Footer
          buttons={[
            {
              to: HOME,
              children: 'Change size'
            },
            {
              to: {
                pathname: CHOOSE_PIZZA_AMOUNT,
                state: {
                  ...location.state,
                  pizzaFlavours: [{
                    id: '',
                    name: ''
                  }]
                }
              },
              children: 'How many?',
              color: 'primary'
            }
          ]}
        />

        turning later into this:

                state: {
                  ...location.state,
                  pizzaFlavours: getFlavoursNameAndId(checkboxes)
                }


        with this:

                function getFlavoursNameAndId (checkboxes) {
                  return Object.entries(checkboxes)
                    .filter(([_, value]) => !!value)
                    .map(([id]) => ({
                      id,
                      name: pizzaFlavours.find((flavour) => flavour.id === id).name
                    }))
                }

footer.js:


                {pizzaFlavours && (
                  <Typography>
                    {singularOrPlural(pizzaFlavours.length, 'with flavour', 'with flavours')}{' '}
                    <b>{pizzaFlavours.map(({ name }) => name).join(', ')}</b>
                  </Typography>
                )}


class #126 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Footer: fixing backwards button at choose-pizza-amount's page
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/078/sistema-pedidos

choose-pizza-flavours.js:

      <Footer
        buttons={{
          back: {
            children: 'Change size'
          },

          action: {
            to: {
              pathname: CHOOSE_PIZZA_AMOUNT,
              state: {
                ...location.state,
                pizzaFlavours: getFlavoursNameAndId(checkboxes)
              }
            },
            children: 'How many?'
          }
        }}
      />

choose-pizza-amount.js:

        <Footer
          buttons={{
            back: {
              children: 'Change flavours'
            },

            action: {
              to: '/',
              children: 'Finish order'
            }
          }}
        />
      </>


footer.js:

          <Grid item>
            <Button
              {...buttons.back}
              component='a'
              onClick={(e) => {
                e.preventDefault()
                history.goBack()
              }}
            />

            <Button
              {...buttons.action}
              component={Link}
              color='primary'
            />
          </Grid>
        </Grid>


class #127 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Flavour selection have to be required, before next page
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/079/sistema-pedidos


choose-pizza-flavours.js:

      <Footer
        buttons={{
          back: {
            children: 'Change size'
          },

          action: {
            to: {
              pathname: CHOOSE_PIZZA_AMOUNT,
              state: {
                ...location.state,
                pizzaFlavours: getFlavoursNameAndId(checkboxes)
              }
            },
            children: 'How many?',
            disabled: checkboxesChecked(checkboxes).length === 0
          }
        }}
      />

      function checkboxesChecked (checkboxes) {
        return Object.values(checkboxes).filter(Boolean)
      }


class #128 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Footer: Buttons alignment
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/080/sistema-pedidos


ui/footer.js:

    <ButtonsContainer>
      <Button
        {...buttons.back}
        component='a'
        onClick={(e) => {
          e.preventDefault()
          history.goBack()
        }}
      />

      <Button
        {...buttons.action}
        component={Link}
        color='primary'
      />
    </ButtonsContainer>

    const ButtonsContainer = styled(Grid).attrs({
      item: true
    })`
      align-items: center;
      display: flex;
    `


class #129 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Redirect if page has no state
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/081/sistema-pedidos


choose-pizza-amount.js:

      import t from 'prop-types'
      import { Redirect } from 'react-router-dom'
      import { HOME } from 'routes'

      function ChoosePizzaAmount ({ location }) {
        if (!location.state) {
          return <Redirect to={HOME} />
        }
        return (

        ChoosePizzaAmount.propTypes = {
          location: t.object.isRequired
        }


class #130 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Quantity/Amount Input
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/082/sistema-pedidos

So far, user can set negative values as the amount of pizzas. Let's fix it.

choose-pizza-amount.js:



        <MainContent>
          <Input
            value={amount}
            onChange={handleChange}
            autofocus
          />
        </MainContent>

        function ChoosePizzaAmount ({ location }) {
          const [amount, setAmount] = useState(1)
          if (!location.state) {
            return <Redirect to={HOME} />
          }

          function handleChange (e) {
            const { value } = e.target

            if (value >= 1) {
              setAmount(e.target.value)
            }
          }
          return (...



NEW ROUTE CHECKOUT

import { HOME, CHECKOUT } from 'routes'


      <Footer
        buttons={{
          back: {
            children: 'Change flavours'
          },

          action: {
            to: CHECKOUT,
            children: 'Finish order'
          }
        }}
      />


src/routes.js:

      export const HOME = '/'
      export const LOGIN = '/login'
      export const CHOOSE_PIZZA_FLAVOURS = '/choose-pizza-flavours'
      export const CHOOSE_PIZZA_AMOUNT = '/choose-pizza-amount'
      export const CHECKOUT = '/checkout'

class #131 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Set second pizza
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/083/sistema-pedidos

choose-pizza-amount.js:

        <MainContent>

          ...

          <Button variant='contained' color='secondary'>
            Choose next pizza
          </Button>

        </MainContent>

class #132 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Checkout: data structure
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/084/sistema-pedidos

new CONTEXT: Order
also update CONTEXT: Auth
then new file index.js (contextx)

src/contexts/order.js

          import React, { createContext } from 'react'
          import t from 'prop-types'

          const OrderContext = createContext()

          function OrderProvider ({ children }) {
            return (
              <OrderContext.Provider value={{}}>
                {children}
              </OrderContext.Provider>
            )
          }

          OrderProvider.propTypes = {
            children: t.node.isRequired
          }

          export default { OrderProvider, OrderContext }

src/contexts/auth.js:

          import React, { createContext, useCallback, useState } from 'react'
          import t from 'prop-types'
          import firebase from 'services/firebase'

          const AuthContext = createContext()

          function AuthProvider ({ children }) {
            const [userInfo, setUserInfo] = useState({
              isUserLoggedIn: false,
              user: null
            })

            const handleLogin = useCallback(() => {
              const provider = new firebase.auth.GithubAuthProvider()
              firebase.auth().signInWithRedirect(provider)
            }, [])

            const handleLogout = useCallback(() => {
              firebase.auth().signOut().then(() => {
                console.log('logged out!')
                setUserInfo({
                  isUserLoggedIn: false,
                  user: null
                })
              })
            }, [])

            return (
              <AuthContext.Provider value={{ handleLogin, handleLogout, userInfo, setUserInfo }}>
                {children}
              </AuthContext.Provider>
            )
          }

          AuthProvider.propTypes = {
            children: t.node.isRequired
          }

          export default { AuthProvider, AuthContext }


src/contexts/index.js:

          export * from './auth'
          export * from './order'


src/root.js:

          import { AuthProvider, OrderProvider } from 'contexts'

          <AuthProvider>
            <OrderProvider>
              ...
            </OrderProvider>
          </AuthProvider>

class #133 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Structure to add extra pizza
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/085/sistema-pedidos


choose-pizza-amount.js:


      function addPizza () {
        addPizzaToOrder({
          size: location.state.pizzaSize.id,
          flavours: location.state.pizzaFlavours.map(f => f.id),
          amount
        })
      }


      <ButtonAddPizza to={HOME} onClick={addPizza}>
        Choose extra pizza
      </ButtonAddPizza>

      <Footer
        buttons={{
          back: {
            children: 'Change flavours'
          },

          action: {
            to: CHECKOUT,
            onClick: addPizza,
            children: 'Finish order'
          }
        }}
      />




class #134 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Saving a pizza at Context
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/086/sistema-pedidos


Reminder: separating the isolated states is a good practice!

Insdef of one single state:

      const [order, setOrder] = useState({})

Different states for each data:

      const [pizza, setPizza] = useState({})
      const [address, setAddress] = useState({})
      const [phone, setPhone] = useState({})

Reminder: Imutability and new arrays

      Do not use PUSH, use CONCAT!

      function addPizzaToOrder (pizza) {
        addPizza((piizas) => pizzas.concat(pizza))
      }




So, contexts/order.js:

          import React, { createContext, useState } from 'react'
          import t from 'prop-types'

          const OrderContext = createContext()

          function OrderProvider ({ children }) {
            const [pizzas, addPizza] = useState([])

            function addPizzaToOrder (pizza) {
              addPizza((piizas) => pizzas.concat(pizza))
            }

            return (
              <OrderContext.Provider value={{
                order: {
                  pizzas
                },
                addPizzaToOrder
              }}
              >
                {children}
              </OrderContext.Provider>
            )
          }

          OrderProvider.propTypes = {
            children: t.node.isRequired
          }

          export { OrderProvider, OrderContext }


Another hook to study later: useReducer



class #135 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Checkout Page
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/087/sistema-pedidos


src/pages/checkout

  index.js:

          export { default } from './checkout'


  checkout.js

          import React from 'react'
          import { Content } from 'ui'

          function Cehckout () {
            return (
              <Content>
                <h1>Checkout</h1>
              </Content>
            )
          }

          export default Cehckout


src/pages/main/main.js:


          import React, { Suspense } from 'react'
          import { Switch, Route } from 'react-router-dom'
          import { withStyles } from '@material-ui/core'
          import Header from './header'

          import * as routes from 'routes'

          const ChoosePizzaSize = React.lazy(() => import('pages/choose-pizza-size'))
          const ChoosePizzaFlavours = React.lazy(() => import('pages/choose-pizza-flavours'))
          const ChoosePizzaAmount = React.lazy(() => import('pages/choose-pizza-amount'))
          const Checkout = React.lazy(() => import('pages/checkout'))

          const Main = () => (
            <>
              <Header />

              <Spacer />

              <Suspense fallback='Loading...'>
                <Switch>
                  <Route
                    path={routes.HOME}
                    exact
                    component={ChoosePizzaSize}
                  />
                  <Route
                    path={routes.CHOOSE_PIZZA_FLAVOURS}
                    component={ChoosePizzaFlavours}
                  />
                  <Route
                    path={routes.CHOOSE_PIZZA_AMOUNT}
                    component={ChoosePizzaAmount}
                  />
                  <Route
                    path={routes.CHECKOUT}
                    component={Checkout}
                  />
                </Switch>
              </Suspense>
            </>
          )

          const style = (theme) => ({
            main: theme.mixins.toolbar
          })

          const Spacer = withStyles(style)(({ classes }) => (
            <div className={classes.main} />
          ))

          export default Main

class #136 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Checkout Page Markup
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/088/sistema-pedidos


pages/ckeckout.js:

            import React from 'react'
            import styled from 'styled-components'
            import {
              Grid,
              Paper
            } from '@material-ui/core'
            import {
              Content,
              Title as UiTitle
            } from 'ui'

            function Cehckout () {
              return (
                <Content>
                  <Grid container spacing={4}>
                    <Grid item xs={12} md={6}>
                      <Title>Whats the address to delivery?</Title>
                      <PaperContainer>
                        Address to delivery
                      </PaperContainer>

                      <Title>Whats is your phone number?</Title>
                      <PaperContainer>
                        Phone number
                      </PaperContainer>
                    </Grid>

                    <Grid container item xs={12} md={6} direction='column'>
                      <Title>Order details:</Title>
                      <PaperContainer>
                        Piizas
                      </PaperContainer>
                    </Grid>
                  </Grid>
                </Content>
              )
            }

            const Title = styled(UiTitle).attrs({
              variant: 'h6'
            })`
              text-align: left;
            `

            const PaperContainer = styled(Paper)`
              flex-grow: 1;
              margin-bottom: ${({ theme }) => theme.spacing(5)}px;
              padding: ${({ theme }) => theme.spacing(2)}px;
            `

            export default Cehckout

class #137 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Markup: address and phone fields
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/089/sistema-pedidos

From material-ui/core, TextField already comes with input text + label.

          import React from 'react'
          import t from 'prop-types'
          import styled from 'styled-components'
          import {
            Grid,
            Paper,
            TextField as MaterialTextField
          } from '@material-ui/core'
          import {
            Content,
            Title as UiTitle
          } from 'ui'

          function Cehckout () {
            return (
              <Content>
                <Grid container spacing={4}>
                  <Grid item xs={12} md={6}>
                    <Title>Whats the address to delivery?</Title>
                    <PaperContainer>
                      <Grid container spacing={2}>
                        <TextField label='Post Code' xs={4} autoFocus />
                        <Grid item xs={8} />
                        <TextField label='Street name' xs={9} />
                        <TextField label='Number' xs={3} />
                        <TextField label='Complement' xs={12} />
                        <TextField label='City' xs={9} />
                        <TextField label='State' xs={3} />
                      </Grid>
                    </PaperContainer>

                    <Title>Whats is your phone number?</Title>
                    <PaperContainer>
                      <TextField label='Phone Number' xs={4} />
                    </PaperContainer>
                  </Grid>

                  <Grid container item xs={12} md={6} direction='column'>
                    <Title>Order details:</Title>
                    <PaperContainer>
                      Piizas
                    </PaperContainer>
                  </Grid>
                </Grid>
              </Content>
            )
          }

          function TextField ({ xs, autoFocus, ...props }) {
            return (
              <Grid item xs={xs}>
                <MaterialTextField
                  fullWidth
                  variant='outlined'
                  inputProps={{
                    autoFocus
                  }}
                  {...props}
                />
              </Grid>
            )
          }

          TextField.propTypes = {
            autoFocus: t.bool,
            xs: t.number
          }

          const Title = styled(UiTitle).attrs({
            variant: 'h6'
          })`
            text-align: left;
          `

          const PaperContainer = styled(Paper)`
            flex-grow: 1;
            margin-bottom: ${({ theme }) => theme.spacing(5)}px;
            padding: ${({ theme }) => theme.spacing(2)}px;
          `

          export default Cehckout


class #138 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Checkout: Order Details
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/090/sistema-pedidos

pages/checkout.js:

              import React from 'react'
              import t from 'prop-types'
              import styled from 'styled-components'
              import {
                Grid,
                List,
                ListItem,
                Paper,
                TextField as MaterialTextField,
                Typography
              } from '@material-ui/core'
              import {
                Content,
                Title as UiTitle
              } from 'ui'
              import { useOrder } from 'hooks'
              import { singularOrPlural } from 'utils'

              function Cehckout () {
                const { order } = useOrder()

                return (
                  <Content>
                    <Grid container spacing={4}>
                      <Grid item xs={12} md={6}>
                        <Title>Whats the address to delivery?</Title>
                        <PaperContainer>
                          <Grid container spacing={2}>
                            <TextField label='Post Code' xs={4} autoFocus />
                            <Grid item xs={8} />
                            <TextField label='Street name' xs={9} />
                            <TextField label='Number' xs={3} />
                            <TextField label='Complement' xs={12} />
                            <TextField label='City' xs={9} />
                            <TextField label='State' xs={3} />
                          </Grid>
                        </PaperContainer>

                        <Title>Whats is your phone number?</Title>
                        <PaperContainer>
                          <TextField label='Phone Number' xs={4} />
                        </PaperContainer>
                      </Grid>

                      <Grid container item xs={12} md={6} direction='column'>
                        <Title>Order details:</Title>
                        <PaperContainer>
                          <List>
                            {order.pizzas.map((pizza, index) => {
                              const { pizzaFlavours, pizzaSize, amount } = pizza
                              const { name, slices, flavours } = pizzaSize
                              return (
                                <ListItem key={index}>
                                  <Typography>
                                    {amount} {' '}
                                    {singularOrPlural(amount, 'pizza', 'pizzas')} {' '}
                                    <b>{name.toUpperCase()}</b> {'- '}
                                    ({slices} slices,{' '}
                                    {flavours} {singularOrPlural(flavours, 'flavour', 'flavours')})

                                    <br />

                                    {singularOrPlural(pizzaFlavours.length, 'with flavour', 'with flavours')}{' '}
                                    <b>{pizzaFlavours.map(({ name }) => name).join(', ')}</b>
                                  </Typography>
                                </ListItem>
                              )
                            })}
                          </List>
                        </PaperContainer>
                      </Grid>
                    </Grid>
                  </Content>
                )
              }

              function TextField ({ xs, autoFocus, ...props }) {
                return (
                  <Grid item xs={xs}>
                    <MaterialTextField
                      fullWidth
                      variant='outlined'
                      inputProps={{
                        autoFocus
                      }}
                      {...props}
                    />
                  </Grid>
                )
              }

              TextField.propTypes = {
                autoFocus: t.bool,
                xs: t.number
              }

              const Title = styled(UiTitle).attrs({
                variant: 'h6'
              })`
                text-align: left;
              `

              const PaperContainer = styled(Paper)`
                flex-grow: 1;
                margin-bottom: ${({ theme }) => theme.spacing(5)}px;
                padding: ${({ theme }) => theme.spacing(2)}px;
              `

              export default Cehckout


class #139 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Checkout custom Header
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/091/sistema-pedidos


header.js:


          import React from 'react'
          import styled from 'styled-components'
          import { Route, Switch } from 'react-router-dom'
          import {
            AppBar,
            Toolbar as MaterialToolbar
          } from '@material-ui/core'
          import HeaderCommon from './header-common'
          import HeaderCheckout from './header-checkout'
          import { CHECKOUT } from 'routes'

          const Header = () => (
            <AppBar>
              <Toolbar>
                <Switch>
                  <Route path={CHECKOUT} component={HeaderCheckout} />
                  <Route component={HeaderCommon} />
                </Switch>
              </Toolbar>
            </AppBar>
          )

          const Toolbar = styled(MaterialToolbar)`
            margin: 0 auto;
            max-width: ${({ theme }) => theme.breakpoints.values.lg}px;
            width: 100%;
          `

          export default Header



header-checkout.js:

          import React from 'react'
          import styled from 'styled-components'
          import Logo from './logo'

          function HeaderCheckout () {
            return (
              <LogoContainer>
                <Logo />
              </LogoContainer>
            )
          }

          const LogoContainer = styled.div`
            display: flex;
            justify-content: center;
            flex-grow: 1;
          `

          export default HeaderCheckout




header-common.js:


          import React, { useState } from 'react'
          import styled from 'styled-components'
          import { Link } from 'react-router-dom'
          import {
            IconButton,
            Menu,
            MenuItem,
            Typography
          } from '@material-ui/core'
          import { AccountCircle } from '@material-ui/icons'
          import Logo from './logo'
          import { useAuth } from 'hooks'
          import { HOME } from 'routes'

          function HeaderCommon () {
            const { userInfo, handleLogout } = useAuth()

            const [anchorElement, setAnchorElement] = useState(null)

            const handleOpenMenu = (e) => {
              setAnchorElement(e.target)
            }

            const handleCloseMenu = () => {
              setAnchorElement(null)
            }

            return (
              <>
                <LogoContainer>
                  <LinkLogo to={HOME}>
                    <Logo />
                  </LinkLogo>
                </LogoContainer>

                <Typography color='inherit'>
                  Hi, {userInfo.user.firstName}
                </Typography>

                <IconButton color='inherit' onClick={handleOpenMenu}>
                  <AccountCircle />
                </IconButton>

                <Menu
                  open={Boolean(anchorElement)}
                  onClose={handleCloseMenu}
                  anchorEl={anchorElement}
                >
                  <MenuItem onClick={handleLogout}>
                    Logout
                  </MenuItem>
                </Menu>
              </>
            )
          }

          const LogoContainer = styled.div`
            flex-grow: 1;
          `

          const LinkLogo = styled(Link)`
            display: inline-block;
          `

          const Logo = styled(MainLogo)`
            height: 50px;
            width: 200px;

            & path {
              fill: ${({ theme }) => theme.palette.common.white};
            }

            & line {
              stroke: ${({ theme }) => theme.palette.common.white};
            }
          `

          export default HeaderCommon




logo.js:

          import styled from 'styled-components'
          import { ReactComponent as MainLogo } from 'images/logo-react-zzaria.svg'

          const Logo = styled(MainLogo)`
            height: 50px;
            width: 200px;

            & path {
              fill: ${({ theme }) => theme.palette.common.white};
            }

            & line {
              stroke: ${({ theme }) => theme.palette.common.white};
            }
          `

          export default Logo


class #140 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Custom Footer: checkout page or not
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/092/sistema-pedidos

Passing or not passing data to Footer component: checkout page doesn't need this data.

cool short circuit:

      insted of:

          {children ? children : <FooterWithOrderAndButtons {...props} />}

      use this:

          {children || <FooterWithOrderAndButtons {...props} />}


ui/footer/footer.js:

          import React from 'react'
          import t from 'prop-types'
          import styled from 'styled-components'
          import { Container } from '@material-ui/core'
          import FooterWithOrderAndButtons from './footer-with-order-and-buttons'

          const Footer = ({ children, ...props }) => (
            <FooterContent>
              <Container>
                {children || <FooterWithOrderAndButtons {...props} />}
              </Container>
            </FooterContent>
          )

          Footer.propTypes = {
            children: t.node
          }

          const FooterContent = styled.footer`
            box-shadow: 0 0 3px ${({ theme, checked }) => theme.palette.grey[400]};
            padding: ${({ theme }) => theme.spacing(3)}px;
            width: 100%;
          `

          export default Footer


ui/footer/footer-with-order-and-buttons.js:

            import React from 'react'
            import t from 'prop-types'
            import { withRouter, Link } from 'react-router-dom'
            import styled from 'styled-components'
            import {
              Button as MaterialButton,
              Grid,
              Typography
            } from '@material-ui/core'
            import { useAuth } from 'hooks'
            import { singularOrPlural } from 'utils'

            function FooterWithOrderAndButtons ({ buttons, history, location }) {
              const { userInfo } = useAuth()

              const { pizzaSize, pizzaFlavours } = location.state
              const { flavours, name, slices } = pizzaSize

              console.log('pizzaFlavours: ', pizzaFlavours)

              return (
                <Grid container>
                  <OrderContainer>
                    <Typography>
                      <b>{userInfo.user.firstName}, seu pedido é:</b>
                    </Typography>

                    <Typography>
                      Pizza <b>{name.toUpperCase()}</b> {'- '}
                      ({slices} slices,{' '}
                      {flavours} {singularOrPlural(flavours, 'flavour', 'flavours')})
                    </Typography>

                    {pizzaFlavours && (
                      <Typography>
                        {singularOrPlural(pizzaFlavours.length, 'with flavour', 'with flavours')}{' '}
                        <b>{pizzaFlavours.map(({ name }) => name).join(', ')}</b>
                      </Typography>
                    )}

                  </OrderContainer>

                  <ButtonsContainer>
                    <Button
                      {...buttons.back}
                      component='a'
                      onClick={(e) => {
                        e.preventDefault()
                        history.goBack()
                      }}
                    />

                    <Button
                      {...buttons.action}
                      component={Link}
                      color='primary'
                    />
                  </ButtonsContainer>
                </Grid>
              )
            }

            FooterWithOrderAndButtons.propTypes = {
              buttons: t.object.isRequired,
              history: t.object.isRequired,
              location: t.object.isRequired
            }

            const OrderContainer = styled(Grid).attrs({
              item: true
            })`
            && {
              flex-grow: 1;
            }
            `

            const ButtonsContainer = styled(Grid).attrs({
              item: true
            })`
              align-items: center;
              display: flex;
            `

            const Button = styled(MaterialButton).attrs({
              variant: 'contained'
            })`
              margin-left: ${({ theme }) => theme.spacing(2)}px;
            `

            export default withRouter(FooterWithOrderAndButtons)


src/pages/checkout/checkout.js:

            import React from 'react'
            import t from 'prop-types'
            import styled from 'styled-components'
            import {
              Grid,
              List,
              ListItem,
              Paper,
              TextField as MaterialTextField,
              Typography
            } from '@material-ui/core'
            import {
              Content,
              Footer,
              Title as UiTitle
            } from 'ui'
            import { useOrder } from 'hooks'
            import { singularOrPlural } from 'utils'

            function Cehckout () {
              const { order } = useOrder()

              return (
                <>
                  <Content>
                    <Grid container spacing={4}>
                      <Grid item xs={12} md={6}>
                        <Title>Whats the address to delivery?</Title>
                        <PaperContainer>
                          <Grid container spacing={2}>
                            <TextField label='Post Code' xs={4} autoFocus />
                            <Grid item xs={8} />
                            <TextField label='Street name' xs={9} />
                            <TextField label='Number' xs={3} />
                            <TextField label='Complement' xs={12} />
                            <TextField label='City' xs={9} />
                            <TextField label='State' xs={3} />
                          </Grid>
                        </PaperContainer>

                        <Title>Whats is your phone number?</Title>
                        <PaperContainer>
                          <TextField label='Phone Number' xs={4} />
                        </PaperContainer>
                      </Grid>

                      <Grid container item xs={12} md={6} direction='column'>
                        <Title>Order details:</Title>
                        <PaperContainer>
                          <List>
                            {order.pizzas.map((pizza, index) => {
                              const { pizzaFlavours, pizzaSize, amount } = pizza
                              const { name, slices, flavours } = pizzaSize
                              return (
                                <ListItem key={index}>
                                  <Typography>
                                    {amount} {' '}
                                    {singularOrPlural(amount, 'pizza', 'pizzas')} {' '}
                                    <b>{name.toUpperCase()}</b> {'- '}
                                    ({slices} slices,{' '}
                                    {flavours} {singularOrPlural(flavours, 'flavour', 'flavours')})

                                    <br />

                                    {singularOrPlural(pizzaFlavours.length, 'with flavour', 'with flavours')}{' '}
                                    <b>{pizzaFlavours.map(({ name }) => name).join(', ')}</b>
                                  </Typography>
                                </ListItem>
                              )
                            })}
                          </List>
                        </PaperContainer>
                      </Grid>
                    </Grid>
                  </Content>

                  <Footer>
                    Footer do checkout
                  </Footer>
                </>
              )
            }

            function TextField ({ xs, autoFocus, ...props }) {
              return (
                <Grid item xs={xs}>
                  <MaterialTextField
                    fullWidth
                    variant='outlined'
                    inputProps={{
                      autoFocus
                    }}
                    {...props}
                  />
                </Grid>
              )
            }

            TextField.propTypes = {
              autoFocus: t.bool,
              xs: t.number
            }

            const Title = styled(UiTitle).attrs({
              variant: 'h6'
            })`
              text-align: left;
            `

            const PaperContainer = styled(Paper)`
              flex-grow: 1;
              margin-bottom: ${({ theme }) => theme.spacing(5)}px;
              padding: ${({ theme }) => theme.spacing(2)}px;
            `

            export default Cehckout

class #141 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Checkout's Footer
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/093/sistema-pedidos


checkout.js / footer:

      <Footer>
        <FooterContent>
          <Button variant='contained' color='primary'>
            Confirm data
          </Button>
        </FooterContent>
      </Footer>

      const FooterContent = styled.div`
        display: flex;
        justify-content: flex-end;
      `


max-width main content area:

ui/content.js: getting the Container from material-ui

          import React from 'react'
          import t from 'prop-types'
          import styled from 'styled-components'
          import { Container } from '@material-ui/core'

          const Content = ({ children, ...props }) => (
            <Main {...props}>
              <Container>
                {children}
              </Container>
            </Main>
          )

          Content.propTypes = {
            children: t.node.isRequired
          }
          const Main = styled.main`
            flex-grow: 1;
            padding: ${({ theme }) => theme.spacing(3)}px;
          `

          export default Content

class #142 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Page Order confirmation 
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/094/sistema-pedidos


Daciuk routine of every new pages:

- new folder
- new files: index + named
- set index file
- set the most basic named file, which looks like:

          import React from 'react'

          function CheckoutConfirmation () {
            return (
              <Content>
                checkout confirmation
              </Content>
            )
          }

          export default CheckoutConfirmation

- set the route at main.js:

    the dynamic import using lazy:

        const CheckoutConfirmation = React.lazy(() => import('pages/checkout/submit-order'))

    the route tag itself:

        <Route
          path={routes.CHECKOUT_CONFIRMATION}
          component={CheckoutConfirmation}
        />

- set the route const at routes.js:

        export const CHECKOUT_CONFIRMATION = '/checkout/submit-order'

    But in this case, better:

        export const CHECKOUT_CONFIRMATION = `${CHECKOUT}/submit-order`

    Also, in this case, we must avoid undesirable matches: /checkout/

    Add exact in the /checkout/ tag route:

        <Route
          path={routes.CHECKOUT}
          exact
          component={Checkout}
        />

- set the <Link> (from 'react-router-dom') in the page that will move the user to this new rote, containing props 'component={}' plus 'to={}'

        import { Link } from 'react-router-dom'

        <Button
          compomemt={Link}
          to={CHECKOUT_CONFIRMATION}
        >
          Confirm data
        </Button>

class #143 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Header - Order Confirmation
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/094/sistema-pedidos

checkout-confirmation.js:

          import React from 'react'
          import styled from 'styled-components'
          import { Typography } from '@material-ui/core'
          import {
            Content,
            H4
          } from 'ui'
          import { useAuth } from 'hooks'

          function CheckoutConfirmation () {
            const { userInfo } = useAuth()
            return (
              <Content>
                <Header>
                  <H4>Oi, {userInfo.user.firstName}</H4>
                  <Typography>Could you please confirm the order and your address details?</Typography>
                </Header>
              </Content>
            )
          }

          const Header = styled.div`
            display: flex;
            flex-direction: column;
            justify-content: center;
            margin-bottom: ${({ theme }) => theme.spacing(3)}px;
            text-align: center;
          `

          export default CheckoutConfirmation


class #144 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Order Confirmation: setting content
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/095/sistema-pedidos

checkout-confirmation.js:

          import React from 'react'
          import styled from 'styled-components'
          import {
            Container,
            Paper,
            Typography
          } from '@material-ui/core'
          import {
            Content,
            H4,
            OrderInfo
          } from 'ui'
          import { useAuth } from 'hooks'

          function CheckoutConfirmation () {
            const { userInfo } = useAuth()
            return (
              <Content>
                <Header>
                  <H4>Oi, {userInfo.user.firstName}</H4>
                  <Typography>Could you please confirm the order and your address details?</Typography>
                </Header>

                <Container maxWidth='sm'>
                  <PaperContainer>
                    <Typography variant='h6'>Your order</Typography>
                    <OrderInfo />
                  </PaperContainer>
                </Container>
              </Content>
            )
          }

          const Header = styled.div`
            display: flex;
            flex-direction: column;
            justify-content: center;
            margin-bottom: ${({ theme }) => theme.spacing(3)}px;
            text-align: center;
          `

          const PaperContainer = styled(Paper)`
            padding: ${({ theme }) => theme.spacing(3)}px
          `

          export default CheckoutConfirmation


class #145 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Adding Address and Phone at checkout-confirmation.js
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/096/sistema-pedidos

checkout-confirmation.js:

            return (
              <Content>
                <Header>
                  <H4>Oi, {userInfo.user.firstName}</H4>
                  <Typography>Could you please confirm the order and your address details?</Typography>
                </Header>

                <Container maxWidth='sm'>
                  <PaperContainer>
                    <H6>Your order</H6>
                    <OrderInfo />

                    <Divider />

                    <H6>Delivery address:</H6>
                    <Typography>1 Street Code, 01100011</Typography>

                    <Divider />

                    <H6>Contact phone number:</H6>
                    <Typography>(11) 9999 999 99</Typography>

                  </PaperContainer>
                </Container>
              </Content>
            )

class #146 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Confirmation page: footer
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/097/sistema-pedidos


cool short circuit inside styled component:

          const FooterContent = styled.div`
            display: flex;
            justify-content: ${({ justifyContent }) => justifyContent || 'flex-end'};
          `

footer-checkout.js:

          import React from 'react'
          import t from 'prop-types'
          import styled from 'styled-components'
          import { Footer } from 'ui'

          function FooterCheckout ({ children, justifyContent }) {
            return (
              <Footer>
                <FooterContent justifyContent={justifyContent}>
                  {children}
                </FooterContent>
              </Footer>
            )
          }

          FooterCheckout.propTypes = {
            children: t.node.isRequired,
            justifyContent: t.string
          }

          const FooterContent = styled.div`
            display: flex;
            justify-content: ${({ justifyContent }) => justifyContent || 'flex-end'};
          `

          export default FooterCheckout


this deserve a second close up look:

footer-checkout.js:

  const FooterContent = styled.div`
    justify-content: ${({ justifyContent }) => justifyContent || 'flex-end'};
  `
checkout-confirmation.js:

      <FooterCheckout justifyContent='center'>

      </FooterCheckout>

checkout.js:

      <FooterCheckout>

      </FooterCheckout>


class #147 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Order Successful
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/099/sistema-pedidos

new route:

  src/routes.js:

      export const CHECKOUT_SUCCESS = `${CHECKOUT}/success`

  src/pages/main/main.js:

        const CheckoutSuccess = React.lazy(() => import('pages/checkout-success'))

        <Route
          path={routes.CHECKOUT_SUCCESS}
          component={CheckoutSuccess}
        />


New Folder:
pages/checkout-success

  index.js:

        export { default } from './checkout-success'

  checkout-success.js: BUT WILL CHANGE

        import React from 'react'
        import { Link } from 'react-router-dom'
        import styled from 'styled-components'
        import {
          Button,
          Container,
          Divider as MaterialDivider,
          Paper,
          Typography
        } from '@material-ui/core'
        import {
          Content,
          H4,
          H6,
          OrderInfo
        } from 'ui'
        import { useAuth } from 'hooks'
        import FooterCheckout from 'pages/checkout/footer-checkout'
        import { HOME } from 'routes'

        function CheckoutSuccess () {
          const { userInfo } = useAuth()
          return (
            <>
              <Content>
                <Header>
                  <H4>There you go, {userInfo.user.firstName}!</H4>
                  <Typography>Your order is being prepared and will be delivered in up to:</Typography>

                  <H6>40 minutes</H6>
                </Header>

                <Container maxWidth='sm'>
                  <PaperContainer>
                    <H6>Your order</H6>
                    <OrderInfo />

                    <Divider />

                    <H6>Delivery address:</H6>
                    <Typography>1 Street Code, 01100011</Typography>

                    <Divider />

                    <H6>Contact phone number:</H6>
                    <Typography>(11) 9999 999 99</Typography>

                  </PaperContainer>
                </Container>
              </Content>

              <FooterCheckout justify-content='center'>
                <Button
                  color='secondary'
                  size='large'
                  component={Link}
                  to={HOME}
                >
                  {'<'} Back to home
                </Button>
              </FooterCheckout>
            </>
          )
        }

        const Header = styled.div`
          display: flex;
          flex-direction: column;
          justify-content: center;
          margin-bottom: ${({ theme }) => theme.spacing(3)}px;
          text-align: center;
        `

        const PaperContainer = styled(Paper)`
          padding: ${({ theme }) => theme.spacing(3)}px
        `

        const Divider = styled(MaterialDivider)`
          margin: ${({ theme }) => theme.spacing(2, 3)}
        `

        export default CheckoutSuccess


class #148 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Fixing a bug
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/099/sistema-pedidos

Even after finishing one order, if user get's back to the home to include later another pizza, the previous one which was already ordered will still be in the state and will be counted as another order.


src/contexts/order.js

- the application starts with no pizza stored in the contexts:

      const [pizzas, addPizza] = useState([])

each new order, we concat the new one in the array:

      function addPizzaToOrder (pizza) {
        addPizza((piizas) => pizzas.concat(pizza))
      }

If the user gets back to home without refresh the page, our context will still keep those previous pizzas.

How to clean up the context?



new code:

src/contexts/order.js

    function sendOrder () {
      console.log('send order')
    }

    <OrderContext.Provider value={{
      order: {
        pizzas
      },
      addPizzaToOrder,
      sendOrder
    }}
    >

src/pages/checkout-confirmation.js

    import { useAuth, useOrder } from 'hooks'

    const { sendOrder } = useOrder()

    <FooterCheckout justifyContent='center'>
      <Button
        variant='contained'
        color='primary'
        size='large'
        component={Link}
        to={CHECKOUT_SUCCESS}
        onClick={sendOrder}
      >
        Validate
      </Button>
    </FooterCheckout>


BUT....


This code bellow is not exactly what we need:

    function sendOrder () {
      console.log('send order')
      addPizza([])
    }

Why? Because the next page of checkout-success.js is still expecting the state 'pizzas' to display what user just ordered. That way, the field gets blank.

How about another state?

  const [orderInProgress, setOrderInProgress] = useState(false)

  function addPizzaToOrder (pizza) {
    if (orderInProgress) {
      return addPizza((piizas) => pizzas.concat(pizza))
    }
    setOrderInProgress(true)
    addPizza([pizza])
  }

  In case is the very first order or user today, orderInProgress is false and code inside condition won't get executed. So first pizza will be set inside the state alone in the array. Before that, orderInProgress will get bool true.

  So next time, next pizzas will be concated in the array, until the user gets done in the checkout success. Nice.


class #149 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Fixing Double Order Bug
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/100/sistema-pedidos

The bug:

  If user moves from page amount, by clicking in "Finish order", and after opening the next page "Checkout" decides to go backwards by cliking in his browser's back button, then if he clicks again in "Finish order" he will be adding a second same pizza in his cart.

  The button "Finish order" has:

        <Footer
          buttons={{
            back: {
              children: 'Change flavours'
            },

            action: {
              to: CHECKOUT,
              onClick: addPizza,
              children: 'Finish order'
            }
          }}
        />

  Which triggers:

        function addPizza () {
          addPizzaToOrder({
            ...location.state,
            amount
          })
        }

  And then all data in the location.state gets delivered to pizza array:

    function addPizzaToOrder (pizza) {
      if (orderInProgress) {
        return addPizza((piizas) => pizzas.concat(pizza))
      }
      setOrderInProgress(true)
      addPizza([pizza])
    }


Daciuk's solution here is to let the user remove pizzas if eventually he get's any duplication.


src/ui/order-info.js:

    import { IconButton } from '@material-ui/core'
    import { Close } from '@material-ui/icons'

    <IconButton title='Remove' color='secondary'>
      <Close />
    </IconButton>

    const ListItem = styled(MaterialListItem)`
      && {
        display: flex;
        justify-content: space-between;
      }
    `

class #150 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Prevent Remove Button from display in other pages
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/101/sistema-pedidos

src/ui/order-info.js:

showOptions prop:

          function OrderInfo ({ showOptions }) { }

          {showOptions && (
            <IconButton title='Remove' color='secondary'>
              <Close />
            </IconButton>
          )}

          OrderInfo.propTypes = {
            showOptions: t.bool
          }

src/pages/checkout/chekout.js:

          <PaperContainer>
            <OrderInfo showOptions />
          </PaperContainer>


class #151 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Remove Pizza: logic
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/102/sistema-pedidos


src/contexts/order.js

    function removePizzaFromOrder (id) {
      
    }

    <OrderContext.Provider value={{
      order: {
        pizzas
      },
      addPizzaToOrder,
      removePizzaFromOrder,
      sendOrder
    }}
    >
      {children}
    </OrderContext.Provider>



src/ui/order-info.js:

    const { order, removePizzaFromOrder } = useOrder()

    <IconButton
      title='Remove'
      color='secondary'
      onClick={() => removePizzaFromOrder(pizza.id)}
    >
      <Close />
    </IconButton>

But we still have no ID for those pizzzas. Let's install UUID

yarn add uuid --exact


src/contexts/order.js:

      import { v4 as uuidv4 } from 'uuid'

uuidv4()

      function addPizzaToOrder (pizza) {
        
        if (orderInProgress) {
          return addPizza((piizas) => pizzas.concat({ id: uuidv4(), ...pizza}))
        }
        setOrderInProgress(true)
        addPizza([{ id: uuidv4(), ...pizza}])
      }

or better:

      function addPizzaToOrder (pizza) {
        if (orderInProgress) {
          return addPizza((piizas) => pizzas.concat(newPizza(pizza)))
        }
        setOrderInProgress(true)
        addPizza([newPizza(pizza)])
      }

      function newPizza (pizza) {
        return {
          id: uuidv4(),
          ...pizza
        }
      }


      Then finally....

        function removePizzaFromOrder (id) {
          addPizza((pizzas) => pizzas.filter(p => p.id !== id))
        }


        If the id passed in the parameter is not equal to any p.id, filter will return true and the item will be included in the new array. If the id is equal to p.id, then filter returns false and this item won't be included in the array.


class #152 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Small Refactoring
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/103/sistema-pedidos


checkout.js

  if no pizza on the basket, user have to get redirected.

        import { Redirect } from 'react-router-dom'
        import { HOME } from 'routes'
        import { useOrder } from 'hooks'

        function Checkout () {
          const { order } = useOrder()

          if (!order.pizzas.length) {
            return <Redirect to={HOME} />
          }

          ...
        }

class #153 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Form address isolation
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/104/sistema-pedidos

src/pages/checkout/form-address.js

              import React from 'react'
              import {
                Grid
              } from '@material-ui/core'
              import TextField from './text-field'

              function FormAddress () {
                return (
                  <Grid container spacing={2}>
                    <TextField label='Post Code' xs={4} autoFocus />
                    <Grid item xs={8} />
                    <TextField label='Street name' xs={9} />
                    <TextField label='Number' xs={3} />
                    <TextField label='Complement' xs={12} />
                    <TextField label='City' xs={9} />
                    <TextField label='State' xs={3} />
                  </Grid>
                )
              }

              export default FormAddress




src/pages/checkout/checkout.js

              import React from 'react'
              import styled from 'styled-components'
              import { Link, Redirect } from 'react-router-dom'
              import {
                Button,
                Grid,
                Paper
              } from '@material-ui/core'
              import {
                Content,
                OrderInfo,
                Title as UiTitle
              } from 'ui'
              import FooterCheckout from 'pages/checkout/footer-checkout'
              import FormAddress from './form-address'
              import TextField from './text-field'
              import { CHECKOUT_CONFIRMATION, HOME } from 'routes'
              import { useOrder } from 'hooks'

              function Checkout () {
                const { order } = useOrder()

                if (!order.pizzas.length) {
                  return <Redirect to={HOME} />
                }

                return (
                  <>
                    <Content>
                      <Grid container spacing={4}>
                        <Grid item xs={12} md={6}>
                          <Title>Whats the address to delivery?</Title>
                          <PaperContainer>
                            <FormAddress />
                          </PaperContainer>

                          <Title>Whats is your phone number?</Title>
                          <PaperContainer>
                            <TextField label='Phone Number' xs={4} />
                          </PaperContainer>
                        </Grid>

                        <Grid container item xs={12} md={6} direction='column'>
                          <Title>Order details:</Title>
                          <PaperContainer>
                            <OrderInfo showOptions />
                          </PaperContainer>
                        </Grid>
                      </Grid>
                    </Content>

                    <FooterCheckout>
                      <Button
                        variant='contained'
                        color='primary'
                        component={Link}
                        to={CHECKOUT_CONFIRMATION}
                      >
                        Confirm
                      </Button>
                    </FooterCheckout>
                  </>
                )
              }

              const Title = styled(UiTitle).attrs({
                variant: 'h6'
              })`
                text-align: left;
              `

              const PaperContainer = styled(Paper)`
                flex-grow: 1;
                margin-bottom: ${({ theme }) => theme.spacing(5)}px;
                padding: ${({ theme }) => theme.spacing(2)}px;
              `

              export default Checkout




src/pages/checkout/text-field.js

              import React from 'react'
              import t from 'prop-types'
              import {
                Grid,
                TextField as MaterialTextField
              } from '@material-ui/core'

              function TextField ({ xs, autoFocus, ...props }) {
                return (
                  <Grid item xs={xs}>
                    <MaterialTextField
                      fullWidth
                      variant='outlined'
                      inputProps={{
                        autoFocus
                      }}
                      {...props}
                    />
                  </Grid>
                )
              }

              TextField.propTypes = {
                autoFocus: t.bool,
                xs: t.number
              }

              export default TextField


class #154 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Postcode's mask: using RegEx to avoid wrong characters
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/105/sistema-pedidos

src/pages/form-address.js:

      const [postcode, setPostcode] = useState('')

      function handleChangePostcode (e) {
        setPostcode(postcodeMask(e.target.value))
      }

      function postcodeMask (value) {
        return value
          .replace(/\D+/g, '')
          .replace(/(\d{5})(\d)/, '$1-$2')
          .replace(/(-\d{3})\d+?$/, '$1')
      }

      <TextField
        label='Post Code'
        xs={4}
        autoFocus
        value={postcode}
        onChange={handleChangePostcode}
      />

      DISCLAIMER:
      In case you are a non-Brazilian having a look at this Git repository, mind that we are using here the Brazilian postcode format, which is 5 numbers plus a dash plus 3 final numbers (12345-123). The mask we got to achieve this format is that:

      function postcodeMask (value) {
        return value
          .replace(/\D+/g, '')
          .replace(/(\d{5})(\d)/, '$1-$2')
          .replace(/(-\d{3})\d+?$/, '$1')
      }

Form Masks with vanilla Javascript
https://www.youtube.com/watch?v=r-8isv_TnVA


class #155 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Brazilian Postcode API: Autofill the street and cia. (part 1: fetch)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/106/sistema-pedidos

form-address.js:

Wrong approach:

          useEffect(() => {

            console.log('search postcode: ', postcode)

          }, [postcode])

Why? We want to search only when postcode reaches all characters it should have. So we will use:

          useEffect(() => {
            function fetchAddress () {
              if (postcode.length < 9) {
                return
              }
              console.log('buscar cep: ', postcode)
            }
            fetchAddress()
          }, [postcode])

API documentation:
https://apicep.com/api-de-consulta/

Example:
https://ws.apicep.com/cep/06233-030.json


fetch()

        useEffect(() => {
          async function fetchAddress () {
            if (postcode.length < 9) {
              return
            }
            const data = await fetch(
              `https://ws.apicep.com/cep/${postcode}.json`
            )
            const result = await data.json()
            console.log('address: ', result)
          }
          fetchAddress()
        }, [postcode])



class #156 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
useReducer Hook
Brazilian Postcode API: Autofill the street and cia. (part 2: filling the fields)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/108/sistema-pedidos

What's the best approach to fill all the fields once we get the api's response?

Should we have states for each data in the form?

      const [address, setAddress] = useState({})
      const [number, setNumber] = useState('')
      const [city, setCity] = useState({})
      const [country, setCountry] = useState('')

useReducer will make things easier.

Reducers reminder:
      -> Dispatch
      Reducer functions must be pure: no api request, no mutability, no change external vars, etc.



form-address.js:

          import React, { useState, useEffect, useReducer } from 'react'
          import {
            Grid
          } from '@material-ui/core'
          import TextField from './text-field'

          function FormAddress () {
            const [postcode, setPostcode] = useState('')
            const [addressState, dispatch] = useReducer(reducer, initialState)

            console.log('addressState:', addressState)

            useEffect(() => {
              async function fetchAddress () {
                if (postcode.length < 9) {
                  return
                }
                const data = await fetch(
                  `https://ws.apicep.com/cep/${postcode}.json`
                )
                const result = await data.json()

                dispatch({
                  type: 'UPDATE_FULL_ADDRESS',
                  payload: result
                })
              }
              fetchAddress()
            }, [postcode])

            function handleChangePostcode (e) {
              setPostcode(postcodeMask(e.target.value))
            }

            function postcodeMask (value) {
              return value
                .replace(/\D+/g, '')
                .replace(/(\d{5})(\d)/, '$1-$2')
                .replace(/(-\d{3})\d+?$/, '$1')
            }

            return (
              <Grid container spacing={2}>
                <TextField
                  label='Post Code'
                  xs={4}
                  autoFocus
                  value={postcode}
                  onChange={handleChangePostcode}
                />
                <Grid item xs={8} />
                <TextField label='Street name' xs={9} />
                <TextField label='Number' xs={3} />
                <TextField label='Complement' xs={12} />
                <TextField label='City' xs={9} />
                <TextField label='State' xs={3} />
              </Grid>
            )
          }

          function reducer (state, action) {
            console.log(action)
            if (action.type === 'UPDATE_FULL_ADDRESS') {
              return {
                ...state,
                ...action.payload
              }
            }
            return state
          }

          const initialState = {
            code: '',
            address: '',
            number: '',
            district: '',
            complement: '',
            city: '',
            state: '',
            error: null
          }

          export default FormAddress


class #157 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Form: logic rules
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/108/sistema-pedidos

markup refactoring:

insted of:

      <TextField label='Street name' xs={9} />
      <TextField label='Number' xs={3} />
      <TextField label='Complement' xs={12} />
      <TextField label='City' xs={9} />
      <TextField label='State' xs={3} />

have this map:

            {[
              {
                label: 'Street name',
                xs: 9,
                name: 'address'
              },
              {
                label: 'Number',
                xs: 3,
                name: 'number'
              },
              {
                label: 'Complement',
                xs: 12,
                name: 'complement'
              },
              {
                label: 'City',
                xs: 9,
                name: 'city'
              },
              {
                label: 'State',
                xs: 3,
                name: 'state'
              }
            ].map((field) => (
              <TextField
                {...field}
                key={field.name}
                value={addressState[field.name]}
                onChange={handleChangeField}
              />
            ))}


- Freezing fields while postcode is being found

        const [fetchingPostcode, setFetchingPostcode] = useState(false)

        setFetchingPostcode(true) <- running inside fetchAddress()

        include message:

              <Grid item xs={8}>
                {fetchingPostcode && 'Loading postcode...'}


        then while is fetching, fields get disabled:

              <TextField
                disabled={fetchingPostcode}
              />


Make it prettier:

      import { CircularProgress } from '@material-ui/core'

      {fetchingPostcode && <CircularProgress size={20} />}


class #158 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Form Actions
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/109/sistema-pedidos


So far, after last class, fields can't be edited.

-  handleChangeField(e)

- write another action for reducer

        function handleChangeField (e) {
          const { name, value } = e.target

          dispatch({
            type: 'UPDATE_FIELD',
            payload: { name, value }
          })
        }
        
- include it on reducer:


        function reducer (state, action) {
          console.log(action)
          if (action.type === 'UPDATE_FULL_ADDRESS') {
            return {
              ...state,
              ...action.payload
            }
          }

          if (action.type === 'UPDATE_FIELD') {
            return {
              ...state,
              [action.payload.name]: action.payload.value
            }
          }
          return state
        }

Reminder:

    return {
      ...state,
      [action.payload.name]: action.payload.value
    }

By passing a prop name wrapped by brackets, it converts it in the object key.



Hook: useRef

  const numberField = useRef()

  Used to access the DOM, in this case the input field, to get it focused to be set by the user after the fetch. So...

      {
        label: 'Number',
        xs: 3,
        name: 'number',
        inputRef: numberField
      }

      fetchAddress () {
        ...
        numberField.current.focus()
      }


class #159 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Form: handling errors
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/110/sistema-pedidos


payload -> status: 404, ok: false

Promise Reminder:

      promises have then() and catch();
      async / awair let you use try/catch;
      But fetch() doesn't have catch(), erros only network erros: if you get offline.

That said, use the response.message to fill the error message with our own dispatch 'FAIL' type:

Inside fetchAddress():

      if (!result.ok) {
        dispatch({
          type: 'FAIL',
          payload: {
            error: result.message
          }
        })
        return // aborting, preventing the flow inside the func fetchAddress()
      }


Adding a red border in the postcode field: material-ui already comes with error prop.

      <TextField
        label='Post Code'
        xs={4}
        autoFocus
        value={postcode}
        onChange={handleChangePostcode}
        error={!!addressState.error}
      />


addressState.error
  
    in case is null, turns into false with the !!
    in case is a string, turns into true with the !!

    So error={true} gets red.

Now make sure it won't keep red when user gets a real postcode: error: null

  if (action.type === 'UPDATE_FULL_ADDRESS') {
    return {
      ...state,
      ...action.payload,
      error: null
    }
  }

Also, make sure the fields reset to blank if the data gets error:

  if (action.type === 'RESET') {
    return {
      initialState
    }
  }

class #160 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Form: Phone number field
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/111/sistema-pedidos

So far, phone field gets any mess. We are going to:

  - create it's state
  - create it's mask

new file: phone-field.js


from src/pages/checkout/checkout.js, take the <TextField /> and replace it with the new <PhoneFiled />:

          <PaperContainer>
            <TextField label='Phone Number' xs={4} />
          </PaperContainer>

          <PaperContainer>
            <PhoneField />
          </PaperContainer>


src/pages/checkout/phone-field.js

          import React from 'react'
          import TextField from './text-field'

          function PhoneField () {
            return (
              <TextField label='Phone Number' xs={4} />
            )
          }

          export default PhoneField


Using masks may follow 2 different approaches.

  1. saving value at state after the mask

      function handleChangePhone (e) {
        setPhone(phoneMask(e.target.value))
      }

  2. using the mask on the presentation, at user's input, before save it

      <TextField
        label='Phone Number'
        xs={4}
        value={phoneMask(phone)}
        onChange={handleChangePhone}
      />

In some situations we may want to use it just in presentation of the value, meaning we apply the mask based on the value and save it on state without special characters such as $, like while displaying money data for instance.

The phone mask:

  function phoneMask (value) {
    return value
      .replace(/D+/g, '')
      .replace(/(\d{2})(\d)/, '($1) $2')
      .replace(/(\d{4})(\d)/, '$1-$2')
      .replace(/(\d{4})-(\d)(\d{4})/, '$1$2-$3')
      .replace(/(-\d{4})\d+?$/, '$1')
  }

  What format we want?
  
  The Brazilian phone format, which can have 8 or 9 numbers, always started by 2 numbers wrapped by parentesis, meaning the state code, followed by a blank space plus 4 or 5 numbers plus a dash (-) plus 4 numbers.

  Translating the RegEx above:

        .replace(/D+/g, '')
        
              It ignores any value that is not a number ('D' stands for a digit)

        .replace(/(\d{2})(\d)/, '($1) $2')
              
              The ( ) inside RegEx catches group/piece of the expression.
              The curly braces mean the amount of digits being catched.
              So 2 digits are our zone code, which later we wrap inside parentesis that are displaied in the Brazilian phone format, followed by a blank space then the rest of the digits, catched by the $2.


        .replace(/(\d{4})(\d)/, '$1-$2')

              The second scope in the last regex catches the rest of the digits and here above is separated in a group of 4 digits and the rest of them. Then we put a dash between the two scopes/catches.


        .replace(/(\d{4})-(\d)(\d{4})/, '$1$2-$3')

              Here, depending on the amount of the digits we may or not have the scope/catch $2 joined with the left side of the dash.


        .replace(/(-\d{4})\d+?$/, '$1')

              Then we make sure if the input field already got the total of 4 digits in the right and no more than 5 digits in the left, any extra digit won't be allowed.

        In this sequence, each .replace() considers the whole result of each previous one, but filtered by the RegEx, which in this case is ignoring that part that doesn't need any extra treatment.


class #161 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Save Address and Phone
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/112/sistema-pedidos


src/contexts/order.js:

  const [phone, addPhone] = useState('')
  const [address, addAddress] = useState({})

  <OrderContext.Provider value={{
    order: {
      pizzas,
      address,
      phone
    },
    addPizzaToOrder,
    removePizzaFromOrder,
    addAddress,
    addPhone,
    sendOrder
  }}
  >

Then we import the custom hook in our files

form-address.js + phone-field.js

      import { useOrder } from 'hooks'
  
And there are 2 possible approaches:

1 )

  form-address.js:

          const { addAddress } = useOrder()

          useEffect(() => {
            addAddress(addressState)
          }, [addressState, addAddress])

  phone-field.js:

          const { addPhone } = useOrder()

          useEffect(() => {
            addPhone(phone)
          }, [phone, addPhone])

  This appoarch is acceptable because we need this data just to the checkout page. If we need to reuse these fields, so we should have another approach. Let's see it...


2 ) onUpdate prop

          phone-field.js:

                function PhoneField ({ onUpdate = () => {} }) {

                  useEffect(() => {
                    onUpdate(phone)
                  }, [phone, onUpdate])

                }

          form-address.js:

                function FormAddress ({ onUpdate = () => {} }) {

                  useEffect(() => {
                    onUpdate(addressState)
                  }, [addressState, onUpdate])

                }

          checkout.js:

                const { order, addAddress, addPhone } = useOrder()

                <FormAddress onUpdate={addAddress} />

                <PhoneField onUpdate={addPhone} />

Why use the 2nd approach? Because we might want to reuse those components in other areas of our application. By doing this way, we got these components isolated, they have no strict dependency with the hooks/state. If are totally sure that only the checkout will use it, so it's ok to pick the 1st approach.


class #162 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Update Page Confirmation
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/113/sistema-pedidos


checkout-confirmation.js
checkout-success.js

          import { useOrder } from 'hooks'
          const { order } = useOrder()


          <PaperContainer>
            <H6>Your order</H6>
            <OrderInfo />

            <Divider />

            <H6>Delivery address:</H6>
            <Typography>
              {order.address.number}
              {' '}
              {order.address.address},
              {' '}
              {order.address.complement}<br />
              Neighborhood: {order.address.district}<br />
              Postcode: {order.address.code}<br />
              {order.address.city}/ {order.address.state}
            </Typography>

            <Divider />

            <H6>Contact phone number:</H6>
            <Typography>{order.phone}</Typography>

          </PaperContainer>

class #163 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Moving our dev fake data to the real data at Firebase

-> Cloud Firestore

Start in production mode

Location: multi-region

Start Collection
(It's like a data array)

Collection ID: pizzasSizes

Document ID
(It's like a JSON)

Would be instef of this:

[
  {
    id: '0',
    name: 'Small',
    size: 28,
    slices: 2,
    flavours: 1
  },
  {
    id: '1',
    name: 'Medium',
    size: 30,
    slices: 6,
    flavours: 2
  },
  {
    id: '2',
    name: 'Large',
    size: 32,
    slices: 8,
    flavours: 3
  }
]

this:

{
  '0': {},
  '1': {},
  '2': {}
}

Other option could be the "Auto ID". But just for now we won't use AutoID.

Let's start by setting 0 id. Then start/move to the next step.

Add Field

  Do not use quotation marks.

document 0 id:

          flavours: 1
          name: "Small"
          size: 28
          slices: 2



Collection ID: pizzasFlavours

Our original fake data:

[
  {
    id: '0',
    image: '/fake-data/images/pizza-calabresa.png',
    name: 'Calabresa',
    value: {
      0: 20,
      1: 30,
      2: 40
    }
  },

  {
    id: '1',
    image: '/fake-data/images/pizza-frango-catupiry.png',
    name: 'Frango com Catupiry',
    value: {
      0: 25,
      1: 35,
      2: 45
    }
  },

  {
    id: '2',
    image: '/fake-data/images/pizza-prestigio.jpg',
    name: 'Prestígio',
    value: {
      0: 30,
      1: 40,
      2: 50
    }
  }
]

What types to use in this case?
    
    image: string,
    name: string,
    value: map



class #164 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Take data from database to our application: sizes
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/114/sistema-pedidos

Firestore documentation
https://firebase.google.com/docs/firestore?authuser=0



named export must have variable creation (const):

      export const db = firebase.firestore()


src/services/firebase.js

  new lines:

      import 'firebase/firestore'

      export const db = firebase.firestore()

            OBS 1:
            
                Don't forget that named export must have variable creation (meaning 'const' key word)

            OBS 2:

                this:
                      export const db = firebase.firestore()

                is the same as this:

                      const db = firebase.firestore()
                      export { db }


Now we can remove the fake data and reach the real data from db

  choose-pizza-size.js
  choose-pizza-flavours.js

Reminder:

  Every database request must get ran at componentDidMount (if in Classes) or useEffect (if functions)

  import { db } from 'services/firebase'

  useEffect(() => {
    db.collection('pizzasSizes').get().then(querySnapshot => {
      console.log(querySnapshot)
    })
  }, [])

  OBS: querySnapshot comes from Firebase

  Temporaty (and extremelly dangerous) change on our Firebase database:

  rules_version = '2';
  service cloud.firestore {
    match /databases/{database}/documents {
      match /{document=**} {
        allow read, write: if true;
      }
    }
  }

  That means anyone accessing our DB using our keys would be allowed to read or write over there. By default, it comes with allow false:

      match /{document=**} {
        allow read, write: if true;
      }


  With this, here is how we call the content of collection:

          const [pizzasSizes, setPizzasSizes] = useState([])

          useEffect(() => {
            db.collection('pizzasSizes').get().then(querySnapshot => {
              const sizes = []
              querySnapshot.forEach(doc => {
                sizes.push({
                  id: doc.id,
                  ...doc.data()
                })
              })
              console.log(sizes)
              setPizzasSizes(sizes)
            })
          }, [])


0: {id: "0", name: "Small", slices: 2, size: 28, flavours: 1}
1: {id: "1", size: 30, slices: 6, flavours: 2, name: "Medium"}
2: {id: "2", flavours: 3, name: "Large", size: 32, slices: 8}


class #165 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Take data from database to our application: flavours
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/115/sistema-pedidos

  choose-pizza-flavours.js

      import { db } from 'services/firebase'

      const [pizzasFlavours, setPizzasFlavours] = useState([])

      useEffect(() => {
        db.collection('pizzasFlavours').get().then(querySnapshot => {
          const flavours = []
          querySnapshot.forEach(doc => {
            flavours.push({
              id: doc.id,
              ...doc.data()
            })
          })
          setPizzasFlavours(flavours)
        })
      }, [])


  A weird test by Daciuk: if user clicks fast backwards and forwards, the promise inside these useEffect starts and before it's end user is already in the other page. I wonder what kind of crazy user would do that, but anyways there is a way to prevent it:

    useEffect(() => {
      let mounted = true
      db.collection('pizzasFlavours').get().then(querySnapshot => {
        const flavours = []
        querySnapshot.forEach(doc => {
          flavours.push({
            id: doc.id,
            ...doc.data()
          })
        })

        if (mounted) {
          console.log('mounted')
          setPizzasFlavours(flavours)  
        } else {
          console.log('unmounted')
        }
      })
      
      return () => {
        mounted = false
      }
    }, [])

    So when this weirdo user behaves like trying to break our app, console.log above will show 'unmounted', which means the code just prevented the set of 'flavours'.
    
    Daciuk says we could also have a specific hook for that. We should have this every time we have an async/promises that user could switch pages and the component will get unmounted before executed a setState.


class #166 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Abstracting the 2 calls from DB in a single custom hook
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/116/sistema-pedidos


reminders:

- hooks name must start with 'use'


src/hooks/db.js:

          import { useEffect, useState } from 'react'
          import { db } from 'services/firebase'

          function useCollection (collection) {
            const [data, setData] = useState(null)

            useEffect(() => {
              let mounted = true

              db.collection(collection).get().then(querySnapshot => {
                const docs = []

                querySnapshot.forEach(doc => {
                  docs.push({
                    id: doc.id,
                    ...doc.data()
                  })
                })

                if (mounted) {
                  setData(docs)
                }
              })

              return () => {
                mounted = false
              }
            }, [collection])

            return data
          }

          export default useCollection


class #167 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Saving order in Firestore
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/117/sistema-pedidos


src/contexts/order.js


- we don't have yet a collection called orders in our Firestore.  Do we have to create is manually in the website?

No.

When we try to send data to a collection that doesn't exisit yet, Firestore will actually create it.


    db.collection('orders').add({

    })


  method add() adds with a random ID

Why do not use this:

      createdAt: new Date()

new Date() is generated in the client side. If user changes it's time in the computer, he can crack the app.

How to use server side time? Firebase has something...

      createdAt: firebase.firestore.FieldValue.serverTimestamp()



src/contexts/order.js

            import React, { createContext, useState } from 'react'
            import t from 'prop-types'
            import { v4 as uuidv4 } from 'uuid'
            import firebase, { db } from 'services/firebase'
            import { useAuth } from 'hooks'

            const OrderContext = createContext()

            function OrderProvider ({ children }) {
              const [pizzas, addPizza] = useState([])
              const [orderInProgress, setOrderInProgress] = useState(false)
              const [phone, addPhone] = useState('')
              const [address, addAddress] = useState({})
              const { userInfo } = useAuth()

              function addPizzaToOrder (pizza) {
                if (orderInProgress) {
                  return addPizza((piizas) => pizzas.concat(newPizza(pizza)))
                }
                setOrderInProgress(true)
                addPizza([newPizza(pizza)])
              }

              function newPizza (pizza) {
                return {
                  id: uuidv4(),
                  ...pizza
                }
              }

              function removePizzaFromOrder (id) {
                addPizza((pizzas) => pizzas.filter(p => p.id !== id))
              }

              async function sendOrder () {
                console.log('send order')

                try {
                  await db.collection('orders').add({
                    userId: userInfo.user.uid,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                    address,
                    phone,
                    pizzas: pizzas.map(pizza => ({
                      size: pizza.pizzasSizes,
                      falavours: pizza.pizzasFlavours,
                      amount: pizza.amount
                    }))
                  })
                } catch (e) {
                  console.log('error saving order:', e)
                }

                setOrderInProgress(false)
              }

              return (
                <OrderContext.Provider value={{
                  order: {
                    pizzas,
                    address,
                    phone
                  },
                  addPizzaToOrder,
                  removePizzaFromOrder,
                  addAddress,
                  addPhone,
                  sendOrder
                }}
                >
                  {children}
                </OrderContext.Provider>
              )
            }

            OrderProvider.propTypes = {
              children: t.node.isRequired
            }

            export { OrderProvider, OrderContext }



class #168 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Secutiry Rules
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/118/sistema-pedidos




Firebase > Firestore > Database > Rules

anyone can do anything: allow read, write: if true

      rules_version = '2';
      service cloud.firestore {
        match /databases/{database}/documents {
          match /{document=**} {
            allow read, write: if true;
          }
        }
      }


No one can do nothing: allow read, write: if false

      rules_version = '2';
      service cloud.firestore {
        match /databases/{database}/documents {
          match /{document=**} {
            allow read, write: if false;
          }
        }
      }

Or empity:

      rules_version = '2';
      service cloud.firestore {
        match /databases/{database}/documents {

        }
      }


Any document, recursivelly:

    {document=**}


Each collection needs specific rules.

Version of rules:

    rules_version = '2';

    OBS: If blank, Firebase will use version '1'

    Recursiveness doesn't work in version '1', so if it's needed use version '2'


Default structure:

      rules_version = '2';
      service cloud.firestore {
        match /databases/{database}/documents {

        }
      }

{database}

  It's a variable that means the current database opened in Firebase's website. We may have the hability to handle more than one database in the future, depending on Firebase will. For now we keep using just like it is.


Writting rules...

      rules_version = '2';
      service cloud.firestore {
        match /databases/{database}/documents {
          match /pizzasSizes/0 {
            allow read, write: if false;
          }

          match /{document=**} {
            allow read, write: if true;
          }
        }
      }

- rules always start with 'match':    match /pizzasSizes/0
- followed by collection name:        /pizzasSizes/0
- starting from a specific document:  /0
- not allowed read and write:         allow read, write: if false

- match from the root:                match /
- match from all the docs at root:    match /{document=**}

- so the block code above says any document greater than 0 will have read and write allowed.


Allow read if user is logged:

      rules_version = '2';
      service cloud.firestore {
        match /databases/{database}/documents {
          match /pizzasSizes/{size} {
            allow read: if request.auth.uid != null;
          }

          match /pizzasFlavours/{flavour} {
            allow read: if request.auth.uid != null;
          }

          match /orders/{order} {
            allow read: if request.auth.uid == resource.data.userId;
            allow write: if request.auth.uid == request.resource.data.userId;
          }
        }
      }


Use 'playground rules' to have simulations before publish it.


allow write: if request.auth.uid == request.resource.data:

      It checks if the logged user is the same at the order'data user's id.


class #169 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Env vars to save security keys
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/119/sistema-pedidos

src/services/firebase.js

those keys in this file are mostly public.

the good practice is to have one DB to development and another to production.

to keep these keys, we use environment variables.

dotenv:

https://www.npmjs.com/package/dotenv

Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env. Storing configuration in the environment separate from code is based on The Twelve-Factor App methodology.

That said, we are moving out auth data in firebase.js to our .env file, which was created earlier.

.env so far is almost empity:

  BROWSER=none

updating it to:

All .env variables must start with:

    REACT_APP_ + name

We can define different vars to each environment, dev or prod

Converting from JS to .env:

from: 

        const config = {
          apiKey: 'xxxxxxx',
          authDomain: 'xxx-xxx.firebaseapp.com',
          databaseURL: 'https://xxx-xxx.firebaseio.com',
          projectId: 'xxx-xxx',
          storageBucket: 'pamplona-pizzas.appspot.com',
          messagingSenderId: 'xxxx',
          appId: 'xxx'
        }

to:

.env:
          REACT_APP_API_KEY=xxxxxxx
          REACT_APP_AUTH_DOMAIN=xxxx-xxxx.firebaseapp.com
          REACT_APP_DATABASE_URL=https://xxxx-xxxx.firebaseio.com
          REACT_APP_PROJECT_ID=xxxx-xxxx
          REACT_APP_STORAGED_BUCKET=xxxx-xxxxx.appspot.com
          REACT_APP_MESSAGING_SENDER_ID=xxxxxxx
          REACT_APP_APP_ID=xxxx

and firebase.js:

          const config = {
            apiKey: process.env.REACT_APP_API_KEY,
            authDomain: process.env.REACT_APP_AUTH_DOMAIN,
            databaseURL: process.env.REACT_APP_DATABASE_URL,
            projectId: process.env.REACT_APP_PROJECT_ID,
            storageBucket: process.env.REACT_APP_STORAGED_BUCKET,
            messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,
            appId: process.env.REACT_APP_APP_ID
          }

After that, must shut down the server and turn on it again. It reads the .env only when starting up.

Recomended:

        .env.production
        .env.development
        .env.local

.gitignore:

        # misc
        .DS_Store
        .env.local
        .env.development.local
        .env.test.local
        .env.production.local

Those versions of .env above in .gitignore won't be sent to git repo.

So now we are renaming our .env to .env.local, meaning we are keeping it away from the git.

class #170 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Continuous deployment: GitHub + Netlify.com

Netlify: 

Site Settings > Build & Deploy > Environment Variables:

Edit Variables

Then copy from your notes and paste it in the fields on Netlify

After that:

click SAVE

Trigger deploy > deploy site (yup, again. Now with the .env with the new variables)

Netlify limits: 300 minutes in builds per month (free)

class #171 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Production env settings

GitHub loggin authentication: page not found

Single Page Application - SPA (not a static website)

The Route should be physic in the server. How to render index.html to every request get via browser URL?

Netlify doesn't udnerstand routes such as /login in out application. Locally, our CRA has webpack (which uses SPA server) that understand that: they keep using index.html in the root. 

How to let Netlify understand we are using a SPA?

create a file at 'public' folder:

react-zzaria-sistema-pedido/public

new file:

  _redirects

Edit it, including:

/* /index.html 200

That means for each get request, should load index.html with status 200

Meanwhile, Daciuk starts another database at Firebase, to be used as production-database of this application.

After all setup, don't forget of the authorized domain in Firebase settings, including the domian of your Netlify.

Remember that if you set a new database, all the settings we got in the previous one now should be copy and pasted to this new production database.


class #172 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Next project: Orders Management System

Presentetion of the project


class #173 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/120

Starting folder and files of System Register

1 - copy system orders into system register

2 - cleaning up / removing some files


After removing some files, there are some comments about other updates:

src/pages/main.js:

Daciuk's version of react-router-dom now is 5, which was alredy for me btw.

That allows us to have a sintax a bit different:

Insted of this old code:

        <Route
          path={routes.HOME}
          exact
          component={ChoosePizzaSize}
        />

Is the same as this:

        <Route path={routes.HOME} exact>
          <ChoosePizzaSize />
        </Route>


This version of react-router comes with hooks, so we don't have to inject via props. It's still working in the old fashion if you will.

Also could be that:

  <Route path={routes.HOME} exact children={<ChoosePizzaSize />} />

  Which behind the scenes would be this:

    React.createElement(ChoosePizzaSize, {props}, {children})


src/root.js:

    <BrowserRouter>
      <App />
    </BrowserRouter>

    We removed the <Route/> and now have directly the <App />. No longer need the Route.
    
    If later we need something from react-router we gonna use Hooks insted of pass data via props, unless we need to isolate the component, which is not the case right here. It's better to reach data via Hooks.

    Later, after all cleaning up, Daciuk ran another create-react-app, Daciuk wonders if other dependencies may have updates available.

    If just running 'react-script', to update to the last version of CRA, we wouldn´t have those other files updates, such as the ones in 'public' etc.

Ideally, do not install from global react-react-app:

  create-react-app <my-app>

But if using NPM and at least from v5, then use NPX:

  npx create-react-app <my-app>

It runs a package that could be used as CLI (command line).

So insted of having a single (global) verion of create-react-app, we could use always the most fresh version available.

If using YARN:

  yarn create react-app <my-app>

  Yarn already comes with 'create' command. Any package which's name starts with 'create-something' is automaticaly installed if you pass the rest of the name without 'create'. Yarn will know that it's about 'create-react-app'. So here we are running:

    yarn create react-app system-register-new

  This new version of CRA already comes with jest-dom.

      "@testing-library/jest-dom": "^4.2.4",

  But in fact my own previous installation was already up to date, no differences at all.

  Reminder: before install n-de_modules over our current package.json, remember always to check and remove any ^ (caret)

Warning: DO not update your depedencies all at once like Daciuk does in this class, himself warns us, unless it's a brand new application. IF something already started, have a new branch in your repo before do that.

At system-register-new (by most recent CRA): src/index.js

New:

    <React.StrictMode>
      <App />
    </React.StrictMode>,

Moved this replacing:

    <ErrorBoundary>
      {(hasError) => (
        <Root hasError={hasError} />
      )}
    </ErrorBoundary>,

At it does?

Wraps the whole app, makes sure we have no bug in the app. Also, if a very old feature that may become a problem will generate a warnign to force you to update it. From now, it's important to have it wrapping everything.


At: src/serviceWorker.js

Copy the new and replace the old. It turns our app into a PWA (progressive web application).

src/setupTests.js:

    Include it in the project.

public/index.html

    (already had)

public/manifest.json

    (already had)

robots.txt + logos

    (already had)

Firebase:

  Project Settings

  Each app must be set with different 'nick-names' in Firebase, which generates them a single appId for each one.

  Everything else will have the same settings.


src/app.js

Insted of 

    function App ({ location }) { }

remove this prop and import the hook 'useLocation':

  import { useLocation } from 'react-router-dom'

And use it:

  const location = useLocation()

Remove also the prop-types from 'location' prop just removed.


class #174 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Lint improvement

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/121

How to control what erros block the app and what just warn the dev?

Install at Terminal:

  yarn add --dev --exact eslint-plugin-only-warn

then at package.json, include this 'only-warn' after extends:

  "eslintConfig": {
    "extends": [
      "react-app",
      "standard",
      "standard-react"
    ],
    "plugins": [
      "only-warn"
    ]
  },


class #175 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Drawer

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/122

main.js:

  import { Drawer } from '@material-ui/core'

  <Drawer variant='permanent'>
    Drawer
  </Drawer>



Drawer Margin: global variable to control margin


root.js:

drawerWidth

      const theme = createMuiTheme({
        typography: {
          useNextVariant: true
        },

        extend: {
          drawerWidth: 280
        }
      })

main.js:

      const Drawer = styled(MaterialDrawer)`
        && {
          .MuiPaper-root {
            width: ${({ theme }) => theme.extend.drawerWidth}px;
          }
        }
      `

      const Content = styled.main`
        margin-left: ${({ theme }) => theme.extend.drawerWidth}px;
        padding: ${({ theme }) => theme.spacing(3)}px;
      `



class #176 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Drawer items

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/123

import {
  Divider,
  Drawer as MaterialDrawer,
  List,
  ListItem,
  ListItemText,
  Typography
} from '@material-ui/core'

const menuItems = [
  {
    label: 'Orders'
  },
  {
    label: 'Pizza Sizes'
  },
  {
    label: 'Pizza Flavours'
  }
]

<List>
  {menuItems.map(item => (
    <ListItem key={item.label} button>
      <ListItemText>{item.label}</ListItemText>
    </ListItem>
  ))}
</List>


class #177 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Pages base
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/124

main.js:

          import React, { lazy, Suspense } from 'react'
          import styled from 'styled-components'
          import { Link, Route, Switch } from 'react-router-dom'
          import {
            Divider,
            Drawer as MaterialDrawer,
            List,
            ListItem,
            ListItemText,
            Typography
          } from '@material-ui/core'

          import * as routes from 'routes'

          const Orders = lazy(() => import('pages/orders'))
          const PizzasSizes = lazy(() => import('pages/pizzas-sizes'))
          const PizzasFlavours = lazy(() => import('pages/pizzas-flavours'))

          const Main = () => (
            <>
              <Drawer variant='permanent'>
                <DrawerContent>

                  <Typography variant='h4'>React-zzaria</Typography>

                  <Typography>(Register System)</Typography>

                </DrawerContent>

                <Divider />

                <List>

                  {menuItems.map(item => (
                    <ListItem
                      key={item.label}
                      button
                      component={Link}
                      to={item.link}
                    >
                      <ListItemText>{item.label}</ListItemText>
                    </ListItem>
                  ))}

                </List>

              </Drawer>

              <Content>
                <Suspense fallback='Loading...'>
                  <Switch>
                    {menuItems.map(item => (
                      <Route key={item.link} path={item.link} exact={item.exact}>
                        <item.component />
                      </Route>
                    ))}
                  </Switch>
                </Suspense>
              </Content>
            </>
          )

          const menuItems = [
            {
              label: 'Orders',
              link: routes.HOME,
              component: Orders,
              exact: true
            },
            {
              label: 'Pizza Sizes',
              link: routes.PIZZAS_SIZES,
              component: PizzasSizes
            },
            {
              label: 'Pizza Flavours',
              link: routes.PIZZAS_FLAVOURS,
              component: PizzasFlavours
            }
          ]

          const Drawer = styled(MaterialDrawer)`
            && {
              .MuiPaper-root {
                width: ${({ theme }) => theme.extend.drawerWidth}px;
              }
            }
          `

          const DrawerContent = styled.div`
            display: flex;
            flex-direction: column;
            padding: ${({ theme }) => theme.spacing(1)}px;
            text-align: center;
          `

          const Content = styled.main`
            margin-left: ${({ theme }) => theme.extend.drawerWidth}px;
            padding: ${({ theme }) => theme.spacing(3)}px;
          `

          export default Main


class #178 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Menu Item active / deactivated

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/125

import { useLocation } from 'react-router-dom'

const { pathname } = useLocation()

selected={pathname === item.link}

<List>
  {menuItems.map(item => (
    <ListItem
      key={item.label}
      button
      selected={pathname === item.link}
      component={Link}
      to={item.link}
    >
      <ListItemText>{item.label}</ListItemText>
    </ListItem>
  ))}
</List>


class #179 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Orders.js
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/126

Markup:

          import React from 'react'
          import {
            Paper,
            Table,
            TableBody,
            TableCell,
            TableContainer,
            TableHead,
            TableRow,
            Typography
          } from '@material-ui/core'

          function Orders () {
            return (
              <TableContainer>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>
                        <Typography>
                          Order info
                        </Typography>
                      </TableCell>
                    </TableRow>
                  </TableHead>

                  <TableBody>
                    <TableRow>
                      <TableCell>
                        <div>
                          <Typography variant='button'>
                            Order time
                          </Typography>
                        </div>

                        <div>
                          <Typography variant='button'>
                            Order:
                          </Typography>

                          <ul>
                            <li>
                              <Typography variant='button'>
                                1 pizza media de {' '}
                                Frango com catupiry e calabresa
                              </Typography>
                            </li>
                          </ul>
                        </div>

                        <div>
                          <Typography>
                            Address to delivery
                          </Typography>

                          <Typography>
                            Rua das Laranjeiras 999, 1222  {' '}
                            Bairro: XPTO - Postcode:
                            São Paulo - SP
                          </Typography>
                        </div>
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TableContainer>
            )
          }

          export default Orders


class #180 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Orders.js - Styling
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/127


          import React from 'react'
          import styled from 'styled-components'
          import {
            Paper,
            Table,
            TableBody,
            TableCell,
            TableContainer as MaterialTableContainer,
            TableHead,
            TableRow,
            Typography
          } from '@material-ui/core'

          function Orders () {
            return allOrderStatus.map(orderStatus => (
              <TableContainer key={orderStatus.title}>
                <TableTitle>
                  {orderStatus.title}
                </TableTitle>
                <Table>
                  <THead>
                    <TableRow>
                      <Th>
                        <Typography>
                          Informações do pedido
                        </Typography>
                      </Th>
                    </TableRow>
                  </THead>

                  <TableBody>
                    <TableRow>
                      <TableCell>
                        <div>
                          <Subtitle>
                            Order time: 10:20H
                          </Subtitle>
                        </div>

                        <div>
                          <Subtitle>
                            Order:
                          </Subtitle>

                          <ul>
                            <li>
                              <Typography>
                                1 pizza media de {' '}
                                Frango com catupiry e calabresa
                              </Typography>
                            </li>
                          </ul>
                        </div>

                        <div>
                          <Subtitle>
                            Address to delivery
                          </Subtitle>

                          <Typography>
                            Rua das Laranjeiras 999, 1222  {' '}
                            Bairro: XPTO - Postcode:
                            São Paulo - SP
                          </Typography>
                        </div>
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TableContainer>
            ))
          }

          const allOrderStatus = [
            {
              title: 'Pending orders'
            },
            {
              title: 'Orders under production'
            },
            {
              title: 'On it\'s way'
            },
            {
              title: 'Orders done'
            }
          ]

          const TableContainer = styled(MaterialTableContainer).attrs({
            component: Paper
          })`
            && {
              margin-bottom: ${({ theme }) => theme.spacing(3)}px;
            }
          `

          const TableTitle = styled(Typography).attrs({
            variant: 'h6'
          })`
            && {
              padding: ${({ theme }) => theme.spacing(3)}px;
            }
          `

          const Subtitle = styled(Typography).attrs({
            variant: 'button'
          })`
            && {
              font-weight: bold;
            }
          `

          const THead = styled(TableHead)`
            && {
              background: ${({ theme }) => theme.palette.common.black};
            }
          `

          const Th = styled(TableCell)`
            && {
              color: ${({ theme }) => theme.palette.common.white};
            }
          `

          export default Orders


class #181 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Get orders from Firebase
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/128

custom hook: useOrders

hooks/db/

        collection.js:

              import { useEffect, useState } from 'react'
              import { db } from 'services/firebase'

              function useCollection (collection) {
                const [data, setData] = useState(null)

                useEffect(() => {
                  let mounted = true

                  db.collection(collection).get().then(querySnapshot => {
                    const docs = []

                    querySnapshot.forEach(doc => {
                      docs.push({
                        id: doc.id,
                        ...doc.data()
                      })
                    })

                    if (mounted) {
                      setData(docs)
                    }
                  })

                  return () => {
                    mounted = false
                  }
                }, [collection])

                return data
              }

              export default useCollection





        orders.js:

              import { useEffect, useState } from 'react'
              import { db } from 'services/firebase'

              function useOrders () {
                const [ orders, setOrders ] = useState(null)

                useEffect(() => {
                  db.collection('orders').get().then(querySnapshot => {
                    const docs = []

                    querySnapshot.forEach(doc => {
                      docs.push({
                        id: doc.id,
                        ...doc.data()
                      })
                    })

                    setOrders(docs)
                  })
                }, [])
                
                return { orders }
              }

              export default useOrders


Firebase edit rules: temporary rule for tests

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /pizzasSizes/{size} {
      allow read: if request.auth.uid != null;
    }

    match /pizzasFlavours/{flavour} {
      allow read: if request.auth.uid != null;
    }

    match /orders/{order} {
      allow read: if request.auth.uid == resource.data.userId || request.auth.uid != null;
      allow write: if request.auth.uid == request.resource.data.userId;
    }
  }
}


New code:

 || request.auth.uid != null;

It means any not null user will have access.  

Here is a refactoring along all rules in Firebase:

      rules_version = '2';
      service cloud.firestore {
        match /databases/{database}/documents {
          function isAuthenticated () {
            return request.auth.uid != null
          }
          
          function isAdmin () {
            return request.auth.uid != null;
          }
          
          function isOwner () {
            return request.auth.uid == resource.data.userId;
          }
          
          function isOwnOrder () {
            return request.auth.uid == request.resource.data.userId;
          }
          
          match /pizzasSizes/{size} {
            allow read: if isAuthenticated();
          }

          match /pizzasFlavours/{flavour} {
            allow read: if isAuthenticated();
          }

          match /orders/{order} {
            allow read: if isOwner() || isAdmin();
            allow write: if isOwnOrder();
          }
        }
      }

class #182 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Display Orders on screen

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/129



For a map in a array that actually doesn't exist and which's variable is still null:

    use this short circuit:

          {orders && orders.map(order => ( ....

    Or....

      Use this new feature: "optional chaining"

          {orders?.map(order => ( ....


Firebase toDate()

        <Subtitle>
          Order time: {' '} {order.createdAt.toDate().toString()}
        </Subtitle>

// ORDER TIME: THU JUL 16 2020 11:41:47 GMT-0300 (BRASILIA STANDARD TIME)

Intl api (interlationalization)
(google 'Intl mdn' for more information)


    <Subtitle>
      Order time: {' '} {getHour(order.createdAt.toDate())}
    </Subtitle>

    function getHour (date) {
      const options = {
        hour: 'numeric',
        minute: 'numeric'
      }
      
      return Intl.DateTimeFormat('pt-BR', options).format(date)
    }

// ORDER TIME: 11:41


src/pages/orders/orders.js

            import React from 'react'
            import styled from 'styled-components'
            import {
              Paper,
              Table,
              TableBody,
              TableCell,
              TableContainer as MaterialTableContainer,
              TableHead,
              TableRow,
              Typography
            } from '@material-ui/core'

            import { useOrders } from 'hooks'

            function Orders () {
              const { orders } = useOrders()
              console.log('orders: ', orders)

              function getHour (date) {
                const options = {
                  hour: 'numeric',
                  minute: 'numeric'
                }

                return Intl.DateTimeFormat('pt-BR', options).format(date)
              }

              return allOrderStatus.map(orderStatus => (
                <TableContainer key={orderStatus.title}>
                  <TableTitle>
                    {orderStatus.title}
                  </TableTitle>
                  <Table>
                    <THead>
                      <TableRow>
                        <Th>
                          <Typography>
                            Informações do pedido
                          </Typography>
                        </Th>
                      </TableRow>
                    </THead>

                    <TableBody>
                      {orders?.map(order => (
                        <TableRow key={order.id}>
                          <TableCell>
                            <div>
                              <Subtitle>
                                Order time: {' '} {getHour(order.createdAt.toDate())}
                              </Subtitle>
                            </div>

                            <div>
                              <Subtitle>
                                Order:
                              </Subtitle>

                              <ul>
                                <li>
                                  <Typography>
                                    1 pizza media de {' '}
                                    Frango com catupiry e calabresa
                                  </Typography>
                                </li>
                              </ul>
                            </div>

                            <div>
                              <Subtitle>
                                Address to delivery
                              </Subtitle>

                              <Typography>
                                Rua das Laranjeiras 999, 1222  {' '}
                                Bairro: XPTO - Postcode:
                                São Paulo - SP
                              </Typography>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              ))
            }

            const allOrderStatus = [
              {
                title: 'Pending orders'
              },
              {
                title: 'Orders under production'
              },
              {
                title: 'On it\'s way'
              },
              {
                title: 'Orders done'
              }
            ]

            const TableContainer = styled(MaterialTableContainer).attrs({
              component: Paper
            })`
              && {
                margin-bottom: ${({ theme }) => theme.spacing(3)}px;
              }
            `

            const TableTitle = styled(Typography).attrs({
              variant: 'h6'
            })`
              && {
                padding: ${({ theme }) => theme.spacing(3)}px;
              }
            `

            const Subtitle = styled(Typography).attrs({
              variant: 'button'
            })`
              && {
                font-weight: bold;
              }
            `

            const THead = styled(TableHead)`
              && {
                background: ${({ theme }) => theme.palette.common.black};
              }
            `

            const Th = styled(TableCell)`
              && {
                color: ${({ theme }) => theme.palette.common.white};
              }
            `

            export default Orders


class #183 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Cont.

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/130




When we are not about to modify items inside an array, it's acceptable to have index as key (while mapping this array). Nothing will be remoed or added.

      <ul>
        {order.pizzas.map((pizza, index) => (
          <li key={index}>
            <Typography>
              1 pizza media de {' '}
              Frango com catupiry e calabresa
            </Typography>
          </li>
        ))}
      </ul>



This is beautiful:

<ul>
  {order.pizzas.map((pizza, index) => (
    <li key={index}>
      <Typography>
        {pizza.amount} {' '}
        {singularOrPlural(
          pizza.amount,
          'pizza',
          'pizzas'
        )}{' '}
        {pizza.size.name.toUpperCase()} of {' '}
        {pizza.flavours
          .map(flavour => flavour.name)
          .reduce((acc, flavour, index, array) => {
            if (index === 0) {
              return flavour
            }

            if (index === array.length - 1) {
              return `${acc}, and ${flavour}`
            }

            return `${acc}, ${flavour}`
          }, '')
        }
      </Typography>
    </li>
  ))}
</ul>





class #184 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Address

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/131


<TableBody>
  {orders?.map(order => {
    
    const {
      address,
      number,
      complement,
      district,
      code: postcode,
      city,
      state
    } = order.address

    ......

    <div>
      <Subtitle>
        Address to delivery
      </Subtitle>

      <Typography>
        {number} {' '} {address} {' '}
        {complement && `, ${complement}`}<br />
        {district}<br />
        Postcode: {postcode}<br />
        {city} {' / '} {state}
      </Typography>
    </div>


class #185 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Order status

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/132

  // {
  //   pending: [],
  //   inProgress: [],
  //   outForDelivery: [],
  //   delivered: []
  // }


hooks/db/orders.js:

          import { useEffect, useState } from 'react'
          import { db } from 'services/firebase'

          function useOrders () {
            const [orders, setOrders] = useState(null)

            useEffect(() => {
              const initialStatus = {
                pending: [],
                inProgress: [],
                outForDelivery: [],
                delivered: []
              }

              db.collection('orders').get().then(querySnapshot => {
                const docs = []

                querySnapshot.forEach(doc => {
                  docs.push({
                    id: doc.id,
                    ...doc.data()
                  })
                })

                const newOrders = docs.reduce((acc, doc) => {
                  return {
                    ...acc,
                    pending: acc.pending.concat(doc)
                  }
                }, initialStatus)

                setOrders(newOrders)
              })
            }, [])

            return { orders }
          }

          export default useOrders



pages/orders/orders.js:     orders?.pending.map

        <TableBody>
          {orders?.pending.map(order => {
            const {
              address,
              number,
              complement,
              district,
              code: postcode,
              city,
              state
            } = order.address

            return (
              <TableRow key={order.id}>

class #186 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/04-reactzzaria/133
















class #187 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #188 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #189 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #190 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #190 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *



































class #191 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #192 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #193 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #194 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #195 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #196 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #197 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #198 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #199 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #200 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


















class #201 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #202 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #203 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #204 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #205 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #206 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #207 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #208 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

















class #209 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


















