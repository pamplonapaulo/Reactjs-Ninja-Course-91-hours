"React.js Ninja" by Fernando Daciuk

* Module 4 * React Router

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04

Part 1

class #001 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Presentation and Module requirements

class #002 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

React Router
http://reacttraining.com/react-router

- Web (React.js)   <-- 
- Native (React Native)

https://reacttraining.com/react-router/web/guides/quick-start

Terminal:
yarn add react-router-dom

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/01-hello-react-router/01


In case you face problems such as upath@^1.1.1 in our yarn.lock, you may want to run yarn install with:

        --ignore-engines

class #003 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Browser Router

-> Creation of Single Page Applications (SPA)

        import { BrowserRouter } from 'react-router-dom'

        const App = () => (
          <BrowserRouter>
            <div>
              <h1>Hello</h1>
            </div>
          </BrowserRouter>
        )

Component <Link>:

        import { Link } from 'react-router-dom'

        <Link to='/about' children='About' />

        Or

        <Link to='/about'>About</Link>


    Different than an html <a> tag, this React <Link> component doesn't reload the entire page. It's kind of like <Link> comes with a preventDefault() by itself.

    Props:

      1. path=<strin>
      2. path=<ReactComponent>



Component <Route>:

        import { Route } from 'react-router-dom'

        <Route path='/about' component={About} />

        const About = () => (
          <h1>About</h1>
        )

        Behind the scenes, <Route> does something more or less like a short circuit:

          {this.state.route === '/about' && <About />}


class #004 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Rendering more than one route
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/01-hello-react-router/02

'exact' & Home trick render:

  <Route path='/' component={Home} />

  path='/'
  Will get rendered any time another route with '/' is rendered, such as:
  path='/about' or path='/contact'

  If you want {Home} to get render only at it's exact route, you must include the exact property:

      <Route path='/' exact component={Home} />

class #005 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Webpack: fixing issue
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/01-hello-react-router/03

Issue it's about relative paths X absolute paths

webpack/dev.congif.js: 

  output -> publicPath

  PublicPath is the path where webpack generates memory assets. What Daciuk did in the class was just the add of a forward slash: '/'

  Before:

          output: Object.assign({}, common.output, {
            filename: '[name].js',
            publicPath: ''
          }),

  After:

          output: Object.assign({}, common.output, {
            filename: '[name].js',
            publicPath: '/'
          }),

  But! My webpack/dev.config didn't have neigther '' nor '/'. It didn't have any publicPath at all. And it worked. Probably Daciuk also updated this boilerplate (here used by me) later, before I started the course.

          output: Object.assign({}, common.output, {
            filename: '[name].js'
          }),

  Ok, end of the mistery: Daciuk actually moved it to webpack/common.js:

          output: {
            path: paths.dist,
            filename: '[name]-[chunkhash].js',
            publicPath: '/'
          },

class #006 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Dynamic Routes
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/01-hello-react-router/04

BrowserRouter can't have many children. It should have just one child:

        <BrowserRouter>
          <div>

          </div>
        </BrowserRouter>

Routes' props:
history: {…}, location: {…}, match: {…}



console.log(props.match)

        isExact: true
        params: {}
        path: "/blog/post-2"
        url: "/blog/post-2"

So insted of:

    <Route path='/blog/post-1' component={Post} />
    <Route path='/blog/post-2' component={Post} />

Dynamicaly we could write:

    <Route path='/blog/:post' component={Post} />

That way, the Route has params filled:

    params:
    post: "post-2"

    or

    params:
    post: "post-1"



After all, the blog area would look like this:

        const Blog = () => (

        <div>
          <h1>Blog</h1>
          <ul>
            <li><Link to='/blog/Jesus'>Post about Jesus's life</Link></li>
            <li><Link to='/blog/Sidarta'>Post about Sidarta's life</Link></li>
          </ul>

          <Route path='/blog/:post' component={Post} />
          <Route exact path='/blog' component={NoPost} />
        </div>
      )

      const Post = ({ match }) => (
        <div>
          <h2>Post: {match.params.post}</h2>
        </div>
      )

      const NoPost = () => (
        <div>
          <p>Select a post</p>
        </div>
      )

class #007 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
SPA Concepts | Route request
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/02-spa-concepts/01

- Route request behind the scenes

Set up a static server:

    mkdir m4-01-server
    cd m4-01-server
    echo "{}" >> package.json
    npm i --save-dev http-server

Now edit package.json to include a script:

    before:
    {
      "devDependencies": {
        "http-server": "^0.12.3"
      }
    }

    then add:
    {
      "scripts": {
        "start": "http-server"
      },
      "devDependencies": {
        "http-server": "^0.12.3"
      }
    }

Run the server:

    yarn start

Then:

yarn run v1.21.1
warning package.json: No license field
$ http-server
Starting up http-server, serving ./
Available on:
  http://127.0.0.1:8080
  http://192.168.0.199:8080
Hit CTRL-C to stop the server


We did this cuz professor wanted to show that an index.html file opened from this URL (generated by the server) actually loads the file in a request type 'get'. If you just open the index.html file directly by opening the file in the browser, then there is nothing actually being loadded. We can check this difference by dev tools in "network" tab, where file size shows some value (421 bites) in a request and shows zero if opened directly by the browser as a local file.

Static server provides routes in a totally different way. Paths using '/' in the URL mean real/physic folders in it's hard disk. Dynamic servers can handle it in dynamic ways, which is what we are doing by React Routes.


class #008 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
History API (browser history, a HTML5 feature)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/02-spa-concepts/02

Navigation in a front-end application

history API is stored inside window object:

      window.history

method: PUSH STATE

        history.pushState()
        It includes in the history a given URL.

        function handleClick (e) {
          e.preventDefault()
          var state = {}
          var title = ''
          var url = e.target.getAttribute('href')
          history.pushState(state, title, url)
          $h1.textContent = url
        }

Full code:
https://github.com/da2k/curso-reactjs-ninja/blob/master/examples/m04/02-spa-concepts/02/main.js

By this approach, navigation occurs without load the entire page.

that's it. Just a demonstrarion.

class #009 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
History API
method: ON POP STATE
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/02-spa-concepts/03


      window.onpopstate = function (e) {
        console.log('state:', e.state)
        navigation({ url: e.state.url })
      }

      Method onpopstate happens when user clicks in the backwards or forwards buttons in the browser.

      e.state.url gives you the path in the browser, the URL.

Full code:
https://github.com/da2k/curso-reactjs-ninja/blob/master/examples/m04/02-spa-concepts/03/main.js


class #010 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
History API:
method: REPLACE STATE

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/02-spa-concepts/04

Last class, by navigating back and forth in the browser, we get state null when we get back to the starting page/home, because the first state of the application was not defined.

We could just push a initial state when users access the page. But using method 
replaceState that works better.

history.replaceState({ url: '/' }, '', '/')


class #011 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Reload issue

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/02-spa-concepts/05

This issue have to be solved in the server side, on the back-end.

Any kind of request or route inside the domain, must get redirect to the application's initial page.

Terminal:
yarn add --dev serve

This dependency is basicaly already set to work that way.
https://www.npmjs.com/package/serve

script in package.json:

          {
            "scripts": {
              "start": "serve"
            },
            "devDependencies": {
              "http-server": "^0.12.3",
              "serve": "^11.3.2"
            }
          }


serve -s

          {
            "scripts": {
              "start": "serve -s"
            },
            "devDependencies": {
              "http-server": "^0.12.3",
              "serve": "^11.3.2"
            }
          }

What it does? Any route not found will get redirected to home.

That's it. That's the solution. Course won't dive deeper into this.


class #012 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
React Router: Switch component
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router

<Switch /> renders a single route per time.

    import { Switch } from 'react-router-dom'

    <Switch>
      <Route path='/' exact component={Home} />
      <Route path='/about' component={About} />
      <Route path='/blog' component={Blog} />
      <Route component={Error404} />
    </Switch>

const Error404 = () => (
  <h1>Page not found</h1>
)

Route without path would get loaded if not wrapped by <Switch/>

Important to have the error404 at the end, so it gets loaded only if anyone else matches the path.

Without the Switch, this code would load the error404 for all of them.


class #013 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Dynamic / Specific Routes

https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/02




<Route path='/about' component={Page} />
<Route path='/contact' component={Page} />

const Page = ({ match }) => (
  <div>
    {console.log({match})}
    <h1>{Page}</h1>
  </div>
)

But the magic is, insted of:

      <Switch>
        <Route path='/' exact component={Home} />
        <Route path='/about' component={Page} />
        <Route path='/contact' component={Page} />
        <Route path='/blog' component={Blog} />
        <Route component={Error404} />
      </Switch>

How about that: path='/(about|contact)'

      <Switch>
        <Route path='/' exact component={Home} />
        <Route path='/(about|contact)' component={Page} />
        <Route path='/blog' component={Blog} />
        <Route component={Error404} />
      </Switch>


Also. With that current code:

      const Blog = () => (

        <div>
          <h1>Blog</h1>
          <ul>
            <li><Link to='/blog/Jesus'>Post about Jesus's life</Link></li>
            <li><Link to='/blog/Sidarta'>Post about Sidarta's life</Link></li>
          </ul>

          <Route path='/blog/:post' component={Post} />
          <Route exact path='/blog' component={NoPost} />
        </div>
      )

      A URL request with extra characteres would also get loaded:

      http://localhost:3000/blog/JesusDead

      Renders: Post:
      
          JesusDead

      Shit, we've better fix that!

          const Blog = () => (

            <div>
              <h1>Blog</h1>
              <ul>
                <li><Link to='/blog/Jesus'>Post about Jesus's life</Link></li>
                <li><Link to='/blog/Sidarta'>Post about Sidarta's life</Link></li>
              </ul>

              <Route path='/blog/:post(Jesus|Sidarta)' component={Post} />
              <Route exact path='/blog' component={NoPost} />
            </div>
          )

      So with this approach, any extra type in the URL request won't render anything. 

      To achieve something a little better, let's include Switch like we saw earlier:

                const Blog = () => (

                  <div>
                    <h1>Blog</h1>
                    <ul>
                      <li><Link to='/blog/Jesus'>Post about Jesus's life</Link></li>
                      <li><Link to='/blog/Sidarta'>Post about Sidarta's life</Link></li>
                    </ul>

                    <Switch>
                      <Route exact path='/blog' component={NoPost} />
                      <Route path='/blog/:post(Jesus|Sidarta)' component={Post} />
                      <Route component={Post404} />
                    </Switch>
                  </div>
                )

                const Post404 = () => (
                  <h1>This post doesn't exist</h1>
                )

      Super important to remember this is RegEx being passed in the path.
      
      Check this one and try it out at the browser:

                const Blog = () => (
                  <div>
                    <h1>Blog</h1>
                    <ul>
                      <li><Link to='/blog/post-1'>Post 1</Link></li>
                      <li><Link to='/blog/post-2'>Post 2</Link></li>
                      <li><Link to='/blog/post-3'>Post 3</Link></li>
                      <li><Link to='/blog/post-4'>Post 4</Link></li>
                    </ul>

                    <Switch>
                      <Route exact path='/blog' component={NoPost} />
                      <Route path='/blog/:post(post-[1234])' component={Post} />
                      <Route component={Post404} />
                    </Switch>
                  </div>
                )

      As you see, we could use RegEx in deep.


class #014 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
NavLink
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/03

import { NavLink } from 'react-router-dom'

Works pretty much just like <Link>, with one difference:

  - it adds a class 'active' in the clicked NavLink
  - it turns a property 'aria-current' into true if the NavLink was clicked, or false if it's not active.

NavLink checks if the 'to=' property matches the current route.
If the current route at the URL contains the route in 'to'. That means a route like home, '/', would be contained inside every other route. How to prevent this? Using the same prop we use in the Route: exact

    <li><NavLink to='/' exact children='Home' /></li>

OBS: Differently from prof's app, my App actually shows 'aria-current=page' for those selected NavLinks.

Insted of having 'active' class, if you will, we could have another value for that class. Just pass this property:

    activeClassName='active-link'

    With that, it will start to use this custom name for the active NavLink in this single item where you passed it. If you want that name in all options, pass it in all of them.

    <ul>
      <li><NavLink activeClassName='active-link' to='/blog/post-1'>Post 1</NavLink></li>
      <li><NavLink activeClassName='active-link' to='/blog/post-2'>Post 2</NavLink></li>
      <li><NavLink activeClassName='active-link' to='/blog/post-3'>Post 3</NavLink></li>
      <li><NavLink activeClassName='active-link' to='/blog/post-4'>Post 4</NavLink></li>
    </ul>

Inline Style for Active NavLink:

  activeStyle={{ color: 'red' }}

  <ul>
    <li><NavLink activeStyle={{ color: 'red' }} to='/' exact children='Home' /></li>
    <li><NavLink activeStyle={{ color: 'red' }} to='/about' children='About' /></li>
    <li><NavLink activeStyle={{ color: 'red' }} to='/contact' children='Contact' /></li>
    <li><NavLink activeStyle={{ color: 'red' }} to='/blog' children='Blog' /></li>
  </ul>


  Also, in the real world we wouldn't write like this. We would have an component for that:

          const Link = (props) => (
            <NavLink activeStyle={{ color: 'red' }} {...props} />
          )


          <ul>
            <li><Link to='/' exact>Home</Link></li>
            <li><Link to='/about'>About</Link></li>
            <li><Link to='/contact'>Contact</Link></li>
            <li><Link to='/blog'>Blog</Link></li>
          </ul>

class #015 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Prop Render
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/04

Route: path + component

If Route doesn't come with path, component will always get rendered, unless if inside a Switch.

So far, we have been using component= to render.

Why do we need prop Render?

1. If you have an prop in scope that must be passed down.

Ex:

        const NoPost = ({ numberOfPosts }) => (
          <div>
            <p>Select one of the {numberOfPosts} post</p>
          </div>
        )

        For that, we can't just have a Route like this:
        <Route exact path='/blog' component={NoPost} />

        So how can we do? This way:
        <Route exact path='/blog' render={() => <NoPost numberOfPosts={2} />} />

        Prop component= could achieve something close, but with different things going on behind the scene and different results.

              <Route exact path='/blog' component={() => <NoPost numberOfPosts={2} />} />

        That line above "works", but we don't want it. Why?

        Prop render= holds the data in cache and uses when it needs. React Router calls this function when necessary, after have read it and saved in cache.

        Prop component= expect a React component. The function passed in the component would be created every single time when the component is called. So the whole component would have mountings and unmountings not desired. So prop render= optimizes the whole thing.

        So prop render= is great every time we need to pass data to the component, when we can't pass by reference.

         Also, this prop render renders basic JSX, doesn't have to be an etire component. It could be just this:

          <Route exact path='/blog' render={() => <p>Select a post</p>} />

        Also, those props from component= prop, that we saw before, such as 'match', 'location', and 'history'; they are also available when we use render= prop. Like that:

              <Route exact path='/blog' render={(props) => <NoPost numberOfPosts={2} {...props} />} />

              const NoPost = ({ numberOfPosts, match, history, location }) => (
                <div>
                  <p>Select one of the {numberOfPosts} post</p>
                </div>
              )

class #016 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Children prop
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/05


Children as a funtion inside Route component will always get rendered, even without match with path.

Children also receives all props that other components get: match, location, history...

BUT! Those properties are available only when there is a match on the path.

  <Route path='/about'>
    {({ match }) => (
      <pre>
        {console.log('About Page', match)}
        This is About page.
      </pre>
    )}
  </Route>

In this code above, match prop is null unless path has a match.
However, the text 'This is About page.' renders all the time, no matter the path.

So based on the match, our code may take different decisions.

      <Route path='/about'>
        {({ match }) => (
          <pre>
            Is this ABOUT's page? {`${!!match}`}
          </pre>
        )}
      </Route>


Another example:

      const Link = (props) => (
        <Route path={props.to} exact={props.exact}>
          {({ match, history }) => (
            <a
              href={props.to}
              style={match ? { color: 'red' } : null}
              onClick={(e) => {
                e.preventDefault()
                history.push(props.to)
              }}
            >
              {props.children}
            </a>
          )}
        </Route>
      )

      OBS: This is kind of how NavLink works behind the scenes.

class #017 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Pattern "Render Props"

Earlier, we saw the pattern Container Components (Parent) & Presentational Components (Children).

So what is Pattern Render Props?

It's how the Route component works, the way we started to talk about those last few classes.

Route -> prop Children, used as a function

  <Route path={props.to} exact={props.exact}>

                    {({ match, history }) => (
                      <a
                        href={props.to}
                        style={match ? { color: 'red' } : null}
                        onClick={(e) => {
                          e.preventDefault()
                          history.push(props.to)
                        }}
                      >
                        {props.children}
                      </a>
                    )}

  </Route>

  It was known as "children as a function'. Nowadays, it got named as "Render Props".

  It's ok to mix those patterns, you don't have to chose just one.

class #018 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Route props: match
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/06

3 ways to render a component:

  
  - using component
  <Route component={} />
  
  - using render
  <Route render={} />
  
  - using children
  <Route>{() => (<a>{props.children}</a>)}</Route>

Important to mention that we cannot use all at once. Pick one!


match.params:

  <Route path='/(about|contact)' component={Page} />  

        http://localhost:3000/about
          console.log(match.params):
            params: {0: "about"}

  <Route path='/(about|contact)/(1|2)?' component={Page} />

        http://localhost:3000/about
          console.log(match.params):
            params: {0: "about", 1: undefined}
  
        http://localhost:3000/about/1
          console.log(match.params):
            params: {0: "about", 1: "1"}

        http://localhost:3000/about/2
          console.log(match.params):
            params: {0: "about", 1: "2"}


  As shown abovem, using a question mark '?' at the end of your params, you set those as optionals.

    path='/(about|contact)/(1|2)?'

        Above, (about|contact) is not an option
        But (1|2) is an option

    path='/(about|contact)?/(1|2)?'

        Both params are options.

    path='/(about|contact)/:id?'

        http://localhost:3000/about/2
        params: {0: "about", id: "2"}

        http://localhost:3000/about/
        params: {0: "about", id: undefined}

    path='/(about|contact)/:id'

        http://localhost:3000/about/
        Page not found

    Sub routes: Blog

    When a component doesn't have a path, such as:

          <Route component={Post404} />
    
    properties (or the 'match' object if you will) passed throw it actually are the same reference from it's parent, which in 'Post404' case, is 'Blog':

          <Route path='/blog' component={Blog} />


class #019 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Route Props: location (pathname & key)
https://github.com/da2k/curso-reactjs-ninja/tree/master/examples/m04/03-hello-react-router/07

  {
    hash: ""
    key: "ozfnyj"
    pathname: "/about"
    search: ""
    state: undefined
  }

  --> location's data (above) is based on the current route. 

  --> match's data (last class) is based on the current match (route and component).

    hash:
    key:
    pathname:
    search:
    state:

    pathname: which route got the match

      If URL is like: http://localhost:3000/blog/post-1

        Both Blog component and Post component show the same pathname:
        
              pathname: "/blog/post-1"


    key: identifies each route of navigation, like an Id

      Also, if URL is like: http://localhost:3000/blog/post-1

        Both Blog component and Post component show the same key (which is ramdom and changes every time):
          
              key: "ai4qty"

        Key prop is available only when navigation itself starts. Before that, location's object won't show it to you. So home pages mostly won't have a key. It helps to know if user is in the first page of history.

        Every navigation will keep the key. Keys have different value when another routes get trigged. visiting those routes again will show you the previous value of that related key.


class #020 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #021 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #022 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #023 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #024 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #025 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #026 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #027 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #028 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #029 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #020 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #031 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #032 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #033 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #034 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #035 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #036 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #037 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #038 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #039 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #030 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #041 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #042 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #043 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #044 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #045 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #046 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #047 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #048 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #049 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #050 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #051 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #052 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #053 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #054 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #055 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #056 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #057 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #058 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #059 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #060 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #061 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #062 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #063 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #064 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #065 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #066 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #067 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #068 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #069 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #070 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #071 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #072 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #073 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #074 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #075 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #076 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #077 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #078 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #079 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #080 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #081 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #082 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #083 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #084 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #085 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #086 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #087 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #088 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #089 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #090 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #091 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #092 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #093 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #094 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #095 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #096 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #097 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #098 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #099 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #100 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #101 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #102 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #103 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #104 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #105 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #106 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #107 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #108 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #109 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #110 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #111 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #112 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #113 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #114 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #115 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #116 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #117 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #118 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #119 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #120 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #121 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #122 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #123 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #124 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #125 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #126 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #127 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #128 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #129 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #120 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #131 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #132 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #133 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #134 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #135 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #136 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #137 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #138 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #139 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #130 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #141 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #142 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #143 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #144 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #145 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #146 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #147 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #148 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #149 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #150 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #151 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #152 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #153 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #154 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #155 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #156 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #157 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #158 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #159 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #160 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #161 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #162 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #163 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #164 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #165 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #166 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #167 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #168 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #169 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #170 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #171 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #172 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #173 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #174 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #175 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #176 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #177 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #178 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #179 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #180 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #181 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #182 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #183 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #184 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #185 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #186 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #187 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #188 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #189 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #190 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #191 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #192 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #193 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #194 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #195 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #196 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #197 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #198 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #199 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #200 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class #201 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #202 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #203 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #204 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #205 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #206 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #207 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #208 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class #209 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

