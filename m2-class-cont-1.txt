"React.js Ninja" by Fernando Daciuk

* Module 2 *

Class Notes

class #29: TDD Errors Exceptions

TDD

  Exceptions: when a developer tries to pass wrong parameters

  TRY / CATCH


    it('map(1) should throw a TypeError', () => {
      let error

      try {
        map(1)
      } catch (e) {
        error = e
      }

      expect(error.name).to.be.equal('TypeError')
    })

  
    it('map(1) should throw a TypeError with a message "The first parameter must be an array"', () => {
      let error

      try {
        map(1)
      } catch (e) {
        error = e
      }

      expect(error.message).to.be.equal('The first parameter must be an array')
    })

See error types at:

  https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Error
  
  Most used: ReferenceError + TypeError


  class #30:  Storybook

    https://storybook.js.org/

    Instalação do getstorybook global:

      npm i -g getstorybook@1.6.1

    Posteriormente, instalação no projeto (já existente):

      getstorybook

    E então, rodar o storybook:

      npm run storybook

    A ideia do storybook é para que você possa visualizar todos os estados da sua aplicação ou de todos os componentes da sua aplicação, separados por "histórias". Um guia visual de seus componentes e seus estados. Permitindo testes visualmente. Você pode criar os componentes de forma genérica, para que sejam reutilizados em diferentes projetos, para posterior montagem.

    class #31: Assets no webpack

      raw-loader + style-loader:

        npm install --save-dev raw-loader@0.5.1 style-loader@0.13.1

      
    Do some config at:
    
      webpack.config.js

        Originally:

          module: {
              loaders: [{
                  test: /\.js$/,
                  exclude: /node_modules/,
                  include: /src/,
                  loader: 'babel'
              }]
          }

        Then make it like that:

          module: {
              loaders: [{
                  test: /\.js$/,
                  exclude: /node_modules/,
                  include: /src/,
                  loader: 'babel'
              }, {
                  test: /\.css$/,
                  exclude: /node_modules/,
                  include: /src/,
                  loaders: ['style','raw']
              }]
          }

    However.... 'create react-app' already come with those imports by default. This class just shows how it works.


  class #32:  Assets: html

    npm i --save-dev html-webpack-plugin

  webpack.config:

    const htmlPlugin = require('htmp-webpack-pplugin')

    plugins: [
        new htmlPlugin()
    ],


  Also changing this:

      output: {
        path:path.join(__dirname, 'dist'),
        filename: 'bundle.js',
        publicPath: '/dist/'
      },

  To this:

      output: {
        path:path.join(__dirname, 'dist'),
        filename: 'bundle.js',
        publicPath: ''
      },

  Also:

      plugins: [
        new webpack.HotModuleReplacementPlugin(),
        new htmlPlugin({
            title: 'Github app TESTE',
            template: path.join(__dirname, 'src', 'html', 'template.html')
        })
      ],


  AJS:

    template.html:

      <title><%= htmlWebpackPlugin.options.title %></title>

  Every time you change the webpack.config.js, you have to reset the server.

  Also change this:

      output: {
        path:path.join(__dirname, 'dist'),
        filename: 'bundle.js',
        publicPath: ''
      },

  To this:

      output: {
        path:path.join(__dirname, 'dist'),
        filename: '[name]-[hash].js',
        publicPath: ''
      },

  This webpackplugin will render the JS by itself when the server is started:

  Listening on http://localhost:3000
  Hash: 0139364cfaff48101586
  Version: webpack 1.15.0
  Time: 2836ms
                            Asset       Size  Chunks             Chunk Names
      main-0139364cfaff48101586.js    1.23 MB       0  [emitted]  main
  main-0139364cfaff48101586.js.map    1.44 MB       0  [emitted]  main
                        index.html  232 bytes          [emitted]  
  chunk    {0} main-0139364cfaff48101586.js, main-0139364cfaff48101586.js.map (main) 1.13 MB [rendered]


  class #33:  Assets: css

  extract text webpack plugin:

    npm i --save-dev extract-text-webpack-plugin
    (npm install --save-dev extract-text-webpack-plugin@1.0.1)

    webpack.config:

    const extractTextPlugin = require('extract-text-webpack-plugin')

        plugins: [
          new webpack.HotModuleReplacementPlugin(),
          new ExtractTextPlugin('style.css'),
          new htmlPlugin({
              title: 'Github app',
              template: path.join(__dirname, 'src', 'html', 'template.html')
          })
        ],

        So 'style.css' is the file to be created in memory
        But at the end we changed it to:
          new extractTextPlugin('[name]-[hash].css'),
        That render something like: "main-fb95e8f73fa5dd94b203.css"

    Also:

        module: {
          preLoaders: [{
              test: /\.js$/,
              exclude: /node_modules/,
              include: /src/,
              loader: 'standard'
          }],

          loaders: [{
              test: /\.js$/,
              exclude: /node_modules/,
              include: /src/,
              loader: 'babel'
          }, {
              test: /\.css$/,
              exclude: /node_modules/,
              include: /src/,
              loader: ExtractTextPlugin.extract('style', 'raw') // <== EDITED
          }]
        }

        it's going to use the second parameter, 'raw'. it uses the first parameter as a fall back, 'style', so only in case we get problems at 'raw'


        Part 2.
        
        css-loader insted of raw-loader

          Why? Cuz it understands @import and url(...)

          So first we remove the raw loader:

            npm rm --save-dev raw-loader
        
          Then install the css loader:

            npm i --save-dev css-loader
            (npm i --save-dev css-loader@0)

          Then edit a line here:

              module: {
                preLoaders: [{
                    test: /\.js$/,
                    exclude: /node_modules/,
                    include: /src/,
                    loader: 'standard'
                }],

                loaders: [{
                    test: /\.js$/,
                    exclude: /node_modules/,
                    include: /src/,
                    loader: 'babel'
                }, {
                    test: /\.css$/,
                    exclude: /node_modules/,
                    include: /src/,
                    loader: extractTextPlugin.extract('style', 'css') // <== EDITED
                }]
              } 

  class #34:  Gerando o bundle de produção

  https://github.com/fdaciuk/workflow-reactjs


copy webpack.config.js and rename one of them as webpack.prod.config.js

at webpack.config.js

  get rid of:

    - loader: extractTextPlugin.extract('style', 'css')
    replace with: loaders: ['style', 'css']

  change loaders to:

    - loaders: ['style', 'css'] // so we have the hot loader working on development

at webpack.prod.config.js

  get rid of:

    - devtool: 'sourcemap',

    entry:
    - 'react-hot-loader/patch',
    - 'webpack-dev-server/client?http://localhost:3000',
    - 'webpack/hot/only-dev-server',

    output:
    - publicPath: ''

    plugins:
    - new webpack.HotModuleReplacementPlugin(),


  include these plugins:

    - new webpack.DefinePlugin({
      'process.env': {
          'NODE_ENV': '"production'
      }
    }),

    - new webpack.optimize.UglifyJsPlugin({
        compress: { warnings: false } // removed some warnings for CSS and JS, on minifications.
    }),

    - new webpack.optimize.DedupePlugin(), // allows the app to use same plugins' files in diferent dependencies calls. When the code is the same, webpack will recognize it and avoid duplications.
    - new webpack.optimize.OccurrenceOrderPlugin(), // webpacks files generate some ID's. This creates a better order, it loads soft chuncks before the heaviers.


package.json changes:

    "scripts": {
        "start": "node server.js",
        "build": "webpack --progress --config webpack.prod.config -p" // NEW LINE
      },

    Then run at Terminal:

      npm run build // this is the creating of the 'production build'



  class #35:  Webpack Dashboard

  Install:

    npm i --save-dev webpack-dashboard

  Then edit webpack.config.js (dev):

    const DashboardPlugin = require('webpack-dashboard/plugin')

    plugins: [
        new webpack.HotModuleReplacementPlugin(),
        new extractTextPlugin('[name]-[hash].css'),
        new DashboardPlugin(),

        new htmlPlugin({
            title: 'Github app',
            template: path.join(__dirname, 'src', 'html', 'template.html')
        })
    ],

  Then edit package.json:

      "scripts": {
        "start": "webpack-dashboard -- node server.js", // <== EDITED
        "build": "webpack --progress --config webpack.prod.config -p"
      },

  class #36:  Modularizando o CSS



  class #37:  CSS Modules

    webpack.config:

      loaders: ['style', 'css?modules']

      it creates random classes locally.


    Doubt and professor's answer:

      Mestre, a respeito de 'css?modules', como poderíamos ajustar o código abaixo?

        import React, { PropTypes } from 'react'
        import style from './repos.css'

        const Repos = ({ className, title, repos }) => (
          <div className={style.className}>
            <h2>{title}</h2>
            <ul>
              {repos.map((repo, index) => (
                <li key={index}>
                  <a href={repo.link}>{repo.name}</a>
                </li>
              ))}
            </ul>
          </div>
        )

      A linha da div tag originalmente estava:

        <div className={className}>

      Mas na aula você focou no componente search.js, que é levemente mais simples. Eu testei adicionando o style mas, obviamente, nesse caso não funciona. Devo concatenar 'style.' com o className? Ou será que nesse caso o css?module não funciona?

      Oi @pamplonapaulo! Boa dúvida, vamos lá:
      Quando estamos usando CSS Modules, o import que você faz vai te retornar um objeto com todas as classes que você definiu no arquivo CSS.

      Se o seu CSS estiver assim:

        .container {}
        .link {}
        .label {}

      Quando importar o CSS como você fez, você terá essas classes disponíveis como propriedades do objeto style. Para usá-las, é só usar a sintaxe de objeto.

      Para aplicar a classe .container na div, por exemplo, você só precisa fazer:

        <div className={style.container}>...</div>

      Se o nome da classe for dinâmica, ou não tiver caracteres permitidos para ser usada com a sintaxe de ponto, podemos usar a sintaxe de colchetes (JS padrão):

        const myClass = 'container'
        ...
        <div className={style[myClass]}>...</div>

      Exemplo de classe que não poderia ser usada com a sintaxe de ponto:

        .link-active {}

      Aí você pode usar assim:

        <div className={style['link-active']}>...</div>

      Deu pra entender a ideia? :)







  class #38: Assets: Critical Rendering Path

    - Unoptimized: user gets everything rendered at once only at 1.5s, for example.
    - Optimized: user starts to get something rendered at 0.3s, for example.

    Above the fold ('acima da dobra' da página, onde o user começa a ver a página, before any scroll)

      So make sure your website renders above the fold as fast as possible, then let it keep rendering bellow the fold async and inside the <body>.

      There are a few thecniques to make this job better.

      Tip: 

        Load the CSS from 'above the fold' elements before everything else. And use inline style.

        <link> tag and <script> tag both block page's render. So put everything you need to load after the 'above the fold' stuff.

        webpack.prod.config.js
        new htmlPlugin({
          title: 'Github app',
          inject: false, // <== NEW (it removes Styles and Scripts)
          template: path.join(__dirname, 'src', 'html', 'template.html')
        })

        template.html:

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title><%= htmlWebpackPlugin.options.title %></title>
            <style></style> // <== NEW (the called 'Critical Rendering Path' goes here)
        </head>
        <body>
            <div data-js="app"></div>

            <link rel="stylesheet" href=""> // <== NEW (other styles goes here)
            <script src=""></script> // <== NEW
        </body>
        </html>


  class #39: Assets: Critical Rendering Path OPT

    webpack.prod.config.js:

      const crp = new ExtractTextPlugin('crp.css')
      const styles = new ExtractTextPlugin('[name]-[hash].css')

        plugins: [
          crp,
          styles,

          Etc..


      Changes on loaders:

          module: {
            preLoaders: [{
                test: /\.js$/,
                exclude: /node_modules/,
                include: /src/,
                loader: 'standard'
            }],

            loaders: [{
                test: /\.js$/,
                exclude: /node_modules/,
                include: /src/,
                loader: 'babel'
            }, {
                test: /\.css$/,
                exclude: /node_modules|(search|style)\.css/,
                include: /src/,
                loader: styles.extract('style', 'css')
            }, {
                test: /(search|style)\.css$/,
                exclude: /node_modules/,
                include: /src/,
                loader: crp.extract('style', 'css')
            }]
          } 


      Then at template.html file:

        <body>
          <div data-js="app"></div>

          <% htmlWebpackPlugin.files.js.forEach((jsFile) => { %>
              <script async src="<%= jsFile %>"></script>
          <% }) %>

          <% htmlWebpackPlugin.files.css.forEach((cssFile) => { %>
            <% if(cssFile !== 'crp.css') { %>
              <link rel="stylesheet" href="<%= cssFile %>">
            <% } %>
          <% }) %>

        </body>


  class #40: Now fix the dev environment by creating a template-dev.html

    Just get rid of all those last changes and save as template-dev.html, then change it at webpack.config.js (which is the webpack for development we have been using)
  

  class #41: cross-env

    Ambiente para a geração do bundle

      npm i --save-dev cross-env

    Then edit package.json:

    "scripts": {
      "start": "webpack-dashboard -- node server.js",
      "build": "cross-env NODE_ENV=production webpack --progress --config webpack.prod.config -p" // <== EDITED
    },

    This helps to get your bundle file lighter.
    
    Now run the build again and check how smaller the file is:

      npm run build

    
  class #42: alias with webpack

    This is what help us to avoid relative directories such as:

      import Search from '../search'
      import UserInfo from '../user-info'
      import Actions from '../actions'
      import Repos from '../repos'

      Or even worst.

    By editing webpack.config like this:

        resolve: {
            alias: {
                src: path.join(__dirname, 'src'),
                components: path.join(__dirname, 'src', 'components')
            }
        }

    We gonna be able to type our directories this way:

      import Search from 'components/search'
      import UserInfo from 'components/user-info'
      import Actions from 'components/actions'
      import Repos from 'components/repos'

    When things get more complex, we will be glad there is this option.

    But please make sure we are not using folders named just like the ones we may find inside node_modules. This would be a big problem.


  class #43: Storybook settings in an existent project

    1. Make sure we got the global install:

      npm i -g getstorybook
      (npm i -g getstorybook@1.6.1)

    2. Then run it at the root of your application:

      getstorybook

    3. To run your storybook, type:

      npm run storybook 

    4. Write the story file inside the component's folder:

      repos.story.js

        import { storiesOf } from '@kadira/storybook'
        import React from 'react'

        storiesOf('Div', module)
          .add('first story', () => (
            <div>Hello</div>
          ))

  
  class #44: Storybook settings in an existent project


    1. Real stories:

    actions.story.js:

      'use strict'

      import { storiesOf } from '@kadira/storybook'
      import React from 'react'
      import Actions from './index'

      storiesOf('Actions', module)
        .add('first story', () => (
          <Actions 
            getRepos={() => {}}
            getStarred={() => {}}
          />
        ))

    -> Each story should be an different state of the component

      import { storiesOf, action } from '@kadira/storybook'
      import React from 'react'
      import Actions from './index'

      const stories = storiesOf('Actions', module)

      stories.add('first story', () => (
        <Actions 
          getRepos={action('Get repos')}
          getStarred={action('Get starred')}
        />
      ))

      stories.add('second story', () => (
        <Actions 
          getRepos={action('Get repos')}
          getStarred={action('Get starred')}
        />
      ))


    class #45: Storybook webpack extensions

    So insted of having storybook webpack.config like that:

      'use strict'

      module.exports = {
        module: {
          preLoaders: [{
            test: /\.js$/,
            exclude: /node_modules/,
            include: /src/,
            loader: 'standard'
          }],

          loaders: [{
              test: /\.css$/,
              exclude: /node_modules/,
              include: /src/,
              loaders: ['style', 'css?modules']
          }]
        }
      }

    You should extend from the original files, not having this kind of duplication. How it is?

    https://storybook.js.org/docs/configurations/custom-webpack-config/

      This is from the current website - it didn't work that way:

      Using Your Existing Config
      If you have an existing webpack config for your project and want to reuse this app’s configuration, you can either:

      Import your main webpack config into Storybook’s .storybook/main.js and merge the 2 configs.
      Example replacing the loaders from storybook with the loaders from your app’s webpack.config.js

      const path = require('path');

      // your app's webpack.config.js
      const custom = require('../webpack.config.js');

      module.exports = {
        webpackFinal: (config) => {
          return { ...config, module: { ...config.module, rules: custom.module.rules } };
        },
      };

      This is professor's code - it didn't work neighter:

      const webpackConfig = require('@kadira/storybook/dist/server/config/defaults/webpack.config.js')

      module.exports = function (config, env) {
        const newConfig = webpackConfig(config, env)

        newConfig.module.preLoaders = [{
          test: /\.js$/,
          exclude: /node_modules/,
          include: /src/,
          loader: 'standard'
        }]

        return newConfig
      }

      Professor's code didn't work cuz of my use of css?modules.

      Final professor's code:

        const webpackConfig = require('@kadira/storybook/dist/server/config/defaults/webpack.config.js')

        module.exports = function (config, env) {
          const newConfig = webpackConfig(config, env)

          newConfig.module.preLoaders = (newConfig.module.preLoaders || []).concat({
            test: /\.js$/,
            exclude: /node_modules/,
            include: /src/,
            loader: 'standard'
          })

          return newConfig
        }


      class #46 - Storybook - localização do arquivo de config, linter e static build

      Folder: .storybook

        Rename it to: storybook

      Package.json: scripts:

        Insted of:
        "storybook": "start-storybook -p 6006 -c storybook",
        "build-storybook": "build-storybook"

        Change it to:
        "storybook": "start-storybook -p 6006 -c storybook",
        "build-storybook": "build-storybook -c storybook"

      At storybook/webpack.config.js

        remove it:

          include: /src/,

        Now Linter will be running on eveything. So double check the warnings.


      build-storybook:

       in case you need a static server to access your stories

        npm run build-storybook

      it creates a folder called storybook-static

      So we run this command when we want to generate our static files to move it to a static server.

      Static vs.

        Roughly speaking, a server can serve either static or dynamic content. "Static" means "served as-is". Static websites are the easiest to set up, so we suggest you make your first site a static site. "Dynamic" means that the server processes the content or even generates it on the fly from a database.


      class #47 - Storybook - creating stories for other components



        










