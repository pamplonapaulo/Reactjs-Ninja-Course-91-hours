"React.js Ninja" by Fernando Daciuk

* Module 2 *

Class Notes

class #29: TDD Errors Exceptions

TDD

  Exceptions: when a developer tries to pass wrong parameters

  TRY / CATCH


    it('map(1) should throw a TypeError', () => {
      let error

      try {
        map(1)
      } catch (e) {
        error = e
      }

      expect(error.name).to.be.equal('TypeError')
    })

  
    it('map(1) should throw a TypeError with a message "The first parameter must be an array"', () => {
      let error

      try {
        map(1)
      } catch (e) {
        error = e
      }

      expect(error.message).to.be.equal('The first parameter must be an array')
    })

See error types at:

  https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Error
  
  Most used: ReferenceError + TypeError


  class #30:  Storybook

    https://storybook.js.org/

    Instalação do getstorybook global:

      npm i -g getstorybook@1.6.1

    Posteriormente, instalação no projeto (já existente):

      getstorybook

    E então, rodar o storybook:

      npm run storybook

    A ideia do storybook é para que você possa visualizar todos os estados da sua aplicação ou de todos os componentes da sua aplicação, separados por "histórias". Um guia visual de seus componentes e seus estados. Permitindo testes visualmente. Você pode criar os componentes de forma genérica, para que sejam reutilizados em diferentes projetos, para posterior montagem.

    class #31: Assets no webpack

      raw-loader + style-loader:

        npm install --save-dev raw-loader@0.5.1 style-loader@0.13.1

      
    Do some config at:
    
      webpack.config.js

        Originally:

          module: {
              loaders: [{
                  test: /\.js$/,
                  exclude: /node_modules/,
                  include: /src/,
                  loader: 'babel'
              }]
          }

        Then make it like that:

          module: {
              loaders: [{
                  test: /\.js$/,
                  exclude: /node_modules/,
                  include: /src/,
                  loader: 'babel'
              }, {
                  test: /\.css$/,
                  exclude: /node_modules/,
                  include: /src/,
                  loaders: ['style','raw']
              }]
          }

    However.... 'create react-app' already come with those imports by default. This class just shows how it works.


  class #32:  Assets: html

    npm i --save-dev html-webpack-plugin

  webpack.config:

    const htmlPlugin = require('htmp-webpack-pplugin')

    plugins: [
        new htmlPlugin()
    ],


  Also changing this:

      output: {
        path:path.join(__dirname, 'dist'),
        filename: 'bundle.js',
        publicPath: '/dist/'
      },

  To this:

      output: {
        path:path.join(__dirname, 'dist'),
        filename: 'bundle.js',
        publicPath: ''
      },

  Also:

      plugins: [
        new webpack.HotModuleReplacementPlugin(),
        new htmlPlugin({
            title: 'Github app TESTE',
            template: path.join(__dirname, 'src', 'html', 'template.html')
        })
      ],


  AJS:

    template.html:

      <title><%= htmlWebpackPlugin.options.title %></title>

  Every time you change the webpack.config.js, you have to reset the server.

  Also change this:

      output: {
        path:path.join(__dirname, 'dist'),
        filename: 'bundle.js',
        publicPath: ''
      },

  To this:

      output: {
        path:path.join(__dirname, 'dist'),
        filename: '[name]-[hash].js',
        publicPath: ''
      },

  This webpackplugin will render the JS by itself when the server is started:

  Listening on http://localhost:3000
  Hash: 0139364cfaff48101586
  Version: webpack 1.15.0
  Time: 2836ms
                            Asset       Size  Chunks             Chunk Names
      main-0139364cfaff48101586.js    1.23 MB       0  [emitted]  main
  main-0139364cfaff48101586.js.map    1.44 MB       0  [emitted]  main
                        index.html  232 bytes          [emitted]  
  chunk    {0} main-0139364cfaff48101586.js, main-0139364cfaff48101586.js.map (main) 1.13 MB [rendered]


