"React.js Ninja" by Fernando Daciuk

* Module 2 *

Class Notes




      class #50 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Pagination (starting)

        Test env.

        Install:
        jest-cli + babel-jest + chai

        Run:

          yarn add --dev jest-cli babel-jest chai
          ==> (yarn add --dev jest-cli@15 babel-jest@15 chai)

        Make some dirs:

        src/ utils

            / utils / pagination

        New files:

            / pagination / index.js
            / pagination / pagination.test.js




      class #51 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Setting up 'linter'

      Since jest test watch has it's own interface to run tests, linter needs another extra command. We already got standard and standar-loader. So at our package.json:

        "scripts": {
          "lint": "standard"
        }

      But if you have a try, you will see it's poor and not enough, we can improve the way it shows our errors.

      Some extra installs: snazzy  + gulp

        yarn add --dev snazzy

      One extra change at package.json:

        "scripts": {
          "lint": "standard --verbose | snazzy"
        }

      Boom. Now we have much more details about Linter's warnings. Run "yarn lint" to check this out.

      Also: Lint:Fix

        "scripts": {
          "lint": "standard --verbose | snazzy",
          "lint:fix": "standard --fix"
        }

      Running "yarn lint:fix" fixes the problem.

      However... By default 'standard' doesn't come with a 'watch' tool. So let's install something else: GULP

        yarn add --dev gulp
        For this class 'back in time': (npm i --save-dev gulp@3.9.1)

        Warning: we supposed to chose between YARN and NPM, not use both.

      At our root create a 'github-app/gulp.File.js'

      Edit it:

        'use strict'

        const gulp = require('gulp')
        const { spawn } = require('child_process')

        gulp.task('lint', (cb) => {
          const cmd = spawn('yarn', ['lint'], { stdio: 'inherit'})
          cmd.on('close', () => cb())
        })

        gulp.task('default', ['lint'], () => {
          gulp.watch('src/**/*.js', ['lint'])
        })

      Then run the watch at Terminal:

        yarn lint:watch



      
      class #52 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Paginação - implementação inicial

          So this class starts with Daciuk running:

          1. JEST

            yarn test:watch (which is the testing server)

              (and actually it runs:
                yarn test -- --watch
                plus
                jest --coverage --watch
              )

            Since our package.json includes those scripts:

                "scripts": {
                  "test": "jest --coverage",
                  "test:watch": "yarn test -- --watch",
                }, (and more not showed here)

          2. LINT

            At another Terminal window, Daciuk also runs:

              yarn lint:watch (which watches lint issues)


        If both are watching stuff nicely, move on...
        
        Now at:

          utils/pagination/pagination.test.js

            'use strict'

            import { expect } from 'chai'
            import pagination from './index'

            test('pagination should be a function', () => {
              expect(pagination).to.be.a('function')
            })

          // But 'test' is a global function, and 'standard' still doesn't know about global functions. So let's include something else at package.json to let 'standard' understand those global functions:

          package.json (at the bottom):

            "standard": {
              "globals": [ "test", "it", "describe" ]
            }
            


          utils/pagination/index.js


          {
              "presets": ["es2015", "stage-0", "react"],
              "plugins": ["react-hot-loader/babel"]
          }

          OK. I got a real issue and stared over my folder from professor's WorkFlow folder link.

          Then back to the code, typing the function pagiantion and it's test.

          Just a reminder about 'destructuring' (from ES6):

          Normally we use to code like that:

            const pagination = (params) => {
            }

          With destructuring, here is the new way:

            const pagination = ({ total, activePage }) => {
            }

        

          So far, our component still that simple:

            const pagination = ({ total, activePage }) => {
              let pages = []
              for (let i = 0; i < total; i++) {
                pages.push(i + 1)
              }

              return pages
            }

          But much cooler than that is that 'hack' (possible since ES5):

            const pagination = ({ total, activePage }) => {
              return Array.apply(null, { length: total }).map((_, i) => i + 1)
            }

            OBS: The underscore means we are not using map's first parameter, which would be the 'value' (or 'item' if you will). We are taking just the index, which is the second parameter.

          And there is the solution from ES6: from()

            from's second parameter is already the 'map' method. So:

            return Array.from({ length: total }, (_, i) => i + 1)


          Thinking about the needs:

          Logic rules:

            1. Pagination always shows the first page and the last page
            2. Pagination always shows the nearest pages
            3. Etc (...) cannot replace a single page, it have to be more two or more.

          So our schema looks like:

          Pages'amount    |   Active page   |   Rendered

          5                 1                 [1, 2, 3, 4, 5]
          5                 2                 [1, 2, 3, 4, 5]
          5                 3                 [1, 2, 3, 4, 5]
          5                 4                 [1, 2, 3, 4, 5]
          5                 5                 [1, 2, 3, 4, 5]

          6                 1                 [1, 2, 3, ..., 6]
          6                 2                 [1, 2, 3, ..., 6]
          6                 3                 [1, 2, 3, 4, 5, 6]
          6                 4                 [1, 2, 3, 4, 5, 6]
          6                 5                 [1, ..., 4, 5, 6]
          6                 6                 [1, ..., 4, 5, 6]

          7                 1                 [1, 2, 3, ..., 7]
          7                 2                 [1, 2, 3, ..., 7]
          7                 3                 [1, 2, 3, 4, ..., 7]
          7                 4                 [1, 2, 3, 4, 5, 6, 7]
          7                 5                 [1, ..., 4, 5, 6, 7]
          7                 6                 [1, ..., 5, 6, 7]
          7                 7                 [1, ..., 5, 6, 7]


          Tratamento de exceções (erros):

          1 - Dev esqueceu de passar param 'active':

          test('pagination({ total: 15 }) should return [1, 2, 3, "...", 15]', () => {
            const params = { total: 15 }
            const result = [1, 2, 3, '...', 15]
            expect(pagination(params)).to.be.deep.equal(result)
          })

          No caso, queremos que o código assuma que a página ativa é a 1.

            const pagination = ({ total, activePage = 1 }) => { }

          And just that we got it.

          2 - Dev esqueceu de passar param 'active' e 'total':

            E também queremos que o código assuma que o outro parâmetro esquecido também seja igual a 1, isto é, total = 1.

            const pagination = ({ total = 1, activePage = 1 }) => { }

          3 - Dev esqueceu de passar tudo:

          test('pagination() should return [1]', () => {
            const result = [1]
            expect(pagination()).to.be.deep.equal(result)
          })

          Vale a mesma regra: valores esquecidos serão '1':

            const pagination = ({ total = 1, activePage = 1 } = {}) => { }

          4 - Dev passa string ao invés de number:

          pagination.test.js:

            test('pagination({ total: 1, activePage: "abc" }) should throw an error', () => {
              const params = { total: 1, activePage: 'abc' }
              const result = 'activePage should be a number'
              try {
                pagination(params)
              } catch (e) {
                expect(e.message).to.be.equal(result)
              }
            })

          pagination.js:

            const isNumber = (value) => typeof value === 'number'

            const pagination = ({ total = 1, activePage = 1 } = {}) => {
              if (!isNumber(total)) {
                throw new TypeError('total should be a number')
              }

              if (!isNumber(activePage)) {
                throw new TypeError('activePage should be a number')
              }



          * * *  Pagination StoryBook

          Create an alias at:

          storybook/webpack.config.js

            const path = require('path')

            newConfig.resolve = {
              alias: {
                utils: path.join(__dirname, '..', 'src', 'utils')
              }
            }


        Abstracting the  Webpack standard config


        1. webpack.config.js
        2. webpack.prod.config.js
        3. storybook/webpack.config.js
          
        Don't Repeat Yourself!

          So...Take a look at what is inside the webpack folder of github-app:

            common.js
            dev.config.js
            prod.config.js

            

      class #69 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      PropType "Shape"

      It sets a custom object type.

        const reposPropTypeShape = {
          repos: PropTypes.array.isRequired,
          pagination: PropTypes.object
        }

        AppContent.propTypes = {
          repos: PropTypes.shape(reposPropTypeShape).isRequired,
          starred: PropTypes.shape(reposPropTypeShape).isRequired,
        }

        Repos.propTypes = {
          repos: PropTypes.shape({
            repos: PropTypes.arrayOf(PropTypes.shape({
              link: PropTypes.string.isRequired,
              name: PropTypes.string.isRequired,
            })).isRequired,
            pagination: PropTypes.shape({
              total: PropTypes.number,
              activePage: PropTypes.number
            }).isRequired
          })
        }        




      class #72 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Webpack v2

      Breaking Changes
      
      https://github.com/fdaciuk/workflow-reactjs
      (workflow with ReactJS + Webpack 3+)


      class #76 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Tree Shaking: comes with the WebPack 2, it discards stuff from imports that actually are not being used. So libs written in ES6 that have a lot of things may be used just for what you really need, the final bundle doesn't take everything.




      class #77 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Promises

        Feature nova do ES6.

        It runs an async function and 'promises' you that is going to return something, eigther with success or fail.

        Most modern browsers now come with a global consrtuctor object Promise.

        Never use resolve and reject together. Pick one.

        1 - Resolved case:

          const promise = new Promise((resolve, reject) => {
            resolve('resolved')
          })

          promise.then((result) => console.log(result))

          // resolved

        2 - Rejected case:

          const promise = new Promise((resolve, reject) => {
            reject('rejeitar')
          })

          promise.then((result) => console.log(result))

          // rejeitar

          (node:21995) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)

          (node:21995) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.

        3 - Catch: it handles promise rejections

          const promise = new Promise((resolve, reject) => {
            reject('rejeitar')
          })

          promise
            .then((result) => console.log(result))
            .catch((error) => console.log('ERROR:', error))

          // ERROR: rejeitar


          4 - Real world example: reading a file with promise.

            const fs = require('fs')
            const path = require('path')

            const readFile = (filePath, charset) => new Promise((resolve, reject) => {
              fs.readFile(filePath, charset, (err, result) => {
                if (err) return reject(err)
                resolve(result)  
              })
            })

            readFile(path.join(__dirname, '..', 'package.json'), 'utf8')
              .then((result) => console.log(result))
              .catch((error) => console.log('ERROR:', error))

          5 - Multiples 'then'

          When using multiple THENs, each time a THEN is called what is being returned by the first THEN goes to the next THEN.

          readFile(path.join(__dirname, '..', 'package.json'), 'utf8')
            .then((result) => JSON.parse(result).dependencies)
            .then((dependencies) => console.log(dependencies))
            .catch((error) => console.log('ERROR:', error))

          So this would return:

            {
              'babel-runtime': '^6.26.0',
              preact: '^8.2.5',
              'preact-compat': '^3.17.0',
              'prop-types': '^15.5.10',
              react: '^15.6.1',
              'react-dom': '^15.6.1'
            }




      class #78 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Clean 'dist' folder - webpack Clean plugin

        Instalação do clean-webpack-plugin:
        npm i --save-dev clean-webpack-plugin@0.1.16

        Every time we run build, it creates new hashes, new js and css files named with specific hashes. So cleaning it is a must.

        Then, prod.config.js:

          const CleanPlugin = require('clean-webpack-plugin')

          module.exports = {

            plugins: [
              new CleanPlugin(['dist'], {
                root: common.paths.root,
                exclude: ['any-folder'],
                dry: true
                // 'cheats' the app - actually doesn't delete for real, but shows what would delete. Then if it's corrent remove the 'dry: true' and it will delete for real.
                verbose: false
                // shows what is doing. It comes true by default
              }),

              ...




      class #79 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      async / await
      (later, see also "generators")

        const read = async () => {
          const result = await readFile(path.join(__dirname, '..', 'package.json'), 'utf8')
          // it waits for the await before keep running
          console.log(result)
        }

        read()

        // it works, returns the file.


        const read = () => {
          const result = readFile(path.join(__dirname, '..', 'package.json'), 'utf8')

          console.log(result)
        }

        read()

        // Promise { <pending> }

        Errors: just use try / catch 

          const read = async () => {
            try {
              const result = await readFile(path.join(__dirname, '..', 'package.json'), 'utf8')
              const dependencies = JSON.parse(result).dependencies
              console.log(dependencies)
            } catch (error) {
              console.log('ERROR:', error)
            }
          }




      class #80 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Babel upddate to use async / await (at least when the class was recorded, it was a need):
        
        "devDependencies": {
          "babel-plugin-transform-runtime": "^6.23.0",
        }

        "dependencies": {
          "babel-runtime": "^6.26.0",
        }

        also:

        babellrc.js

          "plugins": [
            ["transform-runtime", {
              "helpers": false,
              "polyfill": false,
              "regenerator": true
            }]
          ]




      class #81 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Storybook update




      class #82 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      updates, put all paths together in webpack/common.js:

        const paths = {
          root: join(__dirname, '..'),
          src: join(__dirname, '..', 'src'),
          dist: join(__dirname, '..', 'dist')
        }

        module.exports = {
          paths,
        }

        Then replaced every single line that calls those paths inside 'webpack' folder.




      class #83 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      code splitting

        make one entry point for each page the application has.

        common.js:

          entry: {
            main: join(paths.src, 'index')
          },

        If it's a single page app, make different "Chunks":
        prod.config.js:
          
          entry: {
            app: common.entry,
            vendor: ['react', 'react-dom']
          },

          The build will create 2 JS 'Chunks', one for each one set above: app & vendor

          Chunckhash:

            output: {
              path: paths.dist,
              filename: '[name]-[chunkhash].js',
              publicPath: '/'
            },

          It creates single hashes for each file, a common hash would be equal for all.
          



      class #84 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      CommonsChunkPlugin

      webpack/prod.config.js:

        module.exports = {

          plugins: [

            new webpack.optimize.CommonsChunkPlugin(vendor),




      class #85 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      CommonsChunkPlugin Options

            new webpack.optimize.CommonsChunkPlugin({
              name: 'react-build',
              chunks: ['main'],
              minChunks: ({ resource }) => (
                /node_modules\/(react(-dom)?|fbjs)\//.test(resource) ||
                /node_modules\/preact(-compat)?\//.test(resource)
              )
            }),

        options:

          name: 'vendor'
          (example)
          
          minChunks: 2
          (minimum amont of imports that a lib or module will have)
          
          minChunks using function (returning true or false):

            minChunks: ({ resource }) => (
              /node_modules/.test(resource)
            )

          'resource' => path of all imports.
          Using Regex inside the arrow function, the filtered files with the match will be returned, becoming part of the chunk.

      Later: see GZip to get shorter files.




      class #86 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Dynamic import

      The common import('') is static. Can't work like a dynamic require:

      What is a dynamic require?

        const title = 'title'
        const Title = require('components' + title)

      Dynamic values such those above can't be passed in a regular static import.
      
        constructor () {
          super()
          this.state = {
            title: '...',
            Component: 'div'
          }
        }

        (...)

        async componentDidMount () {
          const title = await import('components/title')

          this.setState({
            title: await this.getTitle(),
            Component: title.default
          })
        }

        (...)

        The 'default' means here. Without it, ir loads just a object, not the component.

        <this.state.Component>{this.state.title}</this.state.Component>

        My doubts answered by the professor:
        https://github.com/da2k/curso-reactjs-ninja/issues/474




      class #87 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Dynamic import + Linter

      Fixing the lint error from this kind of dynamic import:

      'didn't expect token const title = await import('components/title')'

      PS: Not sure if by this time it's already fixed in ES6 stages.

      This app uses   "presets": ["stage-0"]

      To fix that, first:

        yarn add --dev babel-eslint

      At package.json, include "--parser babel-eslint", like that:

        "lint": "standard --parser babel-eslint --verbose | snazzy"

      Now lint passes the test. But not when run build. So fix this at webpack/common.js, by adding "parser: 'babel-eslint'", like that:

        standardPreLoader: {
          use: {
            options: {
              parser: 'babel-eslint'
            }
          }
        }

        this 'use' can be written in different forms, such as:

        as string:

          use: 'standard-loader'

        as array, if we have more than one loarders:

          use: ['standard-loader', 'somthing-else-loader']

        as object, if we need to pass an config option:

          use: {
            loader: 'standard-loader',
            options: {
              parser: 'babel-eslint'
            }
          }

        also, passing modules would be an array of objects:

          use: [{
            loader: 'standard-loader',
            options: {
              parser: 'babel-eslint'
            }
          }, {
            loader: 'lala-loader',
            query: {
              modules: true
            }
          }]




      class #88 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      File-loader (Webpack)
      Importing other assets byond CSS.

      OBS: RESOLVE != JOIN
        const (resolve, join } = require('path')

        1. Join, just joints paths.
        2. Resolve, from the path/url you are, 'resolve' generates an absolute url.


      File-loader (dir m2/file-loader-example)

        yarn add --dev file-loader

      By default webpack doesn't handle imports of any file format, usually only JS, such as TXT files.

        import name from './name.txt'
        console.log(name)

      webpack.config.js:

        module: {
          rules: [{
            test: /\.txt$/,
            use: 'file-loader'
          }]
        }
        // fb0e8d99d80b3a3f5a5f6c0a76a20e90.txt
      
        Doc & Repo:
        https://github.com/webpack-contrib/file-loader

        module: {
          rules: [{
            test: /\.(txt|jpg|svg|jpeg|png|ico|gif|ttf|woff|off2)$/,
            use: 'file-loader?name=[path][name][hash:8].[ext]'
          }]
        }
        // namefb0e8d99.txt

        Prettier than that is:

          module: {
            rules: [{
              test: /\.(txt|jpg|svg|jpeg|png|ico|gif|ttf|woff|off2)$/,
              use: {
                loader: 'file-loader',
                query: {
                  name: '[path][name]-[hash:8].[ext]'
                }
              }
            }]
          }
          // name-fb0e8d99.txt




        class #89 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        URL Loader
        
        Uses 'file-loader' as fallback.

        Install:

          yarn add --dev url-loader@0.5.8

        webpack.config.js:

          module: {
            rules: [{
              test: /\.txt$/,
              use: {
                loader: 'url-loader'
              }
            }]
          }

        run webpack and check bundle.js: it generated an 'base64' url type.

        query 'limit':

        in bites, sets the limit of each file loaded. If bigger, it will become an separeted file.

          module: {
            rules: [{
              test: /\.txt$/,
              use: {
                loader: 'url-loader',
                query: {
                  limit: 10
                }
              }
            }]
          }

          So since the limit is set to just 10 bites and our file name.txt has 23 bites, the bundle will separate the file in another external chunk.

          url-loader uses file-loader as fallback, so make sure you get both installed before use it.

          Doc & Repo:
          https://github.com/webpack-contrib/url-loader




        class #90 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        raw-loader

        Use it to get a content of the file loaded.

        Install:

        yarn add --dev raw-loader@0.5.1

        webpack.config.js:

          module: {
            rules: [{
              test: /\.txt$/,
              use: 'raw-loader'
            }]
          }

        In this .txt file loaded, we will console.log the content of the name.txt file, as a string:

        // Paulo da Silva Pamplona

        Doc & Repo:
        https://github.com/webpack-contrib/raw-loader




        class #91 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Update boilerplate with these loaders: file-loader + url-loader

        The updated version at this point has:

        package.json:

            "file-loader": "^0.11.2",
            "url-loader": "^0.5.9",


        webpack/common.js:

            fileLoader: {
              test: /\.(ico|jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|txt)(\?.*)?$/,
              include: paths.src,
              use: {
                loader: 'file-loader',
                options: {
                  name: 'media/[name].[hash:8].[ext]'
                }
              }
            },

            urlLoader: {
              test: /\.(mp4|webm|wav|mp3|m4a|aac|oga)(\?.*)?$/,
              include: paths.src,
              use: {
                loader: 'url-loader',
                options: {
                  limit: 10000,
                  name: 'media/[name].[hash:8].[ext]'
                }
              }
            },

        webpack/dev.config.js:

            module: {
              rules: [
                common.standardPreLoader,
                common.jsLoader,
                common.cssLoader,
                common.fileLoader,
                common.urlLoader
              ]
            },

        webpack/prod.config.js:

            module: {
              rules: [
                common.standardPreLoader,
                common.jsLoader,
                common.fileLoader,
                common.urlLoader,
                Object.assign({}, common.cssLoader, {
                  use: ExtractTextPlugin.extract({
                    fallback: common.cssLoader.use[0],
                    use: common.cssLoader.use.slice(1)
                  })
                })
              ]
            },




        class #92 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        this.setState(): batch updates

        A batch update is a set of multiple update statements that is submitted.

        How to get many updates in a row at a state using setState, which is async func? 

        This doesn't work:

          componentDidMount () {
            this.setState({ counter: this.state.counter + 1 })
            this.setState({ counter: this.state.counter + 1 })
            this.setState({ counter: this.state.counter + 1 })
            this.setState({ counter: this.state.counter + 1 })
          }

        React checks all updates being called and run them at once. And 'this.state.counter' didn't change yet when the next line ran.


        Using callbacks we get there:

          componentDidMount () {
            this.setState({ counter: this.state.counter + 1 }, () => {
              this.setState({ counter: this.state.counter + 1 }, () => {
                this.setState({ counter: this.state.counter + 1 }, () => {
                  this.setState({ counter: this.state.counter + 1 })
                })
              })
            })
          }

        What is the best practice?

          componentDidMount () {
            this.setState((state) => { counter: state.counter + 1 })
            this.setState((state) => { counter: state.counter + 1 })
            this.setState((state) => { counter: state.counter + 1 })
            this.setState((state) => { counter: state.counter + 1 })
          }

        By passing 'state' as parameter with no reference to 'this', we make sure that it's value is already updated before running the next line

        The this.state itself will get updated just one time, by the end of everything. It marges each object. So it renders just once, with the final correct value returned from all the batch. There is a performance gain, with less renders.

        The best code for this would be somthing like:

          1. Have an reference function:

            incrementCounter (state) {
              return { counter: state.counter + 1 }
            }

          2. Then call it as many times as you want:

            componentDidMount () {
              this.setState(this.incrementCounter)
              this.setState(this.incrementCounter)
              this.setState(this.incrementCounter)
              this.setState(this.incrementCounter)            
            }

        Also, functions don't have to be the same. Batch can handle different functions, like this extra one:

            incrementCounterByTen (state) {
              return { counter: state.counter + 10 }
            }

            componentDidMount () {
              this.setState(this.incrementCounter)
              this.setState(this.incrementCounter)
              this.setState(this.incrementCounter)
              this.setState(this.incrementCounterByTen)            
            }




        








      









              




          


      
          








      

















        










