"React.js Ninja" by Fernando Daciuk

* Module 2 *

Class Notes


      class #50 - Pagination (starting)

        Test env.

        Install:
        jest-cli + babel-jest + chai

        Run:

          yarn add --dev jest-cli babel-jest chai
          ==> (yarn add --dev jest-cli@15 babel-jest@15 chai)

        Make some dirs:

        src/ utils

            / utils / pagination

        New files:

            / pagination / index.js
            / pagination / pagination.test.js



      class #51 - Setting up 'linter'

      Since jest test watch has it's own interface to run tests, linter needs another extra command. We already got standard and standar-loader. So at our package.json:

        "scripts": {
          "lint": "standard"
        }

      But if you have a try, you will see it's poor and not enough, we can improve the way it shows our errors.

      Some extra installs: snazzy  + gulp

        yarn add --dev snazzy

      One extra change at package.json:

        "scripts": {
          "lint": "standard --verbose | snazzy"
        }

      Boom. Now we have much more details about Linter's warnings. Run "yarn lint" to check this out.

      Also: Lint:Fix

        "scripts": {
          "lint": "standard --verbose | snazzy",
          "lint:fix": "standard --fix"
        }

      Running "yarn lint:fix" fixes the problem.

      However... By default 'standard' doesn't come with a 'watch' tool. So let's install something else: GULP

        yarn add --dev gulp
        For this class 'back in time': (npm i --save-dev gulp@3.9.1)

        Warning: we supposed to chose between YARN and NPM, not use both.

      At our root create a 'github-app/gulp.File.js'

      Edit it:

        'use strict'

        const gulp = require('gulp')
        const { spawn } = require('child_process')

        gulp.task('lint', (cb) => {
          const cmd = spawn('yarn', ['lint'], { stdio: 'inherit'})
          cmd.on('close', () => cb())
        })

        gulp.task('default', ['lint'], () => {
          gulp.watch('src/**/*.js', ['lint'])
        })

      Then run the watch at Terminal:

        yarn lint:watch

      
      class #52 - Paginação - implementação inicial

          So this class starts with Daciuk running:

          1. JEST

            yarn test:watch (which is the testing server)

              (and actually it runs:
                yarn test -- --watch
                plus
                jest --coverage --watch
              )

            Since our package.json includes those scripts:

                "scripts": {
                  "test": "jest --coverage",
                  "test:watch": "yarn test -- --watch",
                }, (and more not showed here)

          2. LINT

            At another Terminal window, Daciuk also runs:

              yarn lint:watch (which watches lint issues)


        If both are watching stuff nicely, move on...
        
        Now at:

          utils/pagination/pagination.test.js

            'use strict'

            import { expect } from 'chai'
            import pagination from './index'

            test('pagination should be a function', () => {
              expect(pagination).to.be.a('function')
            })

          // But 'test' is a global function, and 'standard' still doesn't know about global functions. So let's include something else at package.json to let 'standard' understand those global functions:

          package.json (at the bottom):

            "standard": {
              "globals": [ "test", "it", "describe" ]
            }
            


          utils/pagination/index.js


          {
              "presets": ["es2015", "stage-0", "react"],
              "plugins": ["react-hot-loader/babel"]
          }

          OK. I got a real issue and stared over my folder from professor's WorkFlow folder link.

          Then back to the code, typing the function pagiantion and it's test.

          Just a reminder about 'destructuring' (from ES6):

          Normally we use to code like that:

            const pagination = (params) => {
            }

          With destructuring, here is the new way:

            const pagination = ({ total, activePage }) => {
            }

          
        


            

              




          


      
          








      

















        










