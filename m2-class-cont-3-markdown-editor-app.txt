"React.js Ninja" by Fernando Daciuk

* Module 2 *

Class Notes




        class #94 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        App: Markdown Editor

        
        1.classes são statefull

        2.bind te permite subescrever o 'this' de um call feita:
          this.handleSubmit = this.handleSubmit.bind(this)
          sem ele, o target seria sempre o valor do próprio button clicado - o que não é nosso objetivo.

        3.arrow functions têm 'escopo léxico':
          o 'this' dentro de uma arrow func será o this do escopo da função de fora.

        4.jogue certos métodos dentro do constructor():
          utilize todos os métodos não específicos de life-cycle de react, jogue-os dentro do constructor(), pois assim poderá utilizar o próprio this do componente. Essa abordagem nos permite dispensar o uso excessivo de bind.

        piece of code:

          class App extends Component {
            constructor () {
              super()
              this.state = { value: ''}

              this.handleSubmit = (e) => {
                e.preventDefault()

                this.setState({
                  value: e.target.textarea.value
                })
              }
            }

            handleSubmit (e) {
              e.preventDefault()
              
              this.setState({
                value: e.target.textarea.value
              })
            }

            render () {
              return (
                blablablablabla...
              )
            }
          }

        class #95 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Melhorias

        Se tem-se um componente stateful (que manipula estado), você não deveria ter marcação (markup) nele.

        So insted of:

          class App extends Component {
            constructor () {
              super()
              this.state = { value: ''}

              this.handleChange = (e) => {

                this.setState({
                  value: e.target.value
                })
              }
            }

            handleSubmit (e) {
              e.preventDefault()
              
              this.setState({
                value: e.target.textarea.value
              })
            }

            render () {
              return (
                <div className='editor'>
                  <textarea value={this.state.value} onChange={this.handleChange}/>
                  
                  <div className="view">{this.state.value}</div>
                </div>
              )
            }
          }

        Correct would be:

          class App extends Component {
            constructor () {
              super()
              this.state = { value: ''}

              this.handleChange = (e) => {

                this.setState({
                  value: e.target.value
                })
              }
            }

            handleSubmit (e) {
              e.preventDefault()
              
              this.setState({
                value: e.target.textarea.value
              })
            }

            render () {
              return (
                <MardownEditor
                  value={this.state.value}
                  handleChange={this.handleChange}
                />
              )
            }
          }

          markdown-editor.js:

            'use strict'

            import React, { PropTypes } from 'react'

            const MarkdownEditor = ({ value, handleChange }) => (
              <div className='editor'>
                <textarea value={value} onChange={handleChange}/>
                
                <div className="view">{this.state.value}</div>
              </div>
            )

            MarkdownEditor.propTypes = {
              value: PropTypes.string.isRequired,
              handleChange: PropTypes.func.isRequired
            }

            export default MarkdownEditor

        class #96 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

          Rendering HTML string in a component:

            dangerouslySetInnerHTML={{ __html: value}}


  class #97 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

    Normalize.css:

    terminal:
    yarn add normalize.css

    webpack/common.js edits:

      const paths = {
        normalizeCss: join(__dirname, '..', 'node_modules', 'normalize.css')
      }

      cssLoader: {
        test: /\.css$/,
        include: [paths.src, paths.normalizeCss],
        use: ['style-loader', 'css-loader']
      }
    
    markdown-editor.js:
    import 'normalize.css'

  class #98 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  Rendering markdown code

  js lib to convert html string into markdown: marked
  https://github.com/markedjs/marked

  Terminal:
  yarn add marked

  app.js:
  import marked from 'marked'
  
  code:
  return { __html: marked(this.state.value) }

  class #99 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  colored markdown

  lib: highlight.js

  Terminal:
  yarn add highlight.js

  app.js:
  import highlight from 'highlight.js'

  code:
  marked.setOptions({
    highlight: (code) => {
      return highlight.highlightAuto(code).value
    }
  })

  highlight styles: dracula.css
  import 'highlight.js/styles/dracula.css'

  ajust in webpack/common.js:

  const paths = {
    highlightJs: join(__dirname, '..', 'node_modules', 'highlight.js', 'styles')
  }

  cssLoader: {
    test: /\.css$/,
    include: [paths.src, paths.normalizeCss, paths.highlightJs],
    use: ['style-loader', 'css-loader']
  },

  note: always avoid react to swipe all your node_modules. be as much specific as possible in paths like this one above. 

  note 2: we could also load this style from the css, like that:

    @import '~normalize.css'
    @import '~highlight.js/styles/dracula.css'

  The tilde above means it's inside the node_modules.


  class #100 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  Gerar versão de produção:

  Attention: highlightJs latest version (10.0.3) has issues while compiling, outputs an error with UglifyJs. To fix it, I picked the version 9.18.1

  Reason why:
  Features do ES6 tendem a não serem reconhecidas por uma boa parte dos browsers, então a 'build' é necessária para que o Babel converta o nosso código de ES6 para ES5, removendo a sintaxe mais moderna que ainda pode não ser reconhecida por muitos browsers (import, promises, async/await, etc.)
  
  Terminal:
  yarn build

  'dist' folder will handle the new built files.

  Each chunk will have it's own hash, as separeted files. If nothing changes, user will use the cached file. Users will download only the changes. Hashes identify each bundle.

  Webpack may mark some chunks with flags such as 'big', as an alert that you should try to reduce it's sizes.

  "540kb é inaceitável para o tamanho de um bundle" (Daciuk)



  class #101 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  Analisando o chunk/bundle de produção

  Terminal:
  yarn add webpack-bundle-analyzer

  webpack/prod.config.js:
  const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer')

  plugins: [
    new BundleAnalyzerPlugin(),
    ...

  So in this case, by looking the analyzer, we see that 'highlight.js' is the heaviest file that should be in another chunk alone.


  class #102 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  Estratégias para quebra de chunks

  Edit wepback/prod.config.js:

      new webpack.optimize.CommonsChunkPlugin({
        name: 'react-build',
        chunks: ['main'],
        minChunks: ({ resource }) => (
          /node_modules\/(react(-dom)?|fbjs)\//.test(resource) ||
          /node_modules\/preact(-compat)?\//.test(resource)
        )
      }), // if regex test above returns true, that will be included in the chunk 'main'

      new webpack.optimize.CommonsChunkPlugin({
        name: 'vendor',
        chunks: ['main'],
        minChunks: ({ resource }) => (
          /node_modules/.test(resource)
        )
      }), // if regex test above returns true, that will be included in the chunk 'main'

  It seems that the analyzer may have a bug that messes react itself together with the vendor. But there is a workaround for this issue, by creating extra entry points.

  Edit wepback/common.js:
  At:
    module.exports = {

      // before:
      entry: join(paths.src, 'index')

      // after:
      entry: {
        main: join(paths.src, 'index')
      },

  Then ajust webpack/dev.config.js:

  module.exports = {
  devtool: 'source-map',

    // before:
    entry: [
      common.entry
    ],

    // after:
    entry: [
      common.entry.main
    ],

  Now at webpack/prod.config.js:

  // before:
  new webpack.optimize.CommonsChunkPlugin({
    name: 'react-build',
    minChunks: ({ resource }) => (
      /node_modules\/(react(-dom)?|fbjs)\//.test(resource) ||
      /node_modules\/preact(-compat)?\//.test(resource)
    )
  }),

  new webpack.optimize.CommonsChunkPlugin({
    name: 'vendor',
    minChunks: ({ resource }) => (
      /node_modules/.test(resource)
    )
  }),

  // after:
  new webpack.optimize.CommonsChunkPlugin({
    name: 'react-build',
    chunks: ['main'],
    minChunks: ({ resource }) => (
      /node_modules\/react(-dom)?\//.test(resource) ||
      /node_modules\/preact(-compat)?\//.test(resource)
    )
  }),

  new webpack.optimize.CommonsChunkPlugin({
    name: 'vendor',
    chunks: ['main'],
    minChunks: ({ resource }) => (
      /node_modules/.test(resource)
    )
  }),

  Also moving fbjs, a heavy facebook lib that comes with react:

  // before:
  new webpack.optimize.CommonsChunkPlugin({
    name: 'react-build',
    chunks: ['main'],
    minChunks: ({ resource }) => (
      /node_modules\/react(-dom)?\//.test(resource) ||
      /node_modules\/preact(-compat)?\//.test(resource)
    )
  }),

  // after:
  new webpack.optimize.CommonsChunkPlugin({
    name: 'react-build',
    chunks: ['main'],
    minChunks: ({ resource }) => (
      /node_modules\/(react(-dom)?|fbjs)\//.test(resource) ||
      /node_modules\/preact(-compat)?\//.test(resource)
    )
  }),

  How to control the order that each chunk will be loaded?



  class #103 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  Ordering scripts: chunksSortMode

  webpack/prod.config.js:

  Insted of:
  new HtmlPlugin(common.htmlPluginConfig),

  Have this:
  new HtmlPlugin(Object.assign({}, common.htmlPluginConfig, {
    chunksSortMode: (chunk1, chunk2) => {
      const order = ['react-build', 'vendor', 'main']
      const left = order.indexOf(chunk1.names[0])
      const right = order.indexOf(chunk2.names[0])
      return left - right
    }
  })),

  Also, we can minify more the html built:
  minify: { collapseWhitespace: true }

  Like this:
  new HtmlPlugin(Object.assign({}, common.htmlPluginConfig, {
    minify: { collapseWhitespace: true },

    chunksSortMode: (chunk1, chunk2) => {
      const order = ['react-build', 'vendor', 'main']
      const left = order.indexOf(chunk1.names[0])
      const right = order.indexOf(chunk2.names[0])
      return left - right
    }
  })),

  Finally, how to turn off the analyzer from every time we run a build?

  webpack/prod.config.js:

  // before:
  module.exports = {
    plugins:  all stuff here
  }

  // after:
  module.exports = {
    plugins:  [
      all stuff here
    ].concat(
      process.env.ANALYZER ? new BundleAnalyzerPlugin() : []
    ),
  }



  class #104 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  Async Load - dynamic import:

    import('highlight.js').then((highlight) => {
      marked.setOptions({
        highlight: (code) => {
          return highlight.highlightAuto(code).value
        }
      })
    })

    how does that change things?

    // before:
                              Asset       Size  Chunks                    Chunk Names
       main-26cd8f5053439e24636a.js    2.43 kB       0  [emitted]         main
     vendor-a3b73cbf6129671a2f9f.js     828 kB       1  [emitted]  [big]  vendor
react-build-592fa9a740a5ea7db829.js    20.3 kB       2  [emitted]         react-build
      main-c28a5d9bd0f4658b4773.css    3.02 kB       0  [emitted]         main
                         index.html  434 bytes          [emitted]         


    // after:
                              Asset       Size  Chunks                    Chunk Names
          0-5963a7d712b90a6b4fec.js     784 kB       0  [emitted]  [big]  
       main-efcf4cb0aa7a4d5a3961.js    2.45 kB       1  [emitted]         main
     vendor-652198edb73cbf7e2efc.js      44 kB       2  [emitted]         vendor
react-build-aada6dde560083e80e43.js    20.9 kB       3  [emitted]         react-build
      main-65c3aaf212000625f102.css    3.02 kB       1  [emitted]         main
                         index.html  434 bytes          [emitted]         

    Something else:

      if (lang && highlight.getLanguage(lang)) {
        return highlight.highlight(lang, code).value
      }

    That recognizes the language, when user tell it, changing the set of colors for each language.


    class #105 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Reducing the prod bundle.

    Reducing react: preact
    preactjs.com

    Terminal:
    yarn add preact preact-compact

    webpack/prod.config.js:

      new webpack.optimize.CommonsChunkPlugin({
        name: 'react-build',
        chunks: ['main'],
        minChunks: ({ resource }) => (
          /node_modules\/(react(-dom)?|fbjs)\//.test(resource) ||
          /node_modules\/preact(-compat)?\//.test(resource)
        )
      }),

      resolve: {
        alias: Object.assign({}, common.resolve.alias, {
          'react': 'preact-compat',
          'react-dom': 'preact-compat'
        })
      }



    class #106 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    GZip

    Terminal:
    yarn add express compression

    Subir um servidor Node/Express:
    index.js:
      'use strict'

      const { join } = require('path')
      const express = require('express')
      const compression = require('compression')
      const app = express()

      app.use(compression())
      app.use(express.static(join(__dirname, 'dist')))

      app.get('*', (req, res) => {
        res.sendFile(join(__dirname, 'dist', 'index.html'))
      })

      app.listen(3000, () => console.log('Listening on localhost:3000'))

    // without GZIP:
    main-65c3aaf212000625f102.css			    3.5 kB	2.25 s	
    react-build-aada6dde560083e80e43.js		21.4 kB	2.98 s	
    vendor-652198edb73cbf7e2efc.js	      44.4 kB	3.44 s	
    main-efcf4cb0aa7a4d5a3961.js		      2.9 kB	2.18 s	
    0-5963a7d712b90a6b4fec.js             784 kB	17.30 s	

    // with GZIP:
    main-65c3aaf212000625f102.css	            1.6 kB	14 ms	
    react-build-aada6dde560083e80e43.js	      8.1 kB	14 ms	
    vendor-652198edb73cbf7e2efc.js            15.0 kB	16 ms	
    main-efcf4cb0aa7a4d5a3961.js              1.4 kB	16 ms	
    0-5963a7d712b90a6b4fec.js                 253 kB	49 ms						

    OBS: Many static servers already do this by default.

    class #107 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    React Dev Tools

    class #108 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Data's persistency:
      localStorage.setItem()
      localStorage.getItem()

    1. backend/database
    2. webstorage api (save at user's browser)

    localStorage: glogal object from window

    <button onClick={() => localStorage.setItem('md', value)}>Salvar</button>

    But if you have Lint, must include this on package.json:

      "standard": {
        "globals": [ "localStorage" ]
      },

    Want to check it in the browser?
    => Chrome Dev Tools: Application (tab) => Local Storage => Key / Value

    app.js:
    componentDidMount()
    
      remainding 1: componentDidMount runs only in the front-end.

      remainding 2: object's property when name and value are the same.
        this.setState({ value })
        same as
        this.setState({ value: value })


    #awesome

    class #109 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Refactory: remove actions from our stateless component
    
    Why?

    1. Stateless component shouldn't have any action. It should just receive those funcs via props.
    2. We are using the global var in two different components

    So we removed the logic from markdown-editor to app.js, our stateful component.




    class #110 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    auto save

    just:

      componentDidUpdate () {
        this.handleSave()
      }

    what if it slows down the app's performance? For long data, it will be an issue.

    look at this:

        componentDidUpdate () {
          clearInterval(this.timer)
          this.timer = setTimeout(this.handleSave, 1000)
        }

    what it does?
    once the user keep typing, clearInterval will be nulling the setTimeout on the run. Just the last time will actually work and call the dandleSave function, 1 second after user stopps typing.

    for our sacurity, include this in case component gets unmounted:

      componentWillUnmount () {
        clearInterval(this.timer)
      }


    #awesome


    class #111* * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    feedback autosave to user




    class #112* * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    cleaning localStorage

      this.handleRemove = () => {
        localStorage.removeItem('md')
      }


    remainding 1: short circuit:
      this.setState({ value: value || '' })

    remainding 2:
      every time you use 'componentDidUpdate' and 'this.setState()', check the value of the state, otherwise it may keep in a infinite loop updating it.

    
    class #113* * * * * * * * * * * * * * * * * * * * * * * * * * * * *

    Rest Params: ...props

    Here, MarkdownEditor comp gets and passes props that don't really use itself. There is a better sintax for those situations. In this case, we are talking about "isSaving", "handleRemove" and, "handleCreate".
    
      Insted of this:
        const MarkdownEditor = ({ value, isSaving, handleChange, handleRemove, handleCreate, getMarkup })
      and this:
        <Header isSaving={isSaving} handleRemove={handleRemove} handleCreate={handleCreate} />


      Use like that:
        const MarkdownEditor = ({ value, handleChange, getMarkup, ...props })
      and that:
        <Header {...props} />

    - * -
    prop ref

    <textarea ref={textareaRef} />

    this.handleCreate = () => {
      this.textarea.focus()
    }

    this.textareaRef = (node) => {
      this.textarea = node
    }

    class #114* * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    Reminder: short circuit

      <header>
        {isSaving !== null && (
          <p>Something</p>
        )}
      </header>

    Which means: If 'isSaving' is not null, then show the <p>


    class #115* * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Button Storybook: button.story.js

      'use strict'

      import React from 'react'
      import { storiesOf, action } from '@storybook/react'
      import Button from './index'

      const stories = storiesOf('Button', module)

      stories.addDecorator((story) => (
        <div style={{ display: 'flex', height: 40 }}>
          {story()}
        </div>
      ))

      stories.add('Button success', () => (
        <Button onClick={action('success')} kind='success'>Success</Button>
      ))

      stories.add('Button danger', () => (
        <Button onClick={action('danger')} kind='danger'>Danger</Button>
      ))

    class #116* * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    refactoring

    reminder: componentes de apresentação não devem ter qualquer lógica.


    class #117* * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    About React 15.5 (Yup, the class is old)

    With the new version, we get this warning:
    =>  PropTypes via the main React package is deprecated

      We now have to include it's specific package in package.json:
      "prop-types": "^15.5.10",

      Then, insted of calling like that:
      import React, { PropTypes } from 'react'

      Use:
      import React from 'react'
      import PropTypes from 'prop-types'

      Version 16 was entirely rewritten from scratch, it's true, but it was made behind the scenes. What does that mean? That way, the the applications didn't break.

      The only thing that really changed for us, is the was we import prop-type. It's the 'fiber' version we are talking about.


    class #118 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Lib do Daciuk: strclass

    https://github.com/fdaciuk/strclass

    Adding 'Conditional Classes' in the components

    import strclass from 'strclass'

    console.log(strclass({ highlighted: true }))
    // 'highlighted'

    console.log(strclass({ '-active': true }, 'button'))
    // 'button -active'

    console.log(strclass({ '-active': true }, 'button', 'button-default'))
    // 'button button-default -active'

    console.log(strclass({ active: false }))
    // ''

    It replaces the use of this whole thing:
      className={`button ${kind ? '-' + kind : ''}`}

    Install via Terminal:
    yarn add strclass


    To get this working, fist must fix something by webpack:

    webpack/common.js:

      module: {
        noParse: /\.min\.js$/
      },

    webpack/dev.config.js + webpack/prod.config.js:

      module: {
        noParse: common.module.noParse,

    
    How it works:
    <button onClick={onClick} className={css({ '-success': kind === 'success', '-danger': kind === 'danger' }, 'button')}>

    But the short hand for this daciuk's sintax:
    <button onClick={onClick} className={css({ [`-${kind}`]: kind }, 'button')}>

    Reminder of the old way without this lib:
    <button onClick={onClick} className={`button ${kind ? '-' + kind : ''}`}>

    Weird!


    class #119 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Adicionar novo MD no localStorage

    We need a dynamic value, it can be a ramdom number. Otherwise will replace the same value over and over.

    Node package: node-uuid
    Gives you a random hash.

    Terminal:
    yarn add node-uuid

    Usage:
    import { v4 } from 'node-uuid'

    Call:
    v4()

    Returns:
    9f15256d-683c-4d5f-b2d6-3d5f779835af
    a5393f7c-d450-4ce5-802b-6461bafb5d64
    So on...

    So for our app:

    this.state = {
      value: '',
      id: v4(),
      isSaving: null
    }

    localStorage.setItem(this.state.id, this.state.value)



    class #120 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Access to each of those MD data

    Just css and "markup".

    class #121 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Cont.

    Basicly this will do the job:
    componentDidMount () {
      const files = Object.keys(localStorage)
    }

    By the end something like that:
    componentDidMount () {
      const files = Object.keys(localStorage)
      console.log(files)
      this.setState({
        files: files.reduce((acc, fileId) => ({
          ...acc,
          [fileId]: localStorage.getItem(fileId)
        }), {})
      })
    }

    class #122 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    dynamic file removal

    Reminder: Do not modify objects!

    Insted of:
    delete this.state.files[this.state.id]
    this.setState({ files })

    Code like this:
    let files = { ...this.state.files }
    delete files[this.state.id]
    this.setState({ files })

    But 'delete' is a slow operator. Also for security reasons we gonna avoid colateral effects.

    By the end:

    this.handleRemove = () => {
      localStorage.removeItem(this.state.id)
      let files = Object.keys(this.state.files).reduce((acc, fileId) => {
        return fileId === this.state.id ? acc : {
          ...acc,
          [fileId]: this.state.files[fileId]
        }
      }, {})
      
      this.setState({ files })
      this.createNew()
    }

    Another way:
    const { [this.state.id]: id, ...files } = this.state.files

    But with a extra line to ask linter to ignore it's alert (no-unused-vars):
    // eslint-disable-next-line no-unused-vars
    const { [this.state.id]: id, ...files } = this.state.files


    class #123 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    include updates at states

    this.handleSave = (value) => {
      if (this.state.isSaving) {
        localStorage.setItem(this.state.id, this.state.value)
        this.setState({
          isSaving: false,
          files: {
            ...this.state.files,
            [this.state.id]: this.state.value
          }
        })
      }
    }

    class #124 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    titles: naming those files

    Insted of:
    {
      id: 'hash-1231231',
      value: '# Markdown Text'
    }

    We gonna make:
    {
      id: 'hash-1231231',
      value: {
        title: 'My Title',
        content: 'Something'
      }
    }

    class #125 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    prevent other entries: getting strict patterns from node-node-uuid

    using regex for node-node-uuid patterns:
    7293a8e3-3bec-4e8a-934b-3d61337a0fdc

    id.match(/^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$/)


    class #126 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    component title (files)

    class #127 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Cont.

    'Header' component update:
    <input type='text' value={title} placeholder='Sem título' onChange={handleChange('title')} />

    logic updated (app.js):

        this.handleChange = (field) => (e) => {
          this.setState({
            [field]: e.target.value,
            isSaving: true
          })
        }

    'MarkdownEditor' component updated:

      <Header {...props} handleChange={handleChange} />
      <textarea value={value} onChange={handleChange('value')} autoFocus ref={textareaRef} />

    So depending on the 'field' argument value, our new handleChange now works eigther for textarea tag ('value') or input tag ('title').


    class #128 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Using another strategy for the same result

    Most save was to save: saving in a single entry.

    Let's name this entry 'markdown-editor inside handleSave():

      localStorage.setItem('markdown-editor', JSON.stringify(newFile))

    old version hangleSave:

        this.handleSave = (value) => {
          if (this.state.isSaving) {
            const newFile = {
              title: this.state.title || 'Sem título',
              content: this.state.value
            }
            localStorage.setItem(this.state.id, JSON.stringify(newFile))
            this.setState({
              isSaving: false,
              files: {
                ...this.state.files,
                [this.state.id]: newFile
              }
            })
          }
        }

      new version handleSave:

        this.handleSave = (value) => {
          if (this.state.isSaving) {
            const files = {
              ...this.state.files,
              [this.state.id]: {
                title: this.state.title || 'Sem título',
                content: this.state.value  
              }
            }

            localStorage.setItem('markdown-editor', JSON.stringify(files))
            this.setState({
              isSaving: false,
              files
            })
          }
        }

      old version componentDidMount:

        componentDidMount () {
          const files = Object.keys(localStorage)
          this.setState({
            files: files.filter((id) => id.match(/^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$/)).reduce((acc, fileId) => ({
              ...acc,
              [fileId]: JSON.parse(localStorage.getItem(fileId))
            }), {})
          })
        }

      new version componentDidMount:

        componentDidMount () {
          const files = JSON.parse(localStorage.getItem('markdown-editor'))
          this.setState({ files })
        }

    class #129 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Pure Component

    






    class #130 * * * * * * * * * * * * * * * * * * * * * * * * * * * *




    
    class #131 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    class #132 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    class #133 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    class #134 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    class #135 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    class #136 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    class #137 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    class #138 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    class #139 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    class #140 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    class #141 * * * * * * * * * * * * * * * * * * * * * * * * * * * *



      









              




          


      
          








      

















        










